{"version":3,"sources":["components/UserGroupSelector/index.js","pages/Accounts/Edit.js","pages/Members/Edit.js","pages/Claims/Edit.js","pages/Registrations/Edit.js","pages/Transactions/Edit.js","pages/UserGroups/Edit.js","pages/Users/Edit.js","pages/Users/Profile.js","pages/Accounts/index.js","pages/Login/index.js","pages/Members/index.js","pages/Claims/index.js","pages/Registrations/index.js","pages/Transactions/index.js","components/AccountSelector/index.js","pages/UserGroups/index.js","components/AccessRights/index.js","pages/Users/index.js","Global.js","containers/_PublicRoute/index.js","pages/Home/index.js","containers/__Routes/index.js","App.js","serviceWorker.js","i18n.js","index.js","components/Loader/index.js","components/Breadcrumbs/index.js","containers/_PrivateRoute/index.js","components/FormButtonGroup/index.js","components/DataTable/index.js","components/SearchBox/index.js","components/FileUpload/index.js","components/FormItemContainer/index.js"],"names":["withTranslation","props","name","value","onChange","required","className","useState","options","setOptions","current","pageSize","paging","useEffect","url","global","Fetch","then","result","data","catch","err","console","log","GetData","variant","fullWidth","MenuProps","onScroll","e","map","option","id","EditAccount","content","state","setState","prevState","handleOnChecked","target","checked","handleOnChange","validations","values","t","i18n","errors","bank","OnSave","match","params","_","isEmpty","FormData","reduce","r","v","k","append","undefined","method","credentials","headers","Headers","body","Promise","reject","message","handleOnSubmit","preventDefault","loading","_this","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","onClose","window","location","href","get","error","bank_no","remark","is_default","status","bind","this","process","items","label","onSubmit","container","style","marginTop","item","md","spacing","type","helperText","inputProps","multiline","component","control","sm","xs","textAlign","onCancel","Component","EditMember","handleOnDateChange","handleOnUpload","zh_surname","zh_first_name","en_surname","en_first_name","email","hkid","dob","moment","paid_at","isValid","home_address","mobile","gender","comnpany","job_title","office_address","employment_terms","d","isMoment","format","member_ref","yob","department","office_phone","emergency_contact","emergency_relation","emergency_number","profile","profile_file","subscription","sent_group_invite","password","password_confirmation","delete_profile","is_actived","utils","MomentUtils","aria-label","row","color","labelPlacement","placeholder","inputVariant","maxDate","Date","InputAdornmentProps","deletedField","rows","readOnly","sent_confirmation","EditClaims","invoice_number","item_name","handleOnCancel","handleOnReject","handleOnApprove","description","paid_by","receipt","receipt_file","delete_receipt","amount","parseFloat","step","min","onClick","size","marginRight","EditRegistration","proof","proof_file","declare","agreement","paid","payment_method","handleOnWithdraw","delete_proof","receipt_no","sent_payment_note","sent_receipt","large","EditTransition","account_id","account","transaction_date","EditUserGroup","access_rights","parseInt","EditUser","zh_name","en_name","user_name","user_group_id","Profile","Accounts","useTranslation","setData","filter","setFilter","order","orderBy","total","setPaging","columns","key","render","text","record","newPaging","count","onSearch","startIcon","dataId","onChangePage","event","newPage","onChangeRowsPerPage","newSize","onChangeSort","property","sort","rowAction","cookies","Cookies","useStyle","makeStyles","title","formInput","marginBottom","loginBtn","width","loginArea","backgroundImage","backgroundRepeat","backgroundSize","minHeight","overflow","display","alignItems","loginWrapper","background","margin","padding","borderRadius","Login","setLoading","username","setUsername","setPassword","errMsg","setErrMsg","errUserName","setErrUserName","errPass","setErrPass","showpass","setShowPass","logged","setLogged","classes","to","pathname","JSON","stringify","set","InputLabelProps","shrink","length","InputProps","endAdornment","Members","Claims","theme","tableContainer","paddingTop","Registrations","Transactions","UserGroups","selected","setSelected","selectedIndex","indexOf","newSelected","concat","slice","push","borderBottom","paddingLeft","lineHeight","isItemSelected","displayname","Users","myHeader","defaultHeader","crossDomain","fetch","response","ok","json","res","PublicRoute","Home","Grid","Routes","exact","path","Moment","locale","Boolean","hostname","use","Backend","LanguageDetector","initReactI18next","init","lng","localStorage","getItem","fallbackLng","debug","react","useSuspense","interpolation","escapeValue","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","Loader","crumbsBody","Breadcrumbs","separator","fontSize","index","SubSidbarNav","open","setOpen","child","icon","find","x","link","button","in","timeout","unmountOnExit","disablePadding","nav","PrivateRoute","rest","collapse","setCollapse","loggedOut","setLoggedOut","user","navigations","remove","setTimeout","alt","FormButtonGroup","children","useStyles","root","paper","table","minWidth","visuallyHidden","border","clip","height","top","DataTableHead","onSort","onSelectAll","numSelected","rowCount","indeterminate","col","columnOrder","align","sortDirection","active","direction","DataTable","aria-labelledby","stickyHeader","labelId","hover","handleClick","role","tabIndex","aria-checked","rowsPerPageOptions","rowsPerPage","page","prototype","PropTypes","func","array","isRequired","object","string","SearchBox","search","setSearch","onKeyPress","startAdornment","hidden","preview","uploadContainer","uploadButton","left","transform","uploadPreviewContainer","zIndex","modalPreview","maxHeight","maxWidth","uploadRemove","right","modal","justifyContent","FileUpload","setFiles","setPreview","fileKey","setFileKey","handleClose","accept","files","reader","FileReader","readAsDataURL","onloadend","htmlFor","onBackdropClick","closeAfterTransition","BackdropComponent","Backdrop","aria-describedby","src","FormItemContainer"],"mappings":"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","file":"static/js/main.c8fec8b3.chunk.js","sourcesContent":["import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Select, MenuItem } from '@material-ui/core';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Loader from '../../components/Loader';\r\nimport Alert from '../../components/Alert';\r\n\r\nconst UserGroupSelector = (props) => {\r\n    const { name, value, onChange, required, className=\"\" } = props;\r\n    const [options, setOptions] = useState([]);\r\n\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 50\r\n    }); \r\n\r\n    const GetData = () => {\r\n        let url = `user_groups?page=${paging.current}&size=${paging.pageSize}&order=name&sort=asc`;\r\n        // if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                setOptions(result.data);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    const loadMoreItems = (e) => {\r\n        console.log(e);\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n\r\n    return(<Fragment>\r\n        <Select\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            className={className}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            MenuProps={{\r\n                onScroll:loadMoreItems\r\n            }}\r\n        >\r\n            <MenuItem value={null}></MenuItem>\r\n            {\r\n                options.map((option)=>{\r\n                    return (<MenuItem value={option.id}>{option.name}</MenuItem>)\r\n                })\r\n            }\r\n        </Select>\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(UserGroupSelector);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControlLabel, FormControl, FormHelperText, Checkbox } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditAccount extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                bank:\"\",\r\n                bank_no:\"\",\r\n                remark: \"\",\r\n                is_default: false\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`accounts/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.bank) errors.bank = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            console.log(content);\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`accounts${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/accounts/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_accounts\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_accounts\"), href:\"/accounts\" },\r\n                        { label: id === undefined ? t(\"lb_new_accounts\") : t(\"lb_edit_accounts\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_bank')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"bank\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"bank\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"bank\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_bank_no')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"bank_no\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"bank_no\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"bank_no\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_remark')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"remark\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"remark\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"remark\",\"\")}\r\n                                            multiline\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_is_default')}:` }\r\n                                    >\r\n                                        <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Checkbox \r\n                                                        checked={content.is_default} \r\n                                                        onChange={this.handleOnChecked(\"is_default\")} \r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </FormControl>\r\n                                        <FormHelperText className=\"error\">{_.get(errors, \"is_default\",\"\")}</FormHelperText>\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                    <FormButtonGroup\r\n                                        onCancel={(e) => {\r\n                                            e.preventDefault()\r\n                                            window.location.href=\"/accounts\"\r\n                                        }}\r\n                                    >\r\n                                        \r\n                                    </FormButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditAccount);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, Radio, RadioGroup, FormControlLabel, FormControl, Switch, Select, MenuItem, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport FileUpload from '../../components/FileUpload';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditMember extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_surname:\"\",\r\n                en_surname:\"\",\r\n                zh_first_name:\"\",\r\n                en_first_name:\"\",\r\n                member_ref: \"\",\r\n                hkid:\"\",\r\n                yob:\"\",\r\n                dob: null,\r\n                email:\"\",\r\n                home_address:\"\",\r\n                department: \"\",\r\n                mobile:\"\",\r\n                gender:\"\",\r\n                comnpany:\"\",\r\n                job_title:\"\",\r\n                office_address:\"\",\r\n                office_phone: \"\",\r\n                employment_terms:\"\",\r\n                emergency_contact: \"\",\r\n                emergency_relation: \"\",\r\n                emergency_number: \"\",\r\n                profile: {},\r\n                profile_file: null,\r\n                subscription:true,\r\n                sent_group_invite: false,\r\n                password: null,\r\n                password_confirmation: null,\r\n                remark: \"\",\r\n                delete_profile: false,\r\n                is_actived:true\r\n            },\r\n            errors: {},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`members/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"profile\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"dob\": r[k] = moment(v); break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n        console.log(content);\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.zh_surname) errors.zh_surname = t(\"field_error_required\");\r\n        if (!values.zh_first_name) errors.zh_first_name = t(\"field_error_required\");\r\n        if (!values.en_surname) errors.en_surname = t(\"field_error_required\");\r\n        if (!values.en_first_name) errors.en_first_name = t(\"field_error_required\");\r\n        if (!values.email) errors.email = t(\"field_error_required\");\r\n        if (!values.hkid) errors.hkid = t(\"field_error_required\");\r\n        if (!values.dob) \r\n            errors.dob = t(\"field_error_required\");\r\n        else if(!moment(values.paid_at).isValid())\r\n            errors.dob = t(\"field_error_invalid\");\r\n\r\n        if (!values.home_address) errors.home_address = t(\"field_error_required\");\r\n        if (!values.mobile) errors.mobile = t(\"field_error_required\");\r\n        if (!values.gender) errors.gender = t(\"field_error_required\");\r\n        if (!values.comnpany) errors.comnpany = t(\"field_error_required\");\r\n        if (!values.job_title) errors.job_title = t(\"field_error_required\");\r\n        if (!values.office_address) errors.office_address = t(\"field_error_required\");\r\n        if (!values.employment_terms) errors.employment_terms = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            console.log(content);\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"dob\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            data.append(\"yob\",d.format(\"YYYY\"));\r\n                            break;\r\n                        case \"profile_file\":\r\n                            data.append(\"profile\",v);\r\n                            break;\r\n                        case \"profile\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`members${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/members/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        \r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_members\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_members\"), href:\"/members\" },\r\n                        { label: id === undefined ? t(\"lb_new_members\") : t(\"lb_edit_members\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"zh_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"zh_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"en_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"en_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_email')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"email\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"email\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"email\"\r\n                                                helperText={_.get(errors, \"email\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_mobile')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"mobile\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"mobile\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"phone\"\r\n                                                helperText={_.get(errors, \"mobile\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_home_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"home_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"home_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"home_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_gender')}:` }\r\n                                        >\r\n                                            <RadioGroup aria-label=\"gender\" name=\"gender\" \r\n                                                value={_.get(content,\"gender\", null)}\r\n                                                onChange={this.handleOnChange}\r\n                                                row\r\n                                            >\r\n                                                <FormControlLabel\r\n                                                    value=\"F\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_female') }\r\n                                                    labelPlacement=\"end\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"M\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_male') }\r\n                                                    labelPlacement=\"end\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"O\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_other') }\r\n                                                    labelPlacement=\"end\"\r\n                                                />\r\n                                            </RadioGroup>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_dob')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"dob\", null)}\r\n                                                placeholder=\"\"\r\n                                                required\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('dob') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"MM-DD-YYYY\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"dob\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_hkid')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"hkid\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"hkid\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"hkid\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_emergency_contact')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"emergency_contact\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"emergency_contact\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"emergency_contact\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_emergency_relation')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"emergency_relation\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"emergency_relation\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"emergency_relation\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_emergency_number')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"emergency_number\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"emergency_number\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"emergency_number\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_comnpany')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"comnpany\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"comnpany\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"comnpany\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_office_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"office_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_job_title')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"job_title\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"job_title\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"job_title\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_employment_terms')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"employment_terms\",\"\")}\r\n                                                name=\"employment_terms\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value=\"Permanent\">長工 Permanent</MenuItem>\r\n                                                <MenuItem value=\"General Contract\">一般合約  General Contract</MenuItem>\r\n                                                <MenuItem value=\"Self-Employed\">自僱 Self-Employed</MenuItem>\r\n                                                <MenuItem value=\"Non-Civil Service Contract\">非公務員合約制 Non-Civil Service Contract</MenuItem>\r\n                                                <MenuItem value=\"Gov T-Contract\">Gov T-Contract</MenuItem>\r\n                                                <MenuItem value=\"Civil Servant\">公務員 Civil Servant</MenuItem>\r\n                                                <MenuItem value=\"Part-time\">兼職 Part-time</MenuItem>\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"office_address\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_office_phone')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_phone\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"office_phone\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_phone\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_department')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"department\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.office_phone }\r\n                                                value={ _.get(content,\"department\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"department\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_profile')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"profile\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                name=\"profile_file\"\r\n                                                deletedField=\"delete_profile\"\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_remark')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"remark\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"remark\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"remark\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={12}><hr /></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_member_ref')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"member_ref\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"member_ref\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"member_ref\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: true\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_is_actived')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.is_actived} \r\n                                                onChange={this.handleOnChecked(\"is_actived\")} \r\n                                                name=\"is_actived\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"is_actived\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_password')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"password\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"password\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"password\"\r\n                                                helperText={_.get(errors, \"password\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required={content.password}\r\n                                            label={ `${t('input_password_confirmation')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"password_confirmation\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                required={content.password}\r\n                                                value={ _.get(content,\"password_confirmation\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"password\"\r\n                                                helperText={_.get(errors, \"password_confirmation\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_subscription')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_confirmation} \r\n                                                onChange={this.handleOnChecked(\"subscription\")} \r\n                                                name=\"subscription\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"subscription\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_group_invite')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_confirmation} \r\n                                                onChange={this.handleOnChecked(\"sent_group_invite\")} \r\n                                                name=\"sent_group_invite\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_group_invite\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/members\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditMember);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControl, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport FileUpload from '../../components/FileUpload';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditClaims extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                invoice_number: \"\",\r\n                item_name: \"\",\r\n                description: \"\",\r\n                paid_by: \"\",\r\n                paid_at: moment(),\r\n                receipt: null,\r\n                receipt_file: null,\r\n                delete_receipt: false,\r\n                amount: 0,\r\n                status: \"New\"\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnApprove = this.handleOnApprove.bind(this);\r\n        this.handleOnReject = this.handleOnReject.bind(this);\r\n        this.handleOnCancel = this.handleOnCancel.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`claims/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"paid_at\": r[k] = moment(v); break;\r\n                                    case \"receipt\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"amount\": r[k] = parseFloat(v); break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.invoice_number) errors.invoice_number = t(\"field_error_required\");\r\n        if (!values.item_name) errors.item_name = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            console.log(content);\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"paid_at\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            break;\r\n                        case \"receipt_file\":\r\n                            data.append(\"receipt\",v);\r\n                            break;\r\n                        case \"receipt\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`claims${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnCancel = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`claims/cancel/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_cancelled\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnReject = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`claims/reject/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_rejected\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnApprove = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`claims/approve/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_approved\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_claims\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_claims\"), href:\"/claims\" },\r\n                        { label: id === undefined ? t(\"lb_new_claims\") : t(\"lb_edit_claims\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_invoice_number')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"invoice_number\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"invoice_number\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"invoice_number\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_item_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"item_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"item_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"item_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_amount')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"amount\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"amount\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"number\"\r\n                                                helperText={_.get(errors, \"amount\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    step:0.01,\r\n                                                    min:0\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_paid_by')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"paid_by\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"paid_by\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"paid_by\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_paid_at')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"paid_at\", null)}\r\n                                                placeholder=\"\"\r\n                                                required\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('paid_at') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"MM-DD-YYYY\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"paid_at\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_description')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"description\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"description\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"description\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_receipt')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"receipt\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                name=\"receipt_file\"\r\n                                                deletedField=\"delete_receipt\"\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    \r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={6} xs={6}>\r\n                                    {\r\n                                        (id !== undefined && content.status == \"New\") && <Button \r\n                                            onClick={this.handleOnApprove}\r\n                                            color=\"primary\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                            style={{\r\n                                                marginRight: \"15px\"\r\n                                            }}\r\n                                        >\r\n                                            Approve\r\n                                        </Button>\r\n                                    }\r\n                                    {\r\n                                        (id !== undefined && content.status == \"New\") && <Button \r\n                                            onClick={this.handleOnReject}\r\n                                            color=\"secondary\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                            style={{\r\n                                                marginRight: \"15px\"\r\n                                            }}\r\n                                        >\r\n                                            Reject\r\n                                        </Button>\r\n                                    }\r\n                                    {\r\n                                        (id !== undefined && content.status == \"New\") && <Button \r\n                                            onClick={this.handleOnCancel}\r\n                                            color=\"inherit\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Cancelled\r\n                                        </Button>\r\n                                    }\r\n                                    \r\n                                    </Grid>\r\n                                    <Grid item sm={6} xs={6} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/claims\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditClaims);","import React, { Component, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Grid, Card,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { \r\n    Radio, FormControlLabel, FormControl, MenuItem,\r\n    TextField, Select, RadioGroup, Switch, Checkbox, FormHelperText \r\n} from '@material-ui/core';\r\n\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport FileUpload from '../../components/FileUpload';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditRegistration extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_surname:\"\",\r\n                en_surname:\"\",\r\n                zh_first_name:\"\",\r\n                en_first_name:\"\",\r\n                hkid:\"\",\r\n                yob:\"\",\r\n                dob: null,\r\n                email:\"\",\r\n                home_address:\"\",\r\n                mobile:\"\",\r\n                gender:\"\",\r\n                comnpany:\"\",\r\n                department:\"\",\r\n                job_title:\"\",\r\n                office_address:\"\",\r\n                office_phone:\"\",\r\n                employment_terms:\"\",\r\n                proof: \"\",\r\n                proof_file: null,\r\n                delete_proof: false,\r\n                declare:true,\r\n                agreement:true,\r\n                remark: \"\",\r\n                receipt_no: \"\",\r\n                status: \"New\",\r\n                payment_method: null,\r\n                paid: false,\r\n                paid_at: null,\r\n                sent_confirmation: false,\r\n                sent_payment_note: false,\r\n                sent_receipt: false\r\n            },\r\n            errors: {\r\n\r\n            },\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n    \r\n    componentWillMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`registrations/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"dob\": r[k] = moment(v); break;\r\n                                    case \"proof\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"audit\":\r\n                                        r = {\r\n                                            ...r,\r\n                                            ...v\r\n                                        }\r\n                                        break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.zh_surname) errors.zh_surname = t(\"field_error_required\");\r\n        if (!values.zh_first_name) errors.zh_first_name = t(\"field_error_required\");\r\n        if (!values.en_surname) errors.en_surname = t(\"field_error_required\");\r\n        if (!values.en_first_name) errors.en_first_name = t(\"field_error_required\");\r\n        if (!values.email) errors.email = t(\"field_error_required\");\r\n        if (!values.hkid) errors.hkid = t(\"field_error_required\");\r\n        if (!values.dob) \r\n            errors.dob = t(\"field_error_required\");\r\n        else if(!moment(values.dob).isValid())\r\n            errors.dob = t(\"field_error_invalid\");\r\n\r\n        if (!values.home_address) errors.home_address = t(\"field_error_required\");\r\n        if (!values.mobile) errors.mobile = t(\"field_error_required\");\r\n        if (!values.gender) errors.gender = t(\"field_error_required\");\r\n        if (!values.comnpany) errors.comnpany = t(\"field_error_required\");\r\n        if (!values.job_title) errors.job_title = t(\"field_error_required\");\r\n        if (!values.office_address) errors.office_address = t(\"field_error_required\");\r\n        \r\n        if (!values.office_phone) \r\n        {\r\n            if (!values.proof && !values.proof_file) {\r\n                errors.office_phone = t(\"field_error_required\");\r\n            }\r\n        }\r\n        if (!values.employment_terms) errors.employment_terms = t(\"field_error_required\");\r\n        if (!values.declare) errors.declare = t(\"field_error_required\");\r\n        if (!values.agreement) errors.agreement = t(\"field_error_required\");\r\n\r\n        // Audit use\r\n        if (values.paid) {\r\n            if (!values.paid_at) {\r\n                errors.paid_at = t(\"field_error_required\");\r\n            } else if (!moment(values.paid_at).isValid()) {\r\n                errors.paid_at = t(\"field_error_invalid\");\r\n            }\r\n            if (!values.payment_method) errors.payment_method = t(\"field_error_required\");\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"dob\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            data.append(\"yob\",d.format(\"YYYY\"));\r\n                            break;\r\n                        case \"proof_file\":\r\n                            data.append(\"proof\",v);\r\n                            break;\r\n                        case \"paid_at\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            break;\r\n                        case \"proof\":\r\n                        case \"auth\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`registrations${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnCancel = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`registrations/cancel/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_cancelled\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnWithdraw = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`registrations/withdraw/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_withdraw\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnApprove = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`registrations/approve/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_approved\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })  \r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_registrations\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_registrations\"), href:\"/registrations\" },\r\n                        { label: id === undefined ? t(\"lb_new_registrations\") : t(\"lb_edit_registrations\") }\r\n                    ]}\r\n                />\r\n                <form\r\n                    onSubmit={this.handleOnSubmit}\r\n                >\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.zh_surname }\r\n                                                value={ _.get(content,\"zh_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.zh_first_name }\r\n                                                value={ _.get(content,\"zh_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.en_surname }\r\n                                                value={ _.get(content,\"en_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.en_first_name }\r\n                                                value={ _.get(content,\"en_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_email')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"email\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.email }\r\n                                                value={ _.get(content,\"email\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"email\"\r\n                                                helperText={_.get(errors, \"email\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_mobile')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"mobile\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.mobile }\r\n                                                value={ _.get(content,\"mobile\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"phone\"\r\n                                                helperText={_.get(errors, \"mobile\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_home_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"home_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.home_address }\r\n                                                value={ _.get(content,\"home_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"home_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_gender')}:` }\r\n                                        >\r\n                                            <RadioGroup aria-label=\"gender\" name=\"gender\" \r\n                                                value={_.get(content,\"gender\", null)}\r\n                                                onChange={this.handleOnChange}\r\n                                                row\r\n                                            >\r\n                                                <FormControlLabel\r\n                                                    value=\"F\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_female') }\r\n                                                    labelPlacement=\"end\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"M\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_male') }\r\n                                                    labelPlacement=\"end\"\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"O\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_other') }\r\n                                                    labelPlacement=\"end\"\r\n                                                />\r\n                                            </RadioGroup>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"gender\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_dob')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"dob\", null)}\r\n                                                placeholder=\"\"\r\n                                                required\r\n                                                error={ errors.dob }\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('dob') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"MM-DD-YYYY\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"dob\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_hkid')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"hkid\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.hkid }\r\n                                                value={ _.get(content,\"hkid\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"hkid\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_comnpany')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"comnpany\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.comnpany }\r\n                                                value={ _.get(content,\"comnpany\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"comnpany\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_office_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.office_address }\r\n                                                value={ _.get(content,\"office_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_job_title')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"job_title\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.job_title }\r\n                                                value={ _.get(content,\"job_title\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"job_title\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_employment_terms')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"employment_terms\",\"\")}\r\n                                                name=\"employment_terms\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.employment_terms }\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value=\"Permanent\">長工 Permanent</MenuItem>\r\n                                                <MenuItem value=\"General Contract\">一般合約  General Contract</MenuItem>\r\n                                                <MenuItem value=\"Self-Employed\">自僱 Self-Employed</MenuItem>\r\n                                                <MenuItem value=\"Non-Civil Service Contract\">非公務員合約制 Non-Civil Service Contract</MenuItem>\r\n                                                <MenuItem value=\"Gov T-Contract\">Gov T-Contract</MenuItem>\r\n                                                <MenuItem value=\"Civil Servant\">公務員 Civil Servant</MenuItem>\r\n                                                <MenuItem value=\"Part-time\">兼職 Part-time</MenuItem>\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"employment_terms\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_office_phone')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_phone\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.office_phone }\r\n                                                value={ _.get(content,\"office_phone\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_phone\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_department')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"department\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.office_phone }\r\n                                                value={ _.get(content,\"department\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"department\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_status')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"status\",\"\")}\r\n                                                name=\"status\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.status }\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: true\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value=\"New\">New</MenuItem>\r\n                                                <MenuItem value=\"Completed\">Completed</MenuItem>\r\n                                                <MenuItem value=\"Withdraw\">Withdraw</MenuItem>\r\n                                                <MenuItem value=\"Cancelled\">Cancelled</MenuItem>\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"status\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_proof')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"proof\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                name=\"proof_file\"\r\n                                                deletedField=\"delete_proof\"\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_remark')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"remark\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.remark }\r\n                                                value={ _.get(content,\"remark\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"remark\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={11} spacing={1}>\r\n                                        <FormItemContainer large>\r\n                                            <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Checkbox \r\n                                                            checked={content.declare} \r\n                                                            onChange={this.handleOnChecked(\"declare\")} \r\n                                                        />\r\n                                                    }\r\n                                                    label={ t(\"input_declare\") }\r\n                                                />\r\n                                            </FormControl>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"declare\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={11} spacing={1}>\r\n                                        <FormItemContainer large>\r\n                                            <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Checkbox \r\n                                                            checked={content.agreement} \r\n                                                            onChange={this.handleOnChecked(\"agreement\")} \r\n                                                        />\r\n                                                    }\r\n                                                    label={ t(\"input_agreement\") }\r\n                                                />\r\n                                            </FormControl>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"agreement\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={12}><hr /></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_confirmation')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_confirmation} \r\n                                                onChange={this.handleOnChecked(\"sent_confirmation\")} \r\n                                                name=\"sent_confirmation\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_confirmation\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_paid')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.paid} \r\n                                                onChange={this.handleOnChecked(\"paid\")} \r\n                                                name=\"paid\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"paid\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_payment_note')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_payment_note} \r\n                                                onChange={this.handleOnChecked(\"sent_payment_note\")} \r\n                                                name=\"sent_payment_note\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_payment_note\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required={content.paid}\r\n                                            label={ `${t('input_paid_at')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"paid_at\", null)}\r\n                                                placeholder=\"\"\r\n                                                error={ errors.paid_at }\r\n                                                required={content.paid}\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('paid_at') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"MM-DD-YYYY\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"paid_at\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={5} spacing={1}></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required={content.paid}\r\n                                            label={ `${t('input_payment_method')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"payment_method\",\"\")}\r\n                                                name=\"payment_method\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.payment_method }\r\n                                                required={content.paid}\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value={null}></MenuItem>\r\n                                                <MenuItem value=\"Cash\">Cash</MenuItem>\r\n                                                <MenuItem value=\"Cheque\">Cheque</MenuItem>\r\n                                                <MenuItem value=\"Online Payment\">Online Payment</MenuItem>\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"payment_method\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_receipt')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_receipt} \r\n                                                onChange={this.handleOnChecked(\"sent_receipt\")} \r\n                                                name=\"sent_receipt\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_receipt\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_receipt_no')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"receipt_no\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.receipt_no }\r\n                                                value={ _.get(content,\"receipt_no\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"receipt_no\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={6} xs={6}>\r\n                                    {\r\n                                        (id !== undefined && content.status != \"Completed\") && <Button \r\n                                                onClick={this.handleOnApprove}\r\n                                                color=\"primary\"\r\n                                                size=\"middle\"\r\n                                                variant=\"contained\"\r\n                                                style={{\r\n                                                    marginRight: \"15px\"\r\n                                                }}\r\n                                            >\r\n                                            Approve\r\n                                        </Button>\r\n                                    }\r\n                                    {\r\n                                        (id !== undefined && content.status != \"Cancelled\") && <Button \r\n                                                onClick={this.handleOnCancel}\r\n                                                color=\"secondary\"\r\n                                                size=\"middle\"\r\n                                                variant=\"contained\"\r\n                                                style={{\r\n                                                    marginRight: \"15px\"\r\n                                                }}\r\n                                            >\r\n                                            Cancelled\r\n                                        </Button>\r\n                                    }\r\n                                    {\r\n                                        (id !== undefined && content.status != \"Withdraw\") && <Button \r\n                                                onClick={this.handleOnWithdraw}\r\n                                                color=\"inherit\"\r\n                                                size=\"middle\"\r\n                                                variant=\"contained\"\r\n                                            >\r\n                                            Withdraw\r\n                                        </Button>\r\n                                    }\r\n                                    </Grid>\r\n                                    <Grid item sm={6} xs={6} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/registrations\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditRegistration);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControl, FormLabel, Select, MenuItem, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport AccountSelector from '../../components/AccountSelector';\r\nimport FileUpload from '../../components/FileUpload';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\nimport { toast } from 'react-toastify';\r\nclass EditTransition extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                account_id: \"\",\r\n                account: {},\r\n                invoice_number: \"\",\r\n                item_name: \"\",\r\n                description: \"\",\r\n                transaction_date: null,\r\n                receipt: null,\r\n                receipt_file: null,\r\n                delete_receipt: false,\r\n                amount: 0\r\n            },\r\n            errors: {},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`transactions/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"transaction_date\": r[k] = moment(v); break;\r\n                                    case \"receipt\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"amount\": r[k] = parseFloat(v); break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.item_name) errors.item_name = t(\"field_error_required\");\r\n        if (!values.account_id) errors.account_id = t(\"field_error_required\");\r\n        \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"transaction_date\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            break;\r\n                        case \"receipt_file\":\r\n                            data.append(\"receipt\",v);\r\n                            break;\r\n                        case \"receipt\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`transactions${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/transactions/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_transactions\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_transactions\"), href:\"/transactions\" },\r\n                        { label: id === undefined ? t(\"lb_new_transactions\") : t(\"lb_edit_transactions\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_account')}:` }\r\n                                        >\r\n                                            <AccountSelector\r\n                                                name=\"account_id\"\r\n                                                value={ content.account_id }\r\n                                                required\r\n                                                onChange={this.handleOnChange}\r\n                                                className=\"form-input\"\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_invoice_number')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"invoice_number\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"invoice_number\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"invoice_number\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_item_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"item_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                \r\n                                                value={ _.get(content,\"item_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"item_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_amount')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"amount\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"amount\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"number\"\r\n                                                helperText={_.get(errors, \"amount\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    step:0.01\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_transaction_date')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"transaction_date\", null)}\r\n                                                placeholder=\"\"\r\n                                                required\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('transaction_date') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"MM-DD-YYYY\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"transaction_date\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}></Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_receipt')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"receipt\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                name=\"receipt_file\"\r\n                                                deletedField=\"delete_receipt\"\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_description')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"description\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"description\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"description\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/transactions\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditTransition);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControl, FormLabel, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\n\r\nimport AccessRights from '../../components/AccessRights';\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditUserGroup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                name:\"\",\r\n                remark: \"\",\r\n                access_rights: []\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`user_groups/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"access_rights\":\r\n                                        r[k] = v.map((row) => {\r\n                                            return parseInt(row.id);\r\n                                        })\r\n                                        break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name, value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        // if (!values.zh_surname) errors.zh_surname = t(\"field_error_required\");\r\n        \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    \r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`user_groups${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/usergroups/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_usergroups\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_usergroups\"), href:\"/usergroups\" },\r\n                        { label: id === undefined ? t(\"lb_new_usergroups\") : t(\"lb_edit_usergroups\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        large\r\n                                        label={ `${t('input_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            \r\n                                            value={ _.get(content,\"name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        large\r\n                                        label={ `${t('input_remark')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"remark\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"remark\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"remark\",\"\")}\r\n                                            multiline\r\n                                            inputProps={{\r\n                                                className:\"form-input\",\r\n                                                rows: \"4\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        large\r\n                                        label={ `${t('input_access_rights')}:` }\r\n                                    >\r\n                                        <AccessRights\r\n                                            name=\"access_rights\"\r\n                                            value={ content.access_rights }\r\n                                            onChange={this.handleOnChecked}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                    <FormButtonGroup\r\n                                        onCancel={(e) => {\r\n                                            e.preventDefault()\r\n                                            window.location.href=\"/usergroups\"\r\n                                        }}\r\n                                    >\r\n                                        \r\n                                    </FormButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditUserGroup);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControlLabel, FormControl, FormLabel, Checkbox, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport UserGroupSelector from '../../components/UserGroupSelector';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\nimport { toast } from 'react-toastify';\r\nclass EditUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_name:\"\",\r\n                en_name:\"\",\r\n                user_name: \"\",\r\n                email:\"\",\r\n                mobile:\"\",\r\n                password: \"\",\r\n                password_confirmation:\"\",\r\n                user_group_id: null,\r\n                is_actived:true\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`users/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        // if (!values.zh_surname) errors.zh_surname = t(\"field_error_required\");\r\n       \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`users${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/users/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_users\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_users\"), href:\"/users\" },\r\n                        { label: id === undefined ? t(\"lb_new_users\") : t(\"lb_edit_users\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_zh_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"zh_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            \r\n                                            value={ _.get(content,\"zh_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"zh_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_en_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"en_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            \r\n                                            value={ _.get(content,\"en_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"en_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_email')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"email\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"email\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"email\"\r\n                                            helperText={_.get(errors, \"email\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_mobile')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"mobile\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"mobile\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"mobile\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_user_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"user_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"user_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"user_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_user_group')}:` }\r\n                                    >\r\n                                        <UserGroupSelector\r\n                                            name=\"user_group_id\"\r\n                                            value={ content.user_group_id }\r\n                                            required\r\n                                            onChange={this.handleOnChange}\r\n                                            className=\"form-input\"\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_password')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"password\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required={content.password}\r\n                                        label={ `${t('input_password_confirmation')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password_confirmation\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            required={content.password}\r\n                                            value={ _.get(content,\"password_confirmation\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password_confirmation\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_is_actived')}:` }\r\n                                    >\r\n                                        <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Checkbox \r\n                                                        checked={content.is_actived} \r\n                                                        onChange={this.handleOnChecked(\"is_actived\")} \r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </FormControl>\r\n                                        <FormHelperText className=\"error\">{_.get(errors, \"is_actived\",\"\")}</FormHelperText>\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                    <FormButtonGroup\r\n                                        onCancel={(e) => {\r\n                                            e.preventDefault()\r\n                                            window.location.href=\"/users\"\r\n                                        }}\r\n                                    >\r\n                                        \r\n                                    </FormButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditUser);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Checkbox, Select, MenuItem } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport FileUpload from '../../components/FileUpload';\r\nimport UserGroupSelector from '../../components/UserGroupSelector';\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_name:\"\",\r\n                en_name:\"\",\r\n                user_name: \"\",\r\n                email:\"\",\r\n                mobile:\"\",\r\n                password: \"\",\r\n                password_confirmation:\"\",\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        global.Fetch(`users/profile`)\r\n            .then((result)=>{\r\n                this.setState(prevState => ({\r\n                    ...prevState,\r\n                    content: {\r\n                        ...prevState.content,\r\n                        ..._.reduce(result.data,(r,v,k)=>{\r\n                            switch(k) {\r\n                                default: r[k]=v;break;\r\n                            }\r\n                            return r;\r\n                        },{})\r\n                    },\r\n                    loading:false\r\n                }))\r\n            }).catch((err)=>{\r\n                this.setState({\r\n                    loading: true\r\n                })\r\n            })\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        // if (!values.zh_surname) errors.zh_surname = t(\"field_error_required\");\r\n       \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`users/profile`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/profile`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const message = _.get(err,'message',err);\r\n\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_profile\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label: t(\"lb_profile\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_zh_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"zh_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            \r\n                                            value={ _.get(content,\"zh_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"zh_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_en_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"en_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            \r\n                                            value={ _.get(content,\"en_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"en_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_email')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"email\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"email\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"email\"\r\n                                            helperText={_.get(errors, \"email\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_mobile')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"mobile\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"mobile\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"mobile\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_user_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"user_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"user_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"user_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    \r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_password')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"password\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required={content.password}\r\n                                        label={ `${t('input_password_confirmation')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password_confirmation\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            required={content.password}\r\n                                            value={ _.get(content,\"password_confirmation\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password_confirmation\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign: \"right\"}}>\r\n                                    <FormButtonGroup />\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(Profile);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nconst Accounts = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"bank\", label: \"Bank\" },\r\n        { key: \"balance\", label: \"Balance\" },\r\n        { key: \"remark\", label: \"Remark\" },\r\n        { key: \"is_default\", label: \"Default\", render: (row,text) => { return text ? \"Y\": \"N\"} },\r\n        { key: \"updated_at\", label: \"Last Updated\", render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        let url = `accounts?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_accounts\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_accounts\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder=\"Search...\"\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/accounts/create\"\r\n                            >\r\n                                New\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/accounts/edit/${row.id}`}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Accounts;","import React, { useState, Fragment, useEffect } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, TextField, Button, InputAdornment, FormControlLabel, Icon } from '@material-ui/core'\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport moment from 'moment';\r\nimport Cookies from 'universal-cookie';\r\nimport Loader from '../../components/Loader';\r\nimport _ from 'lodash';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst cookies = new Cookies();\r\nconst useStyle = makeStyles({\r\n    title: {\r\n        textAlign: \"center\"\r\n    },\r\n    formInput: {\r\n        marginBottom: \"49px\"\r\n    },\r\n    loginBtn: {\r\n        width: \"100%\"\r\n    },\r\n    loginArea: {\r\n        backgroundImage: \"url('/assets/img/bg.jpg')\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"cover\",\r\n        minHeight:\"100vh\",\r\n        width: \"100%\",\r\n        overflow:\"hidden\",\r\n        display:\"flex\",\r\n        alignItems:\"center\"\r\n    },\r\n    loginWrapper: {\r\n        background: \"#FFF\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n        display: \"block\",\r\n        padding: \"50px\",\r\n        borderRadius: \"5px\",\r\n        minHeight: \"300px\"\r\n    }\r\n})\r\nconst Login = props => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [errUserName, setErrUserName] = useState(\"\");\r\n    const [errPass, setErrPass] = useState(\"\");\r\n\r\n    const [showpass, setShowPass] = useState(false);\r\n\r\n    const [logged,setLogged] = useState(false);\r\n\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const classes = useStyle();\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setErrMsg(\"\");\r\n        setErrUserName(\"\");\r\n        setErrPass(\"\");\r\n        if (username == \"\") setErrUserName(t(\"msg_username_empty\")); \r\n        if (password == \"\") setErrPass(t(\"msg_password_empty\")); \r\n        \r\n        if (username != \"\" && password != \"\") {\r\n            setLoading(true);\r\n            global.Fetch('auth/login',{\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }),\r\n                body:  JSON.stringify({\r\n                    username: username,\r\n                    password: password\r\n                })\r\n            }).then((result)=>{\r\n                let exp_date = _.get(result,'data.exp_date','');\r\n                cookies.set(\"mms_user\", result.data)\r\n                setLogged(true);\r\n            }).catch((err)=>{\r\n                setLoading(false);\r\n                setErrMsg(t(_.get(err,'message',_.get(err,'error','system_error'))));\r\n            })\r\n        }\r\n    }\r\n\r\n    return (logged ? <Redirect to={{pathname: \"/\"}}/> : <Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_login\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid className={classes.loginArea}>\r\n            <form className={classes.loginWrapper} onSubmit={onSubmit}>\r\n                <Grid item xs={12} className=\"loginForm\">\r\n                        <div className={classes.title}>\r\n                            <h2>{ t(\"lb_login\") }</h2>\r\n                        </div>\r\n                        <TextField\r\n                            label={ t('lb_username') }\r\n                            placeholder=\"\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            name=\"username\"\r\n                            onChange={(e)=>{ setUsername(e.target.value) }}\r\n                            value={username}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            helperText={ errUserName }\r\n                            error={ errMsg.length > 0 || errUserName.length > 0 }\r\n                            className={classes.formInput}\r\n                        />\r\n                        <TextField\r\n                            label={ t('lb_password') }\r\n                            placeholder=\"\"\r\n                            type={ showpass ? 'text' : 'password'}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            name=\"password\"\r\n                            onChange={(e)=>{ setPassword(e.target.value) }}\r\n                            value={password}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            error={ errMsg.length > 0 || errPass.length > 0 }\r\n                            helperText={ errPass ? errPass : errMsg }\r\n                            className={classes.formInput}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                  <InputAdornment\r\n                                    onClick={(e) => { setShowPass(!showpass); }}\r\n                                    className=\"showPassword\"\r\n                                    position=\"end\">\r\n                                        {\r\n                                            showpass ? <VisibilityIcon/> : <VisibilityOffIcon/>\r\n                                        }\r\n                                  </InputAdornment>\r\n                                ),\r\n                              }}\r\n                        />\r\n                        \r\n                        <Button \r\n                            type=\"submit\" variant=\"contained\" color=\"primary\" \r\n                            className={classes.loginBtn}\r\n                        >login</Button>\r\n                </Grid>\r\n            </form>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nconst Members = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"zh_surname\", label: \"Surame (ZH)\" },\r\n        { key: \"zh_first_name\", label: \"First Name (ZH)\" },\r\n        { key: \"en_surname\", label: \"Surame (EH)\" },\r\n        { key: \"en_first_name\", label: \"First Name (EN)\" },\r\n        { key: \"email\", label: \"Email\" },\r\n        { key: \"updated_at\", label: \"Last Updated\", render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}},\r\n        { key: \"is_actived\", label: \"Is Actived\", render: (record, text)=>{\r\n            return text ? \"Y\":\"N\";\r\n        } }\r\n    ];\r\n\r\n    const GetData = () => {\r\n        let url = `members?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_members\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_members\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder=\"Search...\"\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/members/create\"\r\n                            >\r\n                                New\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/members/edit/${row.id}`}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Members;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nconst Claims = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"paid_by\", label: \"Paid By\" },\r\n        { key: \"paid_at\", label: \"Paid At\", render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD\");}},\r\n        { key: \"invoice_number\", label: \"Invoice Name\" },\r\n        { key: \"item_name\", label: \"Item Name\" },\r\n        { key: \"amount\", label: \"Amount\" },\r\n        { key: \"status\", label: \"Status\" },\r\n        { key: \"updated_at\", label: \"Last Updated\", render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        let url = `claims?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_claims\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_claims\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder=\"Search...\"\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/claims/create\"\r\n                            >\r\n                                New\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/claims/edit/${row.id}`}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Claims;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\nconst useStyles = makeStyles(theme => ({\r\n    tableContainer: {\r\n      paddingTop: \"10px\"\r\n    }\r\n}));\r\nconst Registrations = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"zh_surname\", label: \"Surame (ZH)\" },\r\n        { key: \"zh_first_name\", label: \"First Name (ZH)\" },\r\n        { key: \"en_surname\", label: \"Surame (EH)\" },\r\n        { key: \"en_first_name\", label: \"First Name (EN)\" },\r\n        { key: \"email\", label: \"Email\" },\r\n        { key: \"status\", label: \"Status\" },\r\n        { key: \"updated_at\", label: \"Last Updated\", render: (record, text)=>{\r\n            return moment(text).format(\"YYYY-MM-DD HH:mm\");\r\n        } }\r\n    ];\r\n\r\n    const GetData = () => {\r\n        let url = `registrations?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_registrations\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_registrations\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder=\"Search...\"\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/registrations/create\"\r\n                            >\r\n                                New\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/registrations/edit/${row.id}`}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Registrations;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nconst Transactions = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"account.bank\", label: \"Account\" },\r\n        { key: \"invoice_number\", label: \"Invoice Name\" },\r\n        { key: \"item_name\", label: \"Item Name\" },\r\n        { key: \"amount\", label: \"Amount\" },\r\n        // { key: \"remark\", label: \"Remark\" },\r\n        { key: \"updated_at\", label: \"Last Updated\", render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        let url = `transactions?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_transactions\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_transactions\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder=\"Search...\"\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/transactions/create\"\r\n                            >\r\n                                New\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/transactions/edit/${row.id}`}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Transactions;","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Select, MenuItem } from '@material-ui/core';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Loader from '../../components/Loader';\r\nimport Alert from '../../components/Alert';\r\n\r\nconst AccountSelector = (props) => {\r\n    const { name, value, onChange, required, className=\"\" } = props;\r\n    const [options, setOptions] = useState([]);\r\n\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 50\r\n    }); \r\n\r\n    const GetData = () => {\r\n        let url = `accounts?page=${paging.current}&size=${paging.pageSize}&order=bank&sort=asc`;\r\n        // if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                setOptions(result.data);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    const loadMoreItems = (e) => {\r\n        console.log(e);\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n\r\n    return(<Fragment>\r\n        <Select\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            className={className}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            MenuProps={{\r\n                onScroll:loadMoreItems\r\n            }}\r\n        >\r\n            <MenuItem value={null}></MenuItem>\r\n            {\r\n                options.map((option)=>{\r\n                    return (<MenuItem value={option.id}>{option.bank}</MenuItem>)\r\n                })\r\n            }\r\n        </Select>\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(AccountSelector);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nconst UserGroups = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"name\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"name\", label: \"User Group\" },\r\n        { key: \"updated_at\", label: \"Last Updated\", render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        let url = `user_groups?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_usergroups\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_usergroups\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder=\"Search...\"\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/usergroups/create\"\r\n                            >\r\n                                New\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/usergroups/edit/${row.id}`}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default UserGroups;","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Checkbox, Select, MenuItem } from '@material-ui/core';\r\nimport Loader from '../../components/Loader';\r\nimport Alert from '../../components/Alert';\r\n\r\nconst AccessRights = (props) => {\r\n    const { value, name, onChange } = props;\r\n    const [options, setOptions] = useState({});\r\n    const [selected, setSelected] = useState(value);\r\n\r\n    const isSelected = id => selected.indexOf(id) !== -1;\r\n\r\n    const GetData = () => {\r\n        let url = `accesses`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                setOptions(result.data);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    const handleOnChecked = (e) => {\r\n        let checked = e.target.checked;\r\n        let value = parseInt(e.target.value);\r\n        const selectedIndex = selected.indexOf(value);\r\n        let newSelected = [];\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, value);\r\n          } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n          } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n          } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n              selected.slice(0, selectedIndex),\r\n              selected.slice(selectedIndex + 1),\r\n            );\r\n          }\r\n          \r\n          onChange(name,newSelected);\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        setSelected(value);\r\n    },[value])\r\n\r\n    return(<Fragment>\r\n        {\r\n            _.reduce(options,(result,value,key)=>{\r\n                result.push(<Fragment>\r\n                        {\r\n                            _.reduce(value,(r,v,k)=>{\r\n                                r.push(<FormControl className=\"form-item\" component=\"fieldset\" \r\n                                        style={{\r\n                                            width: \"100%\",\r\n                                            marginBottom: \"15px\",\r\n                                            borderBottom: \"1px solid #efefef\"\r\n                                        }}\r\n                                    >\r\n                                        <label>{ key }</label>\r\n                                        <Grid container style={{\r\n                                            paddingLeft: \"15px\"\r\n                                        }}>\r\n                                            <Grid item sm={1} xs={1}>\r\n                                                <label style={{\r\n                                                    lineHeight: \"42px\"\r\n                                                }}>{ k }</label>\r\n                                            </Grid>\r\n                                            <Grid item sm={11} xs={11}>\r\n                                                <Grid container>\r\n                                                {\r\n                                                    v.map((row)=>{\r\n                                                        const isItemSelected = isSelected(row.id);\r\n                                                        return(<Grid item sm={3} xs={3}>\r\n                                                            <FormControlLabel\r\n                                                                control={\r\n                                                                    <Checkbox \r\n                                                                        checked={isItemSelected} \r\n                                                                        onChange={handleOnChecked} \r\n                                                                        value={row.id} \r\n                                                                    />\r\n                                                                }\r\n                                                                label={ row.displayname }\r\n                                                            />\r\n                                                        </Grid>)\r\n                                                    })\r\n                                                }\r\n                                                </Grid>\r\n                                            </Grid>    \r\n                                        </Grid>\r\n                                </FormControl>);\r\n                                return r;\r\n                            },[])\r\n                        }\r\n                   </Fragment>)\r\n                return result;\r\n            },[])\r\n        }\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(AccessRights);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nconst Users = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"user_name\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"user_group.name\", label: \"User Groups\" },\r\n        { key: \"zh_name\", label: \"Chinese Name\" },\r\n        { key: \"en_name\", label: \"English Name\" },\r\n        { key: \"user_name\", label: \"Username\" },\r\n        { key: \"updated_at\", label: \"Last Updated\", render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        let url = `users?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_users\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_users\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder=\"Search...\"\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/users/create\"\r\n                            >\r\n                                New\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/users/edit/${row.id}`}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Users;","global.Fetch = (url, myHeader = {}) => {\r\n    let defaultHeader = {\r\n        crossDomain:true,\r\n        method: \"GET\",\r\n        credentials: 'include',\r\n        headers: new Headers({\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\r\n        })\r\n    };\r\n    return fetch(`${process.env.REACT_APP_API_URL}${url}`,{\r\n        ...defaultHeader,\r\n        ...myHeader\r\n    }).then((response)=>{\r\n        if (!response.ok)\r\n            return response.json().then((res) => { return Promise.reject(res) });\r\n        return response.json();\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { Route, Redirect  } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst PublicRoute = props => {\r\n    return (<Route\r\n        {...props}\r\n    />);\r\n}\r\n\r\nexport default PublicRoute;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Home = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    useEffect(()=>{\r\n\r\n    },[])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_home\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            \r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport PrivateRoute from '../_PrivateRoute';\r\nimport PublicRoute from '../_PublicRoute';\r\n\r\n// Pages\r\nimport Accounts from '../../pages/Accounts';\r\nimport EditAccount from '../../pages/Accounts/Edit';\r\nimport Home from '../../pages/Home';\r\nimport Login from '../../pages/Login';\r\nimport Members from '../../pages/Members';\r\nimport EditMember from '../../pages/Members/Edit';\r\n\r\nimport Claims from '../../pages/Claims';\r\nimport EditClaims from '../../pages/Claims/Edit';\r\n\r\nimport Registrations from '../../pages/Registrations';\r\nimport EditRegistration from '../../pages/Registrations/Edit';\r\n\r\nimport Transactions from '../../pages/Transactions';\r\nimport EditTransition from '../../pages/Transactions/Edit';\r\n\r\nimport UserGroups from '../../pages/UserGroups';\r\nimport EditUserGroup from '../../pages/UserGroups/Edit';\r\n\r\nimport Users from '../../pages/Users';\r\nimport EditUser from '../../pages/Users/Edit';\r\nimport Profile from '../../pages/Users/Profile';\r\n\r\nconst Routes = props => {\r\n    return (<BrowserRouter>\r\n        <Route>\r\n            <Switch>\r\n                <PublicRoute exact path=\"/login\" component={Login} />\r\n\r\n                <PrivateRoute exact path=\"/\" component={Home} />\r\n                <PrivateRoute exact path=\"/accounts\" component={Accounts} />\r\n                <PrivateRoute exact path=\"/accounts/create\" component={EditAccount} />\r\n                <PrivateRoute exact path=\"/accounts/edit/:id\" component={EditAccount} />\r\n\r\n                <PrivateRoute exact path=\"/members\" component={Members} />\r\n                <PrivateRoute exact path=\"/members/create\" component={EditMember} />\r\n                <PrivateRoute exact path=\"/members/edit/:id\" component={EditMember} />\r\n\r\n                <PrivateRoute exact path=\"/profile\" component={Profile} />\r\n\r\n                <PrivateRoute exact path=\"/registrations\" component={Registrations} />\r\n                <PrivateRoute exact path=\"/registrations/create\" component={EditRegistration} />\r\n                <PrivateRoute exact path=\"/registrations/edit/:id\" component={EditRegistration} />\r\n\r\n                <PrivateRoute exact path=\"/claims\" component={Claims} />\r\n                <PrivateRoute exact path=\"/claims/create\" component={EditClaims} />\r\n                <PrivateRoute exact path=\"/claims/edit/:id\" component={EditClaims} />\r\n\r\n                <PrivateRoute exact path=\"/transactions\" component={Transactions} />\r\n                <PrivateRoute exact path=\"/transactions/create\" component={EditTransition} />\r\n                <PrivateRoute exact path=\"/transactions/edit/:id\" component={EditTransition} />\r\n\r\n                <PrivateRoute exact path=\"/usergroups\" component={UserGroups} />\r\n                <PrivateRoute exact path=\"/usergroups/create\" component={EditUserGroup} />\r\n                <PrivateRoute exact path=\"/usergroups/edit/:id\" component={EditUserGroup} />\r\n\r\n                <PrivateRoute exact path=\"/users\" component={Users} />\r\n                <PrivateRoute exact path=\"/users/create\" component={EditUser} />\r\n                <PrivateRoute exact path=\"/users/edit/:id\" component={EditUser} />\r\n                <PrivateRoute exact path=\"/profile\" component={Profile} />\r\n            </Switch>\r\n        </Route>   \r\n    </BrowserRouter>);\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport { withTranslation, Trans } from 'react-i18next';\nimport Routes from './containers/__Routes';\nimport './Global';\nimport Moment from 'moment';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './styles/theme.css';\nimport { ToastContainer, toast } from 'react-toastify';\nMoment.locale('en');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default withTranslation('translation')(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    lng: localStorage .getItem('user-language') || 'en',\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    react: {\r\n      useSuspense: false\r\n    },\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {I18nextProvider} from 'react-i18next';\nimport i18n from './i18n';\n\nReactDOM.render(<I18nextProvider i18n={i18n}><App /></I18nextProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Loader = (props) => {\r\n    return(<div className=\"Loader\">\r\n        <div className=\"lds-default\">\r\n            <div key=\"1\"></div>\r\n            <div key=\"2\"></div>\r\n            <div key=\"3\"></div>\r\n            <div key=\"4\"></div>\r\n            <div key=\"5\"></div>\r\n            <div key=\"6\"></div>\r\n            <div key=\"7\"></div>\r\n            <div key=\"8\"></div>\r\n            <div key=\"9\"></div>\r\n            <div key=\"10\"></div>\r\n            <div key=\"11\"></div>\r\n            <div key=\"12\"></div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Loader;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Breadcrumbs as MIBreadcrumbs } from '@material-ui/core';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyle = makeStyles({\r\n    crumbsBody: {\r\n        padding: \"20px 0\"\r\n    }\r\n})\r\n\r\nconst Breadcrumbs = (props) => {\r\n    const { items } = props;\r\n    const classes = useStyle();\r\n    return(\r\n        <MIBreadcrumbs \r\n            className={ `${classes.crumbsBody} breadcrumbs` }\r\n            separator={<NavigateNextIcon fontSize=\"small\" />} \r\n            aria-label=\"breadcrumb\">\r\n            {\r\n                items.map((item,index)=>{\r\n                    return(<Link color=\"inherit\" key={index} href={item.href === undefined ? \"#\" : item.href}>\r\n                    {item.label}\r\n                  </Link>);\r\n                })\r\n            }\r\n        </MIBreadcrumbs>\r\n    );\r\n}\r\n\r\nexport default Breadcrumbs;","import React, { useState, Component, Fragment, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Route, Redirect  } from 'react-router-dom';\r\nimport {\r\n    List, ListItem, ListItemText, Collapse, Grid, IconButton, Avatar \r\n} from '@material-ui/core';\r\nimport Cookies from 'universal-cookie';\r\nimport Loader from '../../components/Loader';\r\nimport {NavLink, Link} from 'react-router-dom';\r\nimport { \r\n    ViewComfy, ExpandMore, ExpandLess, BorderColor, AccountBalance, SwapHoriz, GroupWork,\r\n    PeopleAlt, LocalAtm, Settings, MeetingRoom, Receipt, AccountCircle\r\n} from '@material-ui/icons';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nconst cookies = new Cookies();\r\n\r\nconst SubSidbarNav = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const { t, i18n } = useTranslation();\r\n    const { name, child, id, icon } = props;\r\n    \r\n    \r\n    const onClick = (e) => {\r\n        setOpen(!open);\r\n    }\r\n    useEffect(()=>{\r\n        const { pathname } = window.location;\r\n        if (child.find(x => (x.link == pathname )))\r\n            setOpen(true);\r\n    },[])\r\n    return (<Fragment>\r\n        <ListItem className=\"menu-item link\" key={id} button onClick={onClick}>\r\n            <NavLink className=\"nav-item\" key={id} exact to=\"#\">\r\n                <span className=\"nav-icon\">{ icon }</span>\r\n                <span className=\"nav-label\">{ name }</span>\r\n            </NavLink>\r\n            <div className=\"expand-icon\">\r\n                {open ? <ExpandLess /> : <ExpandMore />}\r\n            </div>\r\n        </ListItem>\r\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n                {\r\n                    child.map((nav)=>{\r\n                        return(\r\n                            <ListItem className=\"menu-item link\" key={nav.id} button>\r\n                                <NavLink className=\"nav-item\" exact to={nav.link}>\r\n                                    <span className=\"nav-icon\">{ nav.icon }</span>\r\n                                    <span className=\"nav-label\">{ nav.name }</span>\r\n                                </NavLink>\r\n                            </ListItem>\r\n                        );\r\n                    })\r\n                }\r\n            </List>\r\n        </Collapse>\r\n    </Fragment>)\r\n}\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    \r\n    const [collapse, setCollapse] = useState(true);\r\n    const [loggedOut, setLoggedOut] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const user = cookies.get('mms_user');\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const navigations = [\r\n        { id: 1001, name: `${t(\"lb_home\")}`, link: \"/\", icon: (<HomeIcon />) },\r\n        { id: 1002, name: `${t(\"lb_registrations\")}`, link: \"/registrations\", icon: (<BorderColor />) },\r\n        { id: 1003, name: `${t(\"lb_members\")}`, link: \"/members\", icon: (<PeopleAlt />) },\r\n        { id: 1004, name: `${t(\"lb_finance\")}`, child: [\r\n            { id: 10041, name: `${t(\"lb_accounts\")}`, link: \"/accounts\", icon:(<AccountBalance />) },\r\n            { id: 10042, name: `${t(\"lb_transactions\")}`, link: \"/transactions\", icon:(<SwapHoriz />) },\r\n            { id: 10043, name: `${t(\"lb_claims\")}`, link: \"/claims\", icon:(<Receipt />) }\r\n        ], icon: (<LocalAtm />)}, \r\n        { id: 1005, name: `${t(\"lb_system\")}`,child:[\r\n            { id: 10051, name: `${t(\"lb_usergroups\")}`, link: \"/usergroups\", icon:(<GroupWork />) },\r\n            { id: 10052, name: `${t(\"lb_users\")}`, link: \"/users\", icon:(<AccountCircle />) }\r\n        ], icon: (<Settings />)}\r\n    ];\r\n\r\n    useEffect(()=>{\r\n        global.Fetch(\"auth\").then((result)=>{\r\n            \r\n        }).catch((err)=>{\r\n            cookies.remove(\"mms_user\");\r\n            setTimeout(()=>{setLoggedOut(true);},300)\r\n        })\r\n    },[])\r\n\r\n    const handleLogout = (e) =>{\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        global.Fetch(\"auth/logout\",{\r\n            method: \"POST\"\r\n        }).then((result)=>{\r\n            cookies.remove(\"mms_user\");\r\n            setTimeout(()=>{setLoggedOut(true);},300)\r\n        }).catch((err)=>{\r\n            cookies.remove(\"mms_user\");\r\n            setTimeout(()=>{setLoggedOut(true);},300)\r\n            setLoading(false);\r\n        })\r\n    }\r\n    \r\n    return (loggedOut ? \r\n        <Fragment>\r\n            <Redirect to={{pathname: \"/login\"}}/>\r\n            { loading && <Loader />}\r\n        </Fragment> : <Fragment>\r\n        <Grid className=\"main-container\">\r\n            <List \r\n                className={`main-menu ${collapse ? 'collapsed':''}`}\r\n                component=\"nav\"\r\n            >\r\n                <ListItem className=\"menu-item logo\">\r\n                    <IconButton\r\n                        className={ `menu-collapse` }\r\n                        onClick={(e)=>{\r\n                            setCollapse(!collapse);\r\n                        }}\r\n                    >\r\n                        <ViewComfy />\r\n                    </IconButton>\r\n                </ListItem>\r\n                <ListItem className=\"menu-item profile\">\r\n                    <NavLink className=\"nav-item\" exact to={`/profile`}>\r\n                        <Avatar className={`profile-pic`} alt={ `${ _.get(user,\"en_name\",\"\")}` } />\r\n                    </NavLink>\r\n                    <NavLink className=\"nav-item nav-label\" exact to={`/profile`}>\r\n                        <span>{ `${ _.get(user,\"en_name\",\"\")}` }</span>\r\n                    </NavLink>\r\n                </ListItem>\r\n            {\r\n                navigations.map((nav)=>{\r\n                    if (nav.child !== undefined) {\r\n                        return(<SubSidbarNav\r\n                            name={nav.name}\r\n                            id={nav.id}\r\n                            key={nav.id}\r\n                            icon={nav.icon}\r\n                            child={nav.child}\r\n                            collapse\r\n                        />)\r\n                    } else {\r\n                        return(\r\n                            <ListItem className=\"menu-item link\" key={nav.id} button>\r\n                                <NavLink className=\"nav-item\" exact to={nav.link}>\r\n                                    <span className=\"nav-icon\">{ nav.icon }</span>\r\n                                    <span className=\"nav-label\">{ nav.name }</span>\r\n                                </NavLink>\r\n                            </ListItem>\r\n                        );\r\n                    }\r\n                    \r\n                })\r\n            }\r\n                <ListItem className=\"menu-item link\" key=\"2000\" button>\r\n                    <NavLink className=\"nav-item\" exact to=\"#\" onClick={ handleLogout }>\r\n                        <span className=\"nav-icon\"><MeetingRoom /></span>\r\n                        <span className=\"nav-label\">{ t('lb_logout') }</span>\r\n                    </NavLink>\r\n                </ListItem>\r\n            </List>\r\n            <Grid className=\"main-content\">\r\n                <Route\r\n                    {...rest}\r\n                    render={ props => \r\n                        (user && !loggedOut) ? (<Component {...props} />) : (<Redirect to={{pathname: \"/login\"}}/>)\r\n                    }\r\n                />\r\n            </Grid>\r\n            <footer className=\"main-footer\">\r\n                <p className={`copy-right`}>© {moment().format(\"Y\")} Hervest InTeach All rights reserved</p>\r\n            </footer>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\n\r\nexport default PrivateRoute;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyle = makeStyles({\r\n\r\n});\r\nconst FormButtonGroup = (props) => {\r\n    const { onCancel, children } = props;\r\n\r\n    useEffect(()=>{\r\n\r\n    },[])\r\n\r\n    return(\r\n        <Fragment>\r\n            { children }\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"middle\"\r\n                type=\"submit\"\r\n                startIcon={<SaveIcon />}\r\n                style={{\r\n                    marginRight: \"15px\"\r\n                }}\r\n            >\r\n                Save\r\n            </Button>\r\n            { \r\n                onCancel !== undefined && <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"middle\"\r\n                    startIcon={<ArrowBackIcon />}\r\n                    onClick={ onCancel }\r\n                >\r\n                    Back\r\n                </Button>\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default FormButtonGroup;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, TableSortLabel } from '@material-ui/core';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport _ from 'lodash';\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n      minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n    },\r\n    container: {\r\n    },\r\n}));\r\nconst DataTableHead = props => {\r\n    const { columns, dataId, order, orderBy, onSort, onSelectAll, numSelected, rowCount, rowAction } = props;\r\n    const classes = useStyles();\r\n    const createSortHandler = (property, sort) => event => {\r\n        onSort(event, property, sort);\r\n      };\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAll}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {\r\n                    columns.map((col)=>{\r\n                        var columnOrder = orderBy === col.key ? order : \"asc\";\r\n                        return(<TableCell\r\n                            key={col.key}\r\n                            align={col.align ? col.align: 'left'}\r\n                            sortDirection={orderBy === col.key ? order : false}\r\n                        >\r\n                            <TableSortLabel\r\n                                active={orderBy === col.key}\r\n                                direction={columnOrder}\r\n                                onClick={createSortHandler(col.key, columnOrder ===\"desc\" ? \"asc\":\"desc\")}\r\n                                >\r\n                                {col.label}\r\n                                {orderBy === col.key ? (\r\n                                    <span className={classes.visuallyHidden}>\r\n                                        {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                    </span>\r\n                                ) : null}\r\n                            </TableSortLabel>\r\n                        </TableCell>)\r\n                    })\r\n                }\r\n                {\r\n                    rowAction !== undefined && <TableCell align=\"right\">Action</TableCell>\r\n                }\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nconst DataTable = props => {\r\n    const { columns, className, dataId, data, paging, rowAction, onChangePage, onChangeRowsPerPage, onChangeSort } = props;\r\n    const [selected, setSelected] = useState([]);\r\n    const classes = useStyles();\r\n    const isSelected = name => selected.indexOf(name) !== -1;\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n    \r\n        if (selectedIndex === -1) {\r\n          newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n          newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n          newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n          newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1),\r\n          );\r\n        }\r\n    \r\n        setSelected(newSelected);\r\n      };\r\n    const handleChangePage = (event, newPage) => {\r\n        // setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = event => {\r\n        // setRowsPerPage(parseInt(event.target.value, 10));\r\n        // setPage(0);\r\n    };\r\n    \r\n    return(<Fragment>\r\n        <TableContainer className={classes.container}>\r\n            <Table \r\n                className={`dataTable ${className === undefined ? '' : className}`}\r\n                aria-labelledby=\"tableTitle\"\r\n                stickyHeader \r\n            >\r\n                <DataTableHead\r\n                    {...props}\r\n                    order={ paging.order }\r\n                    orderBy={ paging.orderBy }\r\n                    numSelected={ selected.length }\r\n                    rowCount={ data.length }\r\n                    onSelectAll={(e)=>{\r\n\r\n                    }}\r\n                    onSort={onChangeSort}\r\n                />\r\n                <TableBody>\r\n                {\r\n                    data.map((row, index)=>{\r\n                        const isItemSelected = isSelected(_.get(row,dataId,''));\r\n                        const labelId = `enhanced-table-checkbox-${index}`;\r\n                        return(\r\n                            <TableRow\r\n                                hover\r\n                                onClick={event => handleClick(event, _.get(row,dataId,''))}\r\n                                role=\"checkbox\"\r\n                                tabIndex={-1}\r\n                                aria-checked={isItemSelected}\r\n                                key={row.name}\r\n                                selected={isItemSelected}\r\n                            >\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                    />\r\n                                </TableCell>\r\n                                {\r\n                                    columns.map((col)=>{\r\n                                        if (\r\n                                            col.render === undefined\r\n                                            || typeof col.render != \"function\"\r\n                                        ) {\r\n                                            return (\r\n                                                <TableCell>{ _.get(row,col.key,'') }</TableCell>\r\n                                            )\r\n                                        } else {\r\n                                            return(<TableCell>\r\n                                                { col.render(row, _.get(row,col.key,null))}\r\n                                            </TableCell>)\r\n                                        }\r\n                                        \r\n                                    })\r\n                                }\r\n                                {\r\n                                    rowAction !== undefined && <TableCell align=\"right\">{ rowAction(row) }</TableCell>\r\n                                }\r\n                            </TableRow>\r\n                        )\r\n                    })\r\n                }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={paging.total}\r\n          rowsPerPage={paging.pageSize}\r\n        //   SelectProps={paging.pageSize}\r\n          page={paging.current-1}\r\n          onChangePage={onChangePage}\r\n          onChangeRowsPerPage={onChangeRowsPerPage}\r\n        />\r\n    </Fragment>)\r\n}\r\nDataTable.prototype = {\r\n    rowAction: PropTypes.func,\r\n    columns: PropTypes.array.isRequired,\r\n    paging: PropTypes.object.isRequired,\r\n    dataId: PropTypes.string.isRequired,\r\n    onChangePage: PropTypes.func.isRequired,\r\n    onChangeRowsPerPage: PropTypes.func.isRequired,\r\n    onChangeSort: PropTypes.func.isRequired,\r\n    data: PropTypes.array\r\n}\r\nexport default DataTable;","import React, { useState, Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst SearchBox = props => {\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    const { onSearch, placeholder = \"Search...\" } = props;\r\n\r\n    const onSearchClick = (e) => {\r\n        onSearch(search);\r\n    }\r\n    return(<TextField\r\n        type='text'\r\n        onChange={(e)=>{ setSearch(e.target.value) }}\r\n        value={search}\r\n        variant=\"outlined\"\r\n        className=\"search-box\"\r\n        onKeyPress={(e)=>{\r\n          if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            onSearch(search);\r\n          }\r\n        }}\r\n        InputProps={{\r\n            className: \"form-input\",\r\n            startAdornment: (\r\n              <InputAdornment\r\n                onClick={onSearchClick}\r\n                position=\"start\">\r\n                    <SearchIcon/>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        placeholder={placeholder}\r\n    />);\r\n}\r\nSearchBox.propTypes = {\r\n    onSearch: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchBox;","import React, { useState, Fragment, useEffect, Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Modal , Paper, Backdrop, Fade } from '@material-ui/core'\r\nimport moment from 'moment';\r\nimport { FormHelperText } from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles({\r\n    hidden: {\r\n        display: \"none\"\r\n    },\r\n    preview: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    uploadContainer: {\r\n        height: \"150px\",\r\n        width: \"200px\",\r\n        position: \"relative\"\r\n    },\r\n    uploadButton: {\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    },\r\n    uploadPreviewContainer: {\r\n        height: \"150px\",\r\n        width: \"200px\",\r\n        zIndex: 1,\r\n        overflow: \"hidden\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\"\r\n    },\r\n    modalPreview: {\r\n        maxHeight: \"80vh\",\r\n        maxWidth: \"80vw\"\r\n    },\r\n    uploadRemove: {\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        right: \"0\",\r\n        transform: \"translate(50%, -50%)\"\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n})\r\nconst FileUpload = props => {\r\n\r\n    const [file, setFiles] = useState(null);\r\n    const { name, onChange, icon, deletedField, value } = props;\r\n\r\n    const [preview, setPreview] = useState(null);\r\n    const [fileKey, setFileKey] = useState(moment().format(\"YYYYMMDDHHmmss\"));\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyle();\r\n    useEffect(()=>{\r\n        setPreview(value);\r\n    },[value])\r\n    const handleChange = (e) => {\r\n        let value = e.target.files[0];\r\n        var reader = new FileReader();\r\n        var url = reader.readAsDataURL(value);\r\n        reader.onloadend = function (e) {\r\n            setPreview(reader.result)\r\n        }.bind(this);\r\n        console.log(\"on add\")\r\n        if (onChange !== undefined && typeof onChange == \"function\") \r\n        {\r\n            onChange(name,value);\r\n            if (deletedField !== undefined) setTimeout(()=>{onChange(deletedField,false);},100);\r\n        }\r\n    }\r\n\r\n    const handleRemove = (e) => {\r\n        setFiles(null);\r\n        setFileKey(moment().format(\"YYYYMMDDHHmmss\"));\r\n        setPreview(null);\r\n        console.log(\"on remove\")\r\n        if (onChange !== undefined && typeof onChange == \"function\") \r\n        {\r\n            onChange(name, null);\r\n            if (deletedField !== undefined) setTimeout(()=>{onChange(deletedField,true);},100);\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    \r\n    return(<Fragment>\r\n        <input\r\n            accept=\"image/*\"\r\n            id=\"icon-button-photo\"\r\n            onChange={handleChange}\r\n            type=\"file\"\r\n            key={fileKey}\r\n            className={classes.hidden}\r\n        />\r\n        <Paper className={classes.uploadContainer}>\r\n            {\r\n                preview ? <IconButton color=\"secondary\" className={classes.uploadRemove} component=\"span\" onClick={handleRemove}>\r\n                    <CancelIcon />\r\n                </IconButton> : <label htmlFor=\"icon-button-photo\" className={classes.uploadButton}>\r\n                    <IconButton color=\"primary\" component=\"span\">\r\n                        {icon === undefined ? <AddAPhotoIcon /> : <Component component={icon}/>}\r\n                    </IconButton>\r\n                </label>\r\n            }\r\n            {\r\n                preview && <Paper className={classes.uploadPreviewContainer}\r\n                    style={preview ? {\r\n                        backgroundImage: `url(${preview})`\r\n                    } : {}}\r\n                    onClick={(e)=>{\r\n                        setOpen(true);\r\n                    }}\r\n                >\r\n                    \r\n                </Paper>\r\n            }\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                onBackdropClick={handleClose}\r\n                closeAfterTransition\r\n                className={classes.modal}\r\n                BackdropComponent={Backdrop}\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n            >\r\n                <Fade in={open}>\r\n                    <img src={preview} className={classes.modalPreview}/>\r\n                </Fade>\r\n            </Modal>\r\n        </Paper>\r\n    </Fragment>);\r\n}\r\n\r\nexport default FileUpload;","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { Grid, FormLabel } from '@material-ui/core';\r\n\r\n\r\nconst FormItemContainer = (props) => {\r\n    const { children, label=\"\", required = false, large=false, fullWidth=false } = props;\r\n\r\n    return(<Grid container className={`form-item-container`}>\r\n        {\r\n            !fullWidth && <Grid item xs={large ? 3: 6}>\r\n                <FormLabel className={`form-label ${required ? 'required' : \"\"}`}>{ label }</FormLabel>\r\n            </Grid>\r\n        }\r\n        <Grid item xs={large ? 9 : 6}>\r\n            { children }\r\n        </Grid>\r\n    </Grid>);\r\n}\r\n\r\nexport default FormItemContainer;"],"sourceRoot":""}