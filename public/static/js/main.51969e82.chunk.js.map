{"version":3,"sources":["components/UserGroupSelector/index.js","pages/Accounts/Edit.js","pages/Members/Edit.js","pages/Claims/Edit.js","pages/Registrations/Edit.js","pages/Transactions/Edit.js","pages/UserGroups/Edit.js","pages/Users/Edit.js","pages/Users/Profile.js","lib/useWindowSize.js","pages/Accounts/index.js","pages/Login/index.js","pages/Members/index.js","pages/Claims/index.js","pages/Registrations/index.js","pages/Transactions/index.js","components/AccountSelector/index.js","pages/UserGroups/index.js","components/AccessRights/index.js","pages/Users/index.js","pages/Configs/index.js","pages/Configs/Edit.js","components/Loader/index.js","Global.js","containers/_PublicRoute/index.js","pages/Home/index.js","containers/__Routes/index.js","App.js","serviceWorker.js","i18n.js","index.js","components/Breadcrumbs/index.js","containers/_PrivateRoute/index.js","components/FormButtonGroup/index.js","components/DataTable/index.js","components/SearchBox/index.js","components/FormItemContainer/index.js","components/FileUpload/index.js"],"names":["withTranslation","props","name","value","onChange","required","className","useState","options","setOptions","current","pageSize","paging","useEffect","url","global","Fetch","then","result","data","catch","err","console","log","GetData","variant","fullWidth","MenuProps","onScroll","e","map","option","id","EditAccount","content","state","setState","prevState","handleOnChecked","target","checked","handleOnChange","validations","values","t","i18n","errors","bank","OnSave","match","params","_","isEmpty","FormData","reduce","r","v","k","append","undefined","method","credentials","headers","Headers","body","Promise","reject","message","handleOnSubmit","preventDefault","loading","_this","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","onClose","window","location","href","error","get","bank_no","remark","is_default","status","bind","this","allowSave","Accessible","process","items","label","onSubmit","container","style","marginTop","item","md","xs","spacing","type","helperText","inputProps","multiline","component","control","sm","textAlign","onCancel","Component","EditMember","handleOnDateChange","handleOnUpload","zh_surname","zh_first_name","en_surname","en_first_name","email","hkid","dob","moment","paid_at","isValid","home_address","mobile","gender","comnpany","job_title","office_address","employment_terms","password","password_confirmation","d","isMoment","format","member_ref","yob","department","office_phone","emergency_contact","emergency_relation","emergency_number","profile","profile_file","subscription","sent_group_invite","delete_profile","is_actived","utils","MomentUtils","aria-label","row","color","labelPlacement","placeholder","openTo","views","inputVariant","maxDate","Date","InputAdornmentProps","deletedField","rows","readOnly","sent_confirmation","EditClaims","invoice_number","item_name","item_type","provider","paid_by","amount","handleOnCancel","handleOnReject","handleOnApprove","approved_at","approved_by","Object","keys","length","handleOnHandle","handled_at","handled_by","transaction_date","payment_method","description","receipt","receipt_file","delete_receipt","is_approved","is_handled","parseFloat","payment_methods","p","step","min","disabled","onClick","size","marginRight","EditRegistration","proof","proof_file","declare","agreement","paid","handleOnWithdraw","delete_proof","receipt_no","sent_payment_note","sent_receipt","allowWithdraw","allowCancel","allowApprove","large","EditTransition","account_id","account","EditUserGroup","access_rights","parseInt","EditUser","zh_name","en_name","user_group_id","user_name","Profile","useWindowSize","isClient","getSize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener","useTranslation","setData","filter","setFilter","setLoading","order","orderBy","total","setPaging","columns","key","render","text","record","newPaging","count","onSearch","startIcon","dataId","onChangePage","event","newPage","onChangeRowsPerPage","newSize","onChangeSort","property","sort","rowAction","cookies","Cookies","useStyle","makeStyles","title","formInput","marginBottom","loginBtn","loginArea","backgroundImage","backgroundRepeat","backgroundSize","minHeight","overflow","display","alignItems","loginWrapper","background","margin","padding","borderRadius","Login","username","setUsername","setPassword","errMsg","setErrMsg","errUserName","setErrUserName","errPass","setErrPass","showpass","setShowPass","logged","setLogged","classes","to","pathname","remove","path","domain","hostname","JSON","stringify","set","InputLabelProps","shrink","InputProps","endAdornment","theme","tableContainer","paddingTop","allowSort","selected","setSelected","selectedIndex","indexOf","newSelected","concat","slice","push","borderBottom","paddingLeft","lineHeight","isItemSelected","displayname","EditConfig","display_name","Loader","myHeader","defaultHeader","crossDomain","fetch","response","ok","json","res","code","user","some","el","includes","PublicRoute","Home","Grid","Routes","exact","Accounts","Members","Registrations","Claims","Transactions","UserGroups","Users","Configs","EditConfigs","Moment","locale","Boolean","use","Backend","LanguageDetector","initReactI18next","init","lng","localStorage","getItem","fallbackLng","debug","react","useSuspense","interpolation","escapeValue","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","crumbsBody","Breadcrumbs","separator","fontSize","index","LoggedIn","isLoggedIn","SubSidbarNav","open","setOpen","child","icon","find","x","link","button","in","timeout","unmountOnExit","disablePadding","accessible","nav","PrivateRoute","rest","collapse","setCollapse","loggedOut","setLoggedOut","winSize","navigations","alt","setTimeout","FormButtonGroup","children","useStyles","root","paper","table","minWidth","visuallyHidden","border","clip","top","DataTableHead","onSort","onSelectAll","numSelected","rowCount","indeterminate","col","columnOrder","align","sortDirection","active","direction","i18nKey","DataTable","aria-labelledby","stickyHeader","labelId","hover","handleClick","role","tabIndex","aria-checked","rowsPerPageOptions","rowsPerPage","page","prototype","PropTypes","func","array","isRequired","object","string","SearchBox","search","setSearch","onKeyPress","startAdornment","FormItemContainer","hidden","preview","uploadContainer","uploadButton","left","transform","uploadPreviewContainer","zIndex","modalPreview","maxHeight","maxWidth","uploadRemove","right","modal","justifyContent","FileUpload","setFiles","setPreview","fileKey","setFileKey","handleClose","accept","files","reader","FileReader","readAsDataURL","onloadend","htmlFor","onBackdropClick","closeAfterTransition","BackdropComponent","Backdrop","aria-describedby","src"],"mappings":"uPAuDeA,gBAAgB,cAAhBA,EA/CW,SAACC,GAAW,IAC1BC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,MAAOC,EAAqCH,EAArCG,SADY,GACyBH,EAA3BI,SAA2BJ,EAAjBK,kBADR,MACkB,GADlB,IAEHC,mBAAS,IAFN,mBAE1BC,EAF0B,KAEjBC,EAFiB,OAILF,mBAAS,CACjCG,QAAS,EACTC,SAAU,KANmB,mBAI1BC,EAJ0B,UA0BjC,OAJAC,qBAAU,YAbM,WACZ,IAAIC,EAAG,2BAAuBF,EAAOF,QAA9B,iBAA8CE,EAAOD,SAArD,wBAEPI,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACHT,EAAWS,EAAOC,SACnBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAOpBG,KACF,IAEK,kBAAC,WAAD,KACH,kBAAC,IAAD,CACIC,QAAQ,WACRC,WAAS,EACTpB,UAAWA,EACXJ,KAAMA,EACNC,MAAOA,EACPC,SAAUA,EACVuB,UAAW,CACPC,SAhBU,SAACC,GACnBP,QAAQC,IAAIM,MAkBR,kBAAC,IAAD,CAAU1B,MAAO,OAEbK,EAAQsB,KAAI,SAACC,GACT,OAAQ,kBAAC,IAAD,CAAU5B,MAAO4B,EAAOC,IAAKD,EAAO7B,gB,2SCnC1D+B,E,YACF,WAAYhC,GAAQ,IAAD,8BACf,4CAAMA,KAgDVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IA/DE,EAmEnBI,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KArEJ,EAwEnBsC,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IA5EJ,EA8EnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAOb,OANKH,EAAOI,OAAMD,EAAOC,KAAOH,EAAE,yBAElC,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GA1FQ,EA4FnBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAWjB,OAVA/B,QAAQC,IAAIW,GACZiB,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACV,MAALD,GAGQrC,EAAKuC,OAAOD,EAAED,KAI5B,IACKzC,EAAOC,MAAP,uBAA+B2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CACxE4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IAnBV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBAnGtB,EA0HnBC,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,yBAAyCnD,SAGlDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAhKzB,EAAKnC,MAAQ,CACTD,QAAS,CACLa,KAAK,GACLuC,QAAQ,GACRC,OAAQ,GACRC,YAAY,GAEhB1C,OAAO,GACPwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK7B,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAKjD,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBAhBP,E,iFAmBC,IAAD,OAEP1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,mBAAyBgB,IACpBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GAIzB,OAFaF,EAAEE,GAAGD,EAEXD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BA8HnB,IAAD,EACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IAEJ4D,GAAY,EAOhB,OALIA,OADOjC,IAAP3B,EACYjB,EAAO8E,WAAW,gBAElB9E,EAAO8E,WAAW,eAG1B,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYjD,EAAE,eAAd,cAAkCkD,kCAEtC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,eAAgBuC,KAAK,aAC/B,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,kBAAuB,wBAG7D,0BAAMiE,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM8B,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,cAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,OACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,OAAO,IAC7B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,OAAO,IACjCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,UACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,UAAU,IACpC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnC8D,WAAS,EACTD,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CAAatC,UAAU,YAAYuG,UAAU,YACzC,kBAAC,IAAD,CACIC,QACI,kBAAC,IAAD,CACItE,QAASN,EAAQsD,WACjBpF,SAAUuF,KAAKrD,gBAAgB,mBAK/C,kBAAC,IAAD,CAAgBhC,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,aAAa,SAK9E,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMoD,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,GAAIR,GAAI,GAAIJ,MAAO,CAACa,UAAU,UACzC,kBAAC,IAAD,CACIpB,UAAYA,EACZqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,qBAajDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GAzSZ4C,aA8SXlH,gBAAgB,cAAhBA,CAA+BiC,K,qXCrSxCkF,E,YACF,WAAYlH,GAAQ,IAAD,8BACf,4CAAMA,KA8EVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAGXZ,QAAQC,IAAIW,GACY,oBAAb9B,GACPA,EAAS8B,IA7FE,EAiGnBO,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IArGJ,EAwGnBmC,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KA1GJ,EA6GnBiH,mBAAqB,SAAClH,GAAD,OAAU,SAACC,GAC5B,EAAKC,SAASF,EAAKC,KA9GJ,EAiHnBkH,eAAiB,SAACnH,EAAKC,GACnB,EAAKC,SAASF,EAAKC,IAlHJ,EAqHnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GA+Bb,OA9BKH,EAAO2E,aAAYxE,EAAOwE,WAAa1E,EAAE,yBACzCD,EAAO4E,gBAAezE,EAAOyE,cAAgB3E,EAAE,yBAC/CD,EAAO6E,aAAY1E,EAAO0E,WAAa5E,EAAE,yBACzCD,EAAO8E,gBAAe3E,EAAO2E,cAAgB7E,EAAE,yBAC/CD,EAAO+E,QAAO5E,EAAO4E,MAAQ9E,EAAE,yBAC/BD,EAAOgF,OAAM7E,EAAO6E,KAAO/E,EAAE,yBAC7BD,EAAOiF,IAEHC,IAAOlF,EAAOmF,SAASC,YAC5BjF,EAAO8E,IAAMhF,EAAE,wBAFfE,EAAO8E,IAAMhF,EAAE,wBAIdD,EAAOqF,eAAclF,EAAOkF,aAAepF,EAAE,yBAC7CD,EAAOsF,SAAQnF,EAAOmF,OAASrF,EAAE,yBACjCD,EAAOuF,SAAQpF,EAAOoF,OAAStF,EAAE,yBACjCD,EAAOwF,WAAUrF,EAAOqF,SAAWvF,EAAE,yBACrCD,EAAOyF,YAAWtF,EAAOsF,UAAYxF,EAAE,yBACvCD,EAAO0F,iBAAgBvF,EAAOuF,eAAiBzF,EAAE,yBACjDD,EAAO2F,mBAAkBxF,EAAOwF,iBAAmB1F,EAAE,yBAEtDD,EAAO4F,WACF5F,EAAO6F,sBAED7F,EAAO4F,UAAY5F,EAAO6F,wBACjC1F,EAAO0F,sBAAwB5F,EAAE,0CAFjCE,EAAO0F,sBAAwB5F,EAAE,yBAKzC,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GAzJQ,EA2JnBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAqBjB,OApBA/B,QAAQC,IAAIW,GACZiB,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACnB,GAAS,MAALD,EACA,OAAOC,GACH,IAAK,MACD,IAAIgF,EAAIZ,IAAOa,SAASlF,GAAKA,EAAIqE,IAAOrE,GACxCrC,EAAKuC,OAAOD,EAAEgF,EAAEE,OAAO,eACvBxH,EAAKuC,OAAO,MAAM+E,EAAEE,OAAO,SAC3B,MACJ,IAAK,eACDxH,EAAKuC,OAAO,UAAUF,GACtB,MACJ,IAAK,UACD,MACJ,QACIrC,EAAKuC,OAAOD,EAAED,MAI5B,IACKzC,EAAOC,MAAP,sBAA8B2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CACvE4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IA7BV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBAlKtB,EAmMnBC,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,wBAAwCnD,SAGjDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAzOzB,EAAKnC,MAAQ,CACTD,QAAS,CACLoF,WAAW,GACXE,WAAW,GACXD,cAAc,GACdE,cAAc,GACdmB,WAAY,GACZjB,KAAK,GACLkB,IAAI,GACJjB,IAAK,KACLF,MAAM,GACNM,aAAa,GACbc,WAAY,GACZb,OAAO,GACPC,OAAO,GACPC,SAAS,GACTC,UAAU,GACVC,eAAe,GACfU,aAAc,GACdT,iBAAiB,GACjBU,kBAAmB,GACnBC,mBAAoB,GACpBC,iBAAkB,GAClBC,QAAS,GACTC,aAAc,KACdC,cAAa,EACbC,mBAAmB,EACnBf,SAAU,KACVC,sBAAuB,KACvBjD,OAAQ,GACRgE,gBAAgB,EAChBC,YAAW,GAEf1G,OAAQ,GACRwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK1B,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKpD,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBA5CP,E,iFA+CC,IAAD,OAEP1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,kBAAwBgB,IACnBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GACzB,OAAOA,GACH,IAAK,UAAWF,EAAEE,GAAKN,IAAEkC,IAAI7B,EAAE,WAAW,IAAK,MAC/C,IAAK,MAAOD,EAAEE,GAAKoE,IAAOrE,GAAI,MAC9B,QAASD,EAAEE,GAAGD,EAElB,OAAOD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BAyKnB,IAAD,IACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IAEJ4D,GAAY,EAOhB,OALIA,OADOjC,IAAP3B,EACYjB,EAAO8E,WAAW,eAElB9E,EAAO8E,WAAW,cAG1B,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYjD,EAAE,cAAd,cAAiCkD,kCAErC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,cAAeuC,KAAK,YAC9B,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,iBAAsB,uBAG5D,0BAAMiE,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,CAAyBqF,MAAOC,KAC5B,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMxD,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOwE,WACdnH,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,uBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,gBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOyE,cACdpH,MAAQgD,IAAEkC,IAAInD,EAAQ,gBAAgB,IACtC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,gBAAgB,IAC1CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO0E,WACdrH,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,uBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,gBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO2E,cACdtH,MAAQgD,IAAEkC,IAAInD,EAAQ,gBAAgB,IACtC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,gBAAgB,IAC1CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,eAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,QACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO4E,MACdvH,MAAQgD,IAAEkC,IAAInD,EAAQ,QAAQ,IAC9B9B,SAAUuF,KAAKlD,eACfgE,KAAK,QACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,QAAQ,IAClCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOmF,OACd9H,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,QACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,sBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,eACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOkF,aACd7H,MAAQgD,IAAEkC,IAAInD,EAAQ,eAAe,IACrC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,eAAe,IACzCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CAAY+G,aAAW,SAASzJ,KAAK,SACjCC,MAAOgD,IAAEkC,IAAInD,EAAQ,SAAU,MAC/B9B,SAAUuF,KAAKlD,eACf2C,MAAOtC,EAAOoF,OACd0B,KAAG,GAEH,kBAAC,IAAD,CACIzJ,MAAM,IACN2G,QAAS,kBAAC,IAAD,CAAO+C,MAAM,YACtB7D,MAAQpD,EAAE,gBACVkH,eAAe,MACf1E,MAAOtC,EAAOoF,SAElB,kBAAC,IAAD,CACI/H,MAAM,IACN2G,QAAS,kBAAC,IAAD,CAAO+C,MAAM,YACtB7D,MAAQpD,EAAE,cACVkH,eAAe,MACf1E,MAAOtC,EAAOoF,SAElB,kBAAC,IAAD,CACI/H,MAAM,IACN2G,QAAS,kBAAC,IAAD,CAAO+C,MAAM,YACtB7D,MAAQpD,EAAE,eACVkH,eAAe,MACf1E,MAAOtC,EAAOoF,UAGtB,kBAAC,IAAD,CAAgB5H,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,SAAS,OAGlE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,aAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,MAAO,MAC5B6H,YAAY,GACZ1J,UAAQ,EACR2J,OAAO,OACPC,MAAO,CAAC,OAAQ,SAChBC,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,OACnC+C,QAAS,IAAIC,KACbzB,OAAO,aACPvD,MAAOtC,EAAO8E,IACdyC,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACRrG,UAAU,2BAGlB,kBAAC,IAAD,CAAgBA,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,MAAM,OAG/D,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,cAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,OACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO6E,KACdxH,MAAQgD,IAAEkC,IAAInD,EAAQ,OAAO,IAC7B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,OAAO,IACjCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,2BAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,oBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOkG,kBACd7I,MAAQgD,IAAEkC,IAAInD,EAAQ,oBAAoB,IAC1C9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,oBAAoB,IAC9C6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,4BAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,qBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOmG,mBACd9I,MAAQgD,IAAEkC,IAAInD,EAAQ,qBAAqB,IAC3C9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,qBAAqB,IAC/C6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,0BAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,mBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOoG,iBACd/I,MAAQgD,IAAEkC,IAAInD,EAAQ,mBAAmB,IACzC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,mBAAmB,IAC7C6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,kBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,WACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOqF,SACdhI,MAAQgD,IAAEkC,IAAInD,EAAQ,WAAW,IACjC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,WAAW,IACrCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,iBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOuF,eACdlI,MAAQgD,IAAEkC,IAAInD,EAAQ,iBAAiB,IACvC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,iBAAiB,IAC3CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAClC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLrB,MAAOtC,EAAOsF,UACd1B,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,0BAAR,MAEL,kBAAC,IAAD,CACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,mBAAmB,IACzChC,KAAK,mBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOwF,iBACdlI,SAAUuF,KAAKlD,eACfkE,WAAY,CACRrG,UAAU,eAGd,kBAAC,IAAD,CAAUH,MAAM,aAAhB,0BACA,kBAAC,IAAD,CAAUA,MAAM,oBAAhB,8CACA,kBAAC,IAAD,CAAUA,MAAM,iBAAhB,8BACA,kBAAC,IAAD,CAAUA,MAAM,8BAAhB,yEACA,kBAAC,IAAD,CAAUA,MAAM,kBAAhB,kBACA,kBAAC,IAAD,CAAUA,MAAM,iBAAhB,oCACA,kBAAC,IAAD,CAAUA,MAAM,aAAhB,2BAEJ,kBAAC,IAAD,CAAgBG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,iBAAiB,OAG1E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,sBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,eACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOiG,aACd5I,MAAQgD,IAAEkC,IAAInD,EAAQ,eAAe,IACrC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,eAAe,IACzC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,KAAD,GACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOiG,aACf5I,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACfgE,KAAK,QAPT,sBAQW3D,EAAOgG,YARlB,2BASgB3F,IAAEkC,IAAIvC,EAAQ,aAAa,KAT3C,2BAUgB,CACRxC,UAAU,eAXlB,MAgBR,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,IACnC,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CAEIR,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAK0B,eACfnH,KAAK,eACLkF,MAAOtC,EAAOsG,aACdkB,aAAa,mBAEjB,kBAAC,IAAD,CAAgBhK,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,eAAe,OAGxE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLrB,MAAOtC,EAAOyC,OACdmB,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnC8D,WAAS,EACTD,WAAY,CACRrG,UAAU,aACViK,KAAM,SAKtB,kBAAC,IAAD,CAAMlE,MAAI,EAACC,GAAI,GAAIC,GAAI,IAAI,8BAC3B,kBAAC,IAAD,CAAMF,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLrB,MAAOtC,EAAO8F,WACdlC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvC6D,WAAY,CACRrG,UAAU,aACVkK,UAAU,OAK1B,kBAAC,IAAD,CAAMnE,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACIJ,QAASN,EAAQsH,WACjBpJ,SAAUuF,KAAKrD,gBAAgB,cAC/BpC,KAAK,aACLkF,MAAOtC,EAAO0G,WACd7C,WAAY,CAAE,aAAc,sBAEhC,kBAAC,IAAD,CAAgBrG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,aAAa,OAGtE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,kBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,WACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,WAAW,IACjC9B,SAAUuF,KAAKlD,eACfgE,KAAK,WACLrB,MAAOtC,EAAOyF,SACd7B,WAAYvD,IAAEkC,IAAIvC,EAAQ,WAAW,IACrC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,SAAU6B,EAAQqG,SAClBvC,MAAK,UAAMpD,EAAE,+BAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,wBACLuB,QAAQ,WACRC,WAAS,EACTrB,SAAU6B,EAAQqG,SAClBpI,MAAQgD,IAAEkC,IAAInD,EAAQ,wBAAwB,IAC9C9B,SAAUuF,KAAKlD,eACfgE,KAAK,WACLrB,MAAOtC,EAAO0F,sBACd9B,WAAYvD,IAAEkC,IAAIvC,EAAQ,wBAAwB,IAClD6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,sBAAR,MAEL,kBAAC,IAAD,CACIJ,QAASN,EAAQuI,kBACjBrK,SAAUuF,KAAKrD,gBAAgB,gBAC/BpC,KAAK,eACLkF,MAAOtC,EAAOuG,aACd1C,WAAY,CAAE,aAAc,sBAEhC,kBAAC,IAAD,CAAgBrG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,eAAe,OAGxE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,2BAAR,MAEL,kBAAC,IAAD,CACIJ,QAASN,EAAQuI,kBACjBrK,SAAUuF,KAAKrD,gBAAgB,qBAC/BpC,KAAK,oBACLkF,MAAOtC,EAAOwG,kBACd3C,WAAY,CAAE,aAAc,sBAEhC,kBAAC,IAAD,CAAgBrG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,oBAAoB,SAKrF,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMoD,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,GAAIR,GAAI,GAAIJ,MAAO,CAACa,UAAU,UACzC,kBAAC,IAAD,CACIpB,UAAWA,EACXqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,qBAcrDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GAt1Bb4C,aA21BVlH,gBAAgB,cAAhBA,CAA+BmH,K,2VC51BxCuD,E,YACF,WAAYzK,GAAQ,IAAD,8BACf,4CAAMA,KAwEVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IAvFE,EA2FnBO,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IA/FJ,EAkGnBmC,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KApGJ,EAuGnBiH,mBAAqB,SAAClH,GAAD,OAAU,SAACC,GAC5B,EAAKC,SAASF,EAAKC,KAxGJ,EA2GnBkH,eAAiB,SAACnH,EAAKC,GACnB,EAAKC,SAASF,EAAKC,IA5GJ,EA+GnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAab,OAZKH,EAAOgI,iBAAgB7H,EAAO6H,eAAiB/H,EAAE,yBACjDD,EAAOiI,YAAW9H,EAAO8H,UAAYhI,EAAE,yBACvCD,EAAOkI,YAAW/H,EAAO+H,UAAYjI,EAAE,yBACvCD,EAAOmI,WAAUhI,EAAOgI,SAAWlI,EAAE,yBACrCD,EAAOoI,UAASjI,EAAOiI,QAAUnI,EAAE,yBACnCD,EAAOmF,UAAShF,EAAOgF,QAAUlF,EAAE,yBACnB,IAAjBD,EAAOqI,SAAclI,EAAOkI,OAASpI,EAAE,yBAE3C,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GAjIQ,EAoInBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAoBjB,OAnBA/B,QAAQC,IAAIW,GACZiB,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACnB,GAAS,MAALD,EACA,OAAOC,GACH,IAAK,UACD,IAAIgF,EAAIZ,IAAOa,SAASlF,GAAKA,EAAIqE,IAAOrE,GACxCrC,EAAKuC,OAAOD,EAAEgF,EAAEE,OAAO,eACvB,MACJ,IAAK,eACDxH,EAAKuC,OAAO,UAAUF,GACtB,MACJ,IAAK,UACD,MACJ,QACIrC,EAAKuC,OAAOD,EAAED,MAI5B,IACKzC,EAAOC,MAAP,qBAA6B2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CACtE4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IA5BV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBA3ItB,EA4KnB8G,eAAiB,SAACpJ,GACdA,EAAEwC,iBADkB,IAGZrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHY,EAIA,EAAK/B,MAAjB2C,EAJY,EAIZA,EACF2B,GALc,EAIT1B,KACA,gBACX,EAAKT,SAAS,CACVkC,SAAS,EACTH,QAAS,GACTsB,OAAO,KAEX,EAAKzC,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,wBAA8BgB,GAAM,CACvC4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,qBAAsB,CAClC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,uBAAuCnD,SAGhDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAhOV,EAuOnB4G,eAAiB,SAACrJ,GACdA,EAAEwC,iBADkB,IAGZrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHY,EAIA,EAAK/B,MAAjB2C,EAJY,EAIZA,EACF2B,GALc,EAIT1B,KACA,gBACX,EAAKT,SAAS,CACVkC,SAAS,EACTH,QAAS,GACTsB,OAAO,KAEX,EAAKzC,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,wBAA8BgB,GAAM,CACvC4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,oBAAqB,CACjC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,uBAAuCnD,SAGhDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WA3RV,EAkSnB6G,gBAAkB,SAACtJ,GACfA,EAAEwC,iBADmB,IAGbrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHa,EAID,EAAK/B,MAAjB2C,EAJa,EAIbA,EACF2B,GALe,EAIV1B,KACA,gBAGJX,EAAW,EAAKC,MAAhBD,QACP,EAAKE,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GASb,GAPKZ,EAAQkJ,cAAatI,EAAOsI,YAAcxI,EAAE,yBAC5CV,EAAQmJ,cAAavI,EAAOuI,YAAczI,EAAE,yBAEjD,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAEZwI,OAAOC,KAAKzI,GAAQ0I,OAAS,EAc7B,OAbAhH,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,QAId,EAGX,EAAKlC,SAAS,CACVkC,SAAS,EACTH,QAAS,GACTsB,OAAO,KAIX,EAAKzC,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,yBAA+BgB,GAAM,CACxC4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,oBAAqB,CACjC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,uBAAuCnD,SAGhDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAxXV,EA8XnBmH,eAAiB,SAAC5J,GACdA,EAAEwC,iBADkB,IAGZrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHY,EAIA,EAAK/B,MAAjB2C,EAJY,EAIZA,EACF2B,GALc,EAIT1B,KACA,gBAGJX,EAAW,EAAKC,MAAhBD,QACP,EAAKE,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAUb,GARKZ,EAAQwJ,aAAY5I,EAAO4I,WAAa9I,EAAE,yBAC1CV,EAAQyJ,aAAY7I,EAAO6I,WAAa/I,EAAE,yBAC1CV,EAAQ0J,mBAAkB9I,EAAO8I,iBAAmBhJ,EAAE,yBAE3D,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAEZwI,OAAOC,KAAKzI,GAAQ0I,OAAS,EAc7B,OAbAhH,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,QAId,EAGX,EAAKlC,SAAS,CACVkC,SAAS,EACTH,QAAS,GACTsB,OAAO,KAIX,EAAKzC,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,wBAA8BgB,GAAM,CACvC4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,mBAAoB,CAChC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,uBAAuCnD,SAGhDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WArdV,EA2dnBF,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,uBAAuCnD,SAGhDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAjgBzB,EAAKnC,MAAQ,CACTD,QAAS,CACLyI,eAAgB,GAChBC,UAAW,GACXC,UAAW,GACXC,SAAU,GACVe,eAAgB,GAChBC,YAAa,GACbf,QAAS,GACTjD,QAASD,MACTwD,YAAa,GACbD,YAAa,KACbO,WAAY,GACZD,WAAY,KACZK,QAAS,KACTH,iBAAkB,KAClBI,aAAc,KACdC,gBAAgB,EAChBjB,OAAQ,EACRvF,OAAQ,MACRyG,aAAa,EACbC,YAAY,GAEhBrJ,OAAO,GACPwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK1B,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKpD,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAKyF,gBAAkB,EAAKA,gBAAgBzF,KAArB,gBACvB,EAAK+F,eAAiB,EAAKA,eAAe/F,KAApB,gBACtB,EAAKwF,eAAiB,EAAKA,eAAexF,KAApB,gBACtB,EAAKuF,eAAiB,EAAKA,eAAevF,KAApB,gBACtB,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBArCP,E,iFAwCC,IAAD,OAEP1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,iBAAuBgB,IAClBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GACzB,OAAOA,GACH,IAAK,UAAWF,EAAEE,GAAKoE,IAAOrE,GAAI,MAClC,IAAK,UAAWD,EAAEE,GAAKN,IAAEkC,IAAI7B,EAAE,WAAW,IAAK,MAC/C,IAAK,SAAUD,EAAEE,GAAK2I,WAAW5I,GAAI,MACrC,QAASD,EAAEE,GAAGD,EAElB,OAAOD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BAucnB,IAAD,IACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IAEJ4D,GAAY,EAOhB,OALIA,OADOjC,IAAP3B,EACYjB,EAAO8E,WAAW,cAElB9E,EAAO8E,WAAW,aAG1B,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYjD,EAAE,aAAd,cAAgCkD,kCAEpC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,aAAcuC,KAAK,WAC7B,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,gBAAqB,sBAG3D,0BAAMiE,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,CAAyBqF,MAAOC,KAC5B,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMxD,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,iBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAA6C,IAAtCjC,IAAEkC,IAAIvC,EAAQ,iBAAiB,IACtC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,iBAAiB,IACvC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,iBAAiB,IAC3CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,kBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,WACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAuC,IAAhCjC,IAAEkC,IAAIvC,EAAQ,WAAW,IAChC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,WAAW,IACjC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,WAAW,IACrCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACTkF,WAAS,EACTxB,MAAwC,IAAjCjC,IAAEkC,IAAIvC,EAAQ,YAAY,IACjC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAClC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAwC,IAAjCjC,IAAEkC,IAAIvC,EAAQ,YAAY,IACjC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAClC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,KAAD,GACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,iBAAiB,IACvChC,KAAK,iBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAA6C,IAAtCjC,IAAEkC,IAAIvC,EAAQ,iBAAiB,KAL1C,sBAMYA,EAAO+I,gBANnB,yBAOclG,KAAKlD,gBAPnB,2BAQgB,CACRnC,UAAU,eATlB,GAYI,kBAAC,IAAD,CAAUH,MAAO,OAEbY,EAAOsL,gBAAgBvK,KAAI,SAACwK,GACxB,OAAQ,kBAAC,IAAD,CAAUnM,MAAOmM,EAAEnM,OAAQmM,EAAEtG,WAIjD,kBAAC,IAAD,CAAgB1F,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,iBAAiB,OAG1E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,SACLrB,MAAqC,IAA9BjC,IAAEkC,IAAIvC,EAAQ,SAAS,IAC9B4D,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,YAClBK,KAAK,IACLC,IAAI,OAKpB,kBAAC,IAAD,CAAMnG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,UACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAsC,IAA/BjC,IAAEkC,IAAIvC,EAAQ,UAAU,IAC/B3C,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,UAAU,IACpCzC,UAAQ,EACRsG,WAAY,CACR6D,SAAUtI,EAAQgK,YAClB5L,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,UAAW,MAChC6H,YAAY,GACZ1J,UAAQ,EACR6J,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,WACnChC,MAAsC,IAA/BjC,IAAEkC,IAAIvC,EAAQ,UAAU,IAC/BqH,QAAS,IAAIC,KACbzB,OAAO,aACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACR8F,SAAUvK,EAAQgK,YAClB5L,UAAU,2BAGlB,kBAAC,IAAD,CAAgBA,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,UAAU,OAGnE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,qBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,cACLuB,QAAQ,WACRC,WAAS,EACT0D,MAA0C,IAAnCjC,IAAEkC,IAAIvC,EAAQ,cAAc,IACnC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,cAAc,IACpC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,cAAc,IACxC6D,WAAY,CACR6D,SAAUtI,EAAQgK,YAClB5L,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,qBAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,cAAe,MACpC6H,YAAY,GACZG,aAAa,WACb9E,MAA0C,IAAnCjC,IAAEkC,IAAIvC,EAAQ,cAAc,IACnC1C,SAAWuF,KAAKyB,mBAAmB,eACnC+C,QAAS,IAAIC,KACbzB,OAAO,aACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACR8F,SAAUvK,EAAQgK,YAClB5L,UAAU,2BAGlB,kBAAC,IAAD,CAAgBA,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,cAAc,OAGvE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACf2C,MAAyC,IAAlCjC,IAAEkC,IAAIvC,EAAQ,aAAa,IAClC2D,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvC6D,WAAY,CACR6D,SAAUtI,EAAQiK,WAClB7L,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,aAAc,MACnC6H,YAAY,GACZG,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,cACnC+C,QAAS,IAAIC,KACbhF,MAAyC,IAAlCjC,IAAEkC,IAAIvC,EAAQ,aAAa,IAClC6F,OAAO,aACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACR8F,SAAUvK,EAAQiK,WAClB7L,UAAU,2BAGlB,kBAAC,IAAD,CAAgBA,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,aAAa,OAGtE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,0BAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,mBAAoB,MACzC6H,YAAY,GACZG,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,oBACnC+C,QAAS,IAAIC,KACbhF,MAA+C,IAAxCjC,IAAEkC,IAAIvC,EAAQ,mBAAmB,IACxC6F,OAAO,aACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACR8F,SAAUvK,EAAQiK,WAClB7L,UAAU,2BAGlB,kBAAC,IAAD,CAAgBA,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,mBAAmB,OAG5E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,IACnC,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CAEIR,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAK0B,eACfjC,MAA2C,IAApCjC,IAAEkC,IAAIvC,EAAQ,eAAe,IACpC5C,KAAK,eACLoK,aAAa,iBACbmC,SAAUvK,EAAQgK,cAEtB,kBAAC,IAAD,CAAgB5L,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,eAAe,OAGxE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,qBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,cACLuB,QAAQ,WACRC,WAAS,EACT0D,MAA0C,IAAnCjC,IAAEkC,IAAIvC,EAAQ,cAAc,IACnC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,cAAc,IACpC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,cAAc,IACxC8D,WAAS,EACTD,WAAY,CACRrG,UAAU,aACViK,KAAM,WAS9B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMrE,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,EAAGR,GAAI,QAEV5C,IAAP3B,GAAoBE,EAAQgK,cAAgBhK,EAAQiK,YAAcpL,EAAO8E,WAAW,iBAAoB,kBAAC,IAAD,CACrG6G,QAAS/G,KAAK8F,eACd5B,MAAM,UACN8C,KAAK,SACLlL,QAAQ,YACR0E,MAAO,CACHyG,YAAa,SANoF,eAajGjJ,IAAP3B,IAAqBE,EAAQgK,aAAenL,EAAO8E,WAAW,kBAAsB,kBAAC,IAAD,CACjF6G,QAAS/G,KAAKwF,gBACdtB,MAAM,UACN8C,KAAK,SACLlL,QAAQ,YACR0E,MAAO,CACHyG,YAAa,SANgE,gBAa7EjJ,IAAP3B,GAAsC,OAAlBE,EAAQuD,QAAmB1E,EAAO8E,WAAW,iBAAoB,kBAAC,IAAD,CAClF6G,QAAS/G,KAAKuF,eACdrB,MAAM,YACN8C,KAAK,SACLlL,QAAQ,YACR0E,MAAO,CACHyG,YAAa,SANiE,eAa9EjJ,IAAP3B,GAAsC,OAAlBE,EAAQuD,QAAoB,kBAAC,IAAD,CAC7CiH,QAAS/G,KAAKsF,eACdpB,MAAM,UACN8C,KAAK,SACLlL,QAAQ,aAJqC,cAWrD,kBAAC,IAAD,CAAM4E,MAAI,EAACU,GAAI,EAAGR,GAAI,EAAGJ,MAAO,CAACa,UAAU,UACvC,kBAAC,IAAD,CACIpB,UAAWA,EACXqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,oBAcrDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GAr8Bb4C,aA08BVlH,gBAAgB,cAAhBA,CAA+B0K,K,8YCx8BxCmC,E,YACF,WAAY5M,GAAQ,IAAD,8BACf,4CAAMA,KAuFVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IAtGE,EA0GnBO,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IA9GJ,EAiHnBmC,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KAnHJ,EAsHnBiH,mBAAqB,SAAClH,GAAD,OAAU,SAACC,GAC5B,EAAKC,SAASF,EAAKC,KAvHJ,EA0HnBkH,eAAiB,SAACnH,EAAKC,GACnB,EAAKC,SAASF,EAAKC,IA3HJ,EA8HnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAyCb,OAxCKH,EAAO2E,aAAYxE,EAAOwE,WAAa1E,EAAE,yBACzCD,EAAO4E,gBAAezE,EAAOyE,cAAgB3E,EAAE,yBAC/CD,EAAO6E,aAAY1E,EAAO0E,WAAa5E,EAAE,yBACzCD,EAAO8E,gBAAe3E,EAAO2E,cAAgB7E,EAAE,yBAC/CD,EAAO+E,QAAO5E,EAAO4E,MAAQ9E,EAAE,yBAC/BD,EAAOgF,OAAM7E,EAAO6E,KAAO/E,EAAE,yBAC7BD,EAAOiF,IAEHC,IAAOlF,EAAOiF,KAAKG,YACxBjF,EAAO8E,IAAMhF,EAAE,wBAFfE,EAAO8E,IAAMhF,EAAE,wBAIdD,EAAOqF,eAAclF,EAAOkF,aAAepF,EAAE,yBAC7CD,EAAOsF,SAAQnF,EAAOmF,OAASrF,EAAE,yBACjCD,EAAOuF,SAAQpF,EAAOoF,OAAStF,EAAE,yBACjCD,EAAOwF,WAAUrF,EAAOqF,SAAWvF,EAAE,yBACrCD,EAAOyF,YAAWtF,EAAOsF,UAAYxF,EAAE,yBACvCD,EAAO0F,iBAAgBvF,EAAOuF,eAAiBzF,EAAE,yBAEjDD,EAAOoG,cAAkBpG,EAAOmK,OAAUnK,EAAOoK,aAElDjK,EAAOiG,aAAenG,EAAE,wBACxBE,EAAOiK,WAAanK,EAAE,yBAErBD,EAAO2F,mBAAkBxF,EAAOwF,iBAAmB1F,EAAE,yBACrDD,EAAOqK,UAASlK,EAAOkK,QAAUpK,EAAE,yBACnCD,EAAOsK,YAAWnK,EAAOmK,UAAYrK,EAAE,yBAGxCD,EAAOuK,OACFvK,EAAOmF,QAEAD,IAAOlF,EAAOmF,SAASC,YAC/BjF,EAAOgF,QAAUlF,EAAE,wBAFnBE,EAAOgF,QAAUlF,EAAE,wBAIlBD,EAAOkJ,iBAAgB/I,EAAO+I,eAAiBjJ,EAAE,0BAE1D,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GA5KQ,EA+KnBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAyBjB,OAxBAF,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACnB,GAAS,MAALD,EACA,OAAOC,GACH,IAAK,MACD,IAAIgF,EAAIZ,IAAOa,SAASlF,GAAKA,EAAIqE,IAAOrE,GACxCrC,EAAKuC,OAAOD,EAAEgF,EAAEE,OAAO,eACvBxH,EAAKuC,OAAO,MAAM+E,EAAEE,OAAO,SAC3B,MACJ,IAAK,aACDxH,EAAKuC,OAAO,QAAQF,GACpB,MACJ,IAAK,UACGiF,EAAIZ,IAAOa,SAASlF,GAAKA,EAAIqE,IAAOrE,GACxCrC,EAAKuC,OAAOD,EAAEgF,EAAEE,OAAO,eACvB,MACJ,IAAK,QACL,IAAK,OACD,MACJ,QACIxH,EAAKuC,OAAOD,EAAED,MAI5B,IACKzC,EAAOC,MAAP,4BAAoC2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CAC7E4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IAjCV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBAtLtB,EA4NnB8G,eAAiB,SAACpJ,GACdA,EAAEwC,iBADkB,IAGZrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHY,EAIA,EAAK/B,MAAjB2C,EAJY,EAIZA,EACF2B,GALc,EAIT1B,KACA,gBACX,EAAKT,SAAS,CACVkC,SAAS,EACTH,QAAS,GACTsB,OAAO,KAEX,EAAKzC,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,+BAAqCgB,GAAM,CAC9C4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,qBAAsB,CAClC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,8BAA8CnD,SAGvDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAhRV,EAuRnB6I,iBAAmB,SAACtL,GAChBA,EAAEwC,iBADoB,IAGdrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHc,EAIF,EAAK/B,MAAjB2C,EAJc,EAIdA,EACF2B,GALgB,EAIX1B,KACA,gBACX,EAAKT,SAAS,CACVkC,SAAS,EACTH,QAAS,GACTsB,OAAO,KAEX,EAAKzC,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,iCAAuCgB,GAAM,CAChD4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,oBAAqB,CACjC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,8BAA8CnD,SAGvDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WA3UV,EAkVnB6G,gBAAkB,SAACtJ,GACfA,EAAEwC,iBADmB,IAGbrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHa,EAID,EAAK/B,MAAjB2C,EAJa,EAIbA,EACF2B,GALe,EAIV1B,KACA,gBACX,EAAKT,SAAS,CACVkC,SAAS,IAEb,EAAKtB,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,gCAAsCgB,GAAM,CAC/C4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,oBAAqB,CACjC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,8BAA8CnD,SAGvDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WApYV,EA2YnBF,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,8BAA8CnD,SAGvDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAjbzB,EAAKnC,MAAQ,CACTD,QAAS,CACLoF,WAAW,GACXE,WAAW,GACXD,cAAc,GACdE,cAAc,GACdE,KAAK,GACLkB,IAAI,GACJjB,IAAK,KACLF,MAAM,GACNM,aAAa,GACbC,OAAO,GACPC,OAAO,GACPC,SAAS,GACTW,WAAW,GACXV,UAAU,GACVC,eAAe,GACfU,aAAa,GACbT,iBAAiB,GACjBwE,MAAO,GACPC,WAAY,KACZK,cAAc,EACdJ,SAAQ,EACRC,WAAU,EACV1H,OAAQ,GACR8H,WAAY,GACZ5H,OAAQ,MACRoG,eAAgB,KAChBqB,MAAM,EACNpF,QAAS,KACT2C,mBAAmB,EACnB6C,mBAAmB,EACnBC,cAAc,GAElBzK,OAAQ,GAGRwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK1B,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKpD,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBA/CP,E,kFAkDE,IAAD,OAER1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,wBAA8BgB,IACzBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GACzB,OAAOA,GACH,IAAK,MAAOF,EAAEE,GAAKoE,IAAOrE,GAAI,MAC9B,IAAK,QAASD,EAAEE,GAAKN,IAAEkC,IAAI7B,EAAE,WAAW,IAAK,MAC7C,IAAK,QACDD,EAAC,eACMA,EADN,GAEMC,GAEP,MACJ,QAASD,EAAEE,GAAGD,EAElB,OAAOD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BA0WnB,IAAD,EACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IACJ4D,GAAY,EACZ4H,GAAgB,EAChBC,GAAc,EACdC,GAAe,EAMnB,OAJI9H,OADOjC,IAAP3B,EACYjB,EAAO8E,WAAW,qBAElB9E,EAAO8E,WAAW,oBAE3B3D,EAAQuD,QACX,IAAK,MACD+H,GAAgB,EAChB,MACJ,IAAK,YACDA,GAAgB,EAChBE,GAAe,EACfD,GAAc,EACd,MACJ,IAAK,YACDC,GAAe,EACfD,GAAc,EACd7H,EAAY7E,EAAO8E,WAAW,sCAC9B,MACJ,QACI4H,GAAc,EACdC,GAAe,EAIvB,OAAQ,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAY9K,EAAE,oBAAd,cAAuCkD,kCAE3C,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,oBAAqBuC,KAAK,kBACpC,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,uBAA4B,6BAGlE,0BACIiE,SAAUN,KAAKvB,gBAEf,kBAAC,IAAD,CAAyBqF,MAAOC,KAC5B,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMxD,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOwE,WACfnH,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,uBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,gBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOyE,cACfpH,MAAQgD,IAAEkC,IAAInD,EAAQ,gBAAgB,IACtC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,gBAAgB,IAC1CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAO0E,WACfrH,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,uBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,gBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAO2E,cACftH,MAAQgD,IAAEkC,IAAInD,EAAQ,gBAAgB,IACtC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,gBAAgB,IAC1CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,eAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,QACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAO4E,MACfvH,MAAQgD,IAAEkC,IAAInD,EAAQ,QAAQ,IAC9B9B,SAAUuF,KAAKlD,eACfgE,KAAK,QACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,QAAQ,IAClCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOmF,OACf9H,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,QACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,sBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,eACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOkF,aACf7H,MAAQgD,IAAEkC,IAAInD,EAAQ,eAAe,IACrC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,eAAe,IACzCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CAAY+G,aAAW,SAASzJ,KAAK,SACjCC,MAAOgD,IAAEkC,IAAInD,EAAQ,SAAU,MAC/B9B,SAAUuF,KAAKlD,eACfmH,KAAG,EACHxE,MAAQtC,EAAOoF,QAEf,kBAAC,IAAD,CACI/H,MAAM,IACN2G,QAAS,kBAAC,IAAD,CAAO+C,MAAM,YACtB7D,MAAQpD,EAAE,gBACVkH,eAAe,MACf1E,MAAQtC,EAAOoF,SAEnB,kBAAC,IAAD,CACI/H,MAAM,IACN2G,QAAS,kBAAC,IAAD,CAAO+C,MAAM,YACtB7D,MAAQpD,EAAE,cACVkH,eAAe,MACf1E,MAAQtC,EAAOoF,SAEnB,kBAAC,IAAD,CACI/H,MAAM,IACN2G,QAAS,kBAAC,IAAD,CAAO+C,MAAM,YACtB7D,MAAQpD,EAAE,eACVkH,eAAe,MACf1E,MAAQtC,EAAOoF,UAGvB,kBAAC,IAAD,CAAgB5H,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,SAAS,OAGlE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,aAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,MAAO,MAC5B6H,YAAY,GACZ1J,UAAQ,EACR2J,OAAO,OACPC,MAAO,CAAC,OAAO,SACf7E,MAAQtC,EAAO8E,IACfsC,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,OACnC+C,QAAS,IAAIC,KACbzB,OAAO,UACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACRrG,UAAU,2BAGlB,kBAAC,IAAD,CAAgBA,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,MAAM,OAG/D,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,cAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,OACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAO6E,KACfxH,MAAQgD,IAAEkC,IAAInD,EAAQ,OAAO,IAC7B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,OAAO,IACjCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,kBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,WACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOqF,SACfhI,MAAQgD,IAAEkC,IAAInD,EAAQ,WAAW,IACjC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,WAAW,IACrCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,iBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOuF,eACflI,MAAQgD,IAAEkC,IAAInD,EAAQ,iBAAiB,IACvC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,iBAAiB,IAC3CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOsF,UACfjI,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAClC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,0BAAR,MAEL,kBAAC,IAAD,CACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,mBAAmB,IACzChC,KAAK,mBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOwF,iBACflI,SAAUuF,KAAKlD,eACfkE,WAAY,CACRrG,UAAU,eAGd,kBAAC,IAAD,CAAUH,MAAM,aAAhB,0BACA,kBAAC,IAAD,CAAUA,MAAM,oBAAhB,8CACA,kBAAC,IAAD,CAAUA,MAAM,iBAAhB,8BACA,kBAAC,IAAD,CAAUA,MAAM,8BAAhB,yEACA,kBAAC,IAAD,CAAUA,MAAM,kBAAhB,kBACA,kBAAC,IAAD,CAAUA,MAAM,iBAAhB,oCACA,kBAAC,IAAD,CAAUA,MAAM,aAAhB,2BAEJ,kBAAC,IAAD,CAAgBG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,mBAAmB,OAG5E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,sBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,eACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOiG,aACf5I,MAAQgD,IAAEkC,IAAInD,EAAQ,eAAe,IACrC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,eAAe,IACzC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOgG,WACf3I,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAO2C,OACftF,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/BuE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnC6D,WAAY,CACRrG,UAAU,aACVkK,UAAU,OAK1B,kBAAC,IAAD,CAAMnE,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,IACnC,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CAEIR,MAAK,UAAMpD,EAAE,eAAR,MAEL,kBAAC,IAAD,CACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,QAAQ,IAC9B9B,SAAUuF,KAAK0B,eACfnH,KAAK,aACLoK,aAAa,mBAIzB,kBAAC,IAAD,CAAMjE,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOyC,OACfpF,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnC8D,WAAS,EACTD,WAAY,CACRrG,UAAU,aACViK,KAAM,SAKtB,kBAAC,IAAD,CAAMlE,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,QAAS,GAChC,kBAAC,IAAD,CAAmBmH,OAAK,GACpB,kBAAC,IAAD,CAAarN,UAAU,YAAYuG,UAAU,YACzC,kBAAC,IAAD,CACIC,QACI,kBAAC,IAAD,CACItE,QAASN,EAAQ8K,QACjB5M,SAAUuF,KAAKrD,gBAAgB,aAGvC0D,MAAQpD,EAAE,oBAGlB,kBAAC,IAAD,CAAgBtC,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,UAAU,OAGnE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,QAAS,GAChC,kBAAC,IAAD,CAAmBmH,OAAK,GACpB,kBAAC,IAAD,CAAarN,UAAU,YAAYuG,UAAU,YACzC,kBAAC,IAAD,CACIC,QACI,kBAAC,IAAD,CACItE,QAASN,EAAQ+K,UACjB7M,SAAUuF,KAAKrD,gBAAgB,eAGvC0D,MAAQpD,EAAE,sBAGlB,kBAAC,IAAD,CAAgBtC,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,YAAY,OAGrE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,GAAIC,GAAI,IAAI,8BAC3B,kBAAC,IAAD,CAAMF,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,2BAAR,MAEL,kBAAC,IAAD,CACIJ,QAASN,EAAQuI,kBACjBrK,SAAUuF,KAAKrD,gBAAgB,qBAC/BpC,KAAK,oBACLyG,WAAY,CAAE,aAAc,sBAEhC,kBAAC,IAAD,CAAgBrG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,oBAAoB,OAG7E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,cAAR,MAEL,kBAAC,IAAD,CACIJ,QAASN,EAAQgL,KACjB9M,SAAUuF,KAAKrD,gBAAgB,QAC/BpC,KAAK,OACLyG,WAAY,CAAE,aAAc,sBAEhC,kBAAC,IAAD,CAAgBrG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,OAAO,OAGhE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,2BAAR,MAEL,kBAAC,IAAD,CACIJ,QAASN,EAAQoL,kBACjBlN,SAAUuF,KAAKrD,gBAAgB,qBAC/BpC,KAAK,oBACLyG,WAAY,CAAE,aAAc,sBAEhC,kBAAC,IAAD,CAAgBrG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,oBAAoB,OAG7E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,SAAU6B,EAAQgL,KAClBlH,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,UAAW,MAChC6H,YAAY,GACZ3E,MAAQtC,EAAOgF,QACfzH,SAAU6B,EAAQgL,KAClBhD,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,WACnC+C,QAAS,IAAIC,KACbzB,OAAO,aACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACRrG,UAAU,2BAGlB,kBAAC,IAAD,CAAgBA,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,UAAU,OAInE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,IACnC,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,SAAU6B,EAAQgL,KAClBlH,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,IAAD,CACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,iBAAiB,IACvChC,KAAK,iBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAO+I,eACfxL,SAAU6B,EAAQgL,KAClB9M,SAAUuF,KAAKlD,eACfkE,WAAY,CACRrG,UAAU,eAGd,kBAAC,IAAD,CAAUH,MAAO,OAEbY,EAAOsL,gBAAgBvK,KAAI,SAACwK,GACxB,OAAQ,kBAAC,IAAD,CAAUnM,MAAOmM,EAAEnM,OAAQmM,EAAEtG,WAIjD,kBAAC,IAAD,CAAgB1F,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,iBAAiB,OAG1E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,IACnC,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,sBAAR,MAEL,kBAAC,IAAD,CACIJ,QAASN,EAAQqL,aACjBnN,SAAUuF,KAAKrD,gBAAgB,gBAC/BpC,KAAK,eACLyG,WAAY,CAAE,aAAc,sBAEhC,kBAAC,IAAD,CAAgBrG,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,eAAe,OAGxE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,IACnC,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,KACLvC,SAAU6B,EAAQqL,cAElB,kBAAC,IAAD,CACIrN,KAAK,aACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAQtC,EAAOuK,WACflN,MAAQgD,IAAEkC,IAAInD,EAAQ,aAAa,IACnC7B,SAAU6B,EAAQqL,aAClBnN,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,aAAa,IACvC6D,WAAY,CACRrG,UAAU,oBAOlC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,EAAGR,GAAI,QAEX5C,IAAP3B,GAAoB,kBAAC,WAAD,KAEO,aAAlBE,EAAQuD,QAAyB1E,EAAO8E,WAAW,yBAA2B6H,GAAiB,kBAAC,IAAD,CACxFhB,QAAS/G,KAAKwF,gBACdtB,MAAM,UACN8C,KAAK,SACLlL,QAAQ,YACR0E,MAAO,CACHyG,YAAa,SANuE,WAa7E,aAAlB1K,EAAQuD,QAAyB1E,EAAO8E,WAAW,wBAA0B4H,GAAgB,kBAAC,IAAD,CACtFf,QAAS/G,KAAKsF,eACdpB,MAAM,YACN8C,KAAK,SACLlL,QAAQ,YACR0E,MAAO,CACHyG,YAAa,SANqE,aAa3E,YAAlB1K,EAAQuD,QAAwB1E,EAAO8E,WAAW,0BAA4B2H,GAAkB,kBAAC,IAAD,CACzFd,QAAS/G,KAAKwH,iBACdtD,MAAM,UACN8C,KAAK,SACLlL,QAAQ,aAJiF,cAY7G,kBAAC,IAAD,CAAM4E,MAAI,EAACU,GAAI,EAAGR,GAAI,EAAGJ,MAAO,CAACa,UAAU,UACvC,kBAAC,IAAD,CACIpB,UAAWA,EACXqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,2BAarDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GAjnCP4C,aAsnChBlH,gBAAgB,cAAhBA,CAA+B6M,K,oWC1nCxCe,E,YACF,WAAY3N,GAAQ,IAAD,8BACf,4CAAMA,KAiEVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IAhFE,EAoFnBO,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IAxFJ,EA2FnBmC,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KA7FJ,EAgGnBiH,mBAAqB,SAAClH,GAAD,OAAU,SAACC,GAC5B,EAAKC,SAASF,EAAKC,KAjGJ,EAoGnBkH,eAAiB,SAACnH,EAAKC,GACnB,EAAKC,SAASF,EAAKC,IArGJ,EAuGnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAYb,OAXKH,EAAOiI,YAAW9H,EAAO8H,UAAYhI,EAAE,yBACvCD,EAAOkL,aAAY/K,EAAO+K,WAAajL,EAAE,yBACzCD,EAAOkI,YAAW/H,EAAO+H,UAAYjI,EAAE,yBACvCD,EAAOmI,WAAUhI,EAAOgI,SAAWlI,EAAE,yBACrB,IAAjBD,EAAOqI,SAAclI,EAAOkI,OAASpI,EAAE,yBACtCD,EAAOiJ,mBAAkB9I,EAAO8I,iBAAmBhJ,EAAE,yBAE1D,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GAxHQ,EA2HnBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAmBjB,OAlBAF,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACnB,GAAS,MAALD,EACA,OAAOC,GACH,IAAK,mBACD,IAAIgF,EAAIZ,IAAOa,SAASlF,GAAKA,EAAIqE,IAAOrE,GACxCrC,EAAKuC,OAAOD,EAAEgF,EAAEE,OAAO,eACvB,MACJ,IAAK,eACDxH,EAAKuC,OAAO,UAAUF,GACtB,MACJ,IAAK,UACD,MACJ,QACIrC,EAAKuC,OAAOD,EAAED,MAI5B,IACKzC,EAAOC,MAAP,2BAAmC2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CAC5E4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IA3BV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBAlItB,EAkKnBgH,gBAAkB,SAACtJ,GACfA,EAAEwC,iBADmB,IAGbrC,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GAHa,EAID,EAAK/B,MAAjB2C,EAJa,EAIbA,EACF2B,GALe,EAIV1B,KACA,gBAGJX,EAAW,EAAKC,MAAhBD,QACP,EAAKE,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GASb,GAPKZ,EAAQkJ,cAAatI,EAAOsI,YAAcxI,EAAE,yBAC5CV,EAAQmJ,cAAavI,EAAOuI,YAAczI,EAAE,yBAEjD,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAEZwI,OAAOC,KAAKzI,GAAQ0I,OAAS,EAc7B,OAbAhH,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,QAId,EAGX,EAAKlC,SAAS,CACVkC,SAAS,EACTH,QAAS,GACTsB,OAAO,KAIX,EAAKzC,SACJ/B,MAAK,SAACC,GACH,OAAOH,EAAOC,MAAP,+BAAqCgB,GAAM,CAC9C4B,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM,QAEX/C,MAAK,SAACC,GACLsD,IAAMC,QAAQ7B,EAAE,oBAAqB,CACjC8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,6BAA6CnD,SAGtDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAxPV,EA8PnBF,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,6BAA6CnD,SAGtDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WApSzB,EAAKnC,MAAQ,CACTD,QAAS,CACL2L,WAAY,GACZC,QAAS,GACTnD,eAAgB,GAChBC,UAAW,GACXC,UAAW,GACXgB,eAAgB,GAChBf,SAAU,GACVO,YAAa,GACbD,YAAa,KACbU,YAAa,GACbF,iBAAkB,KAClBG,QAAS,KACTC,aAAc,KACdC,gBAAgB,EAChBjB,OAAQ,GAEZlI,OAAQ,GACRwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK1B,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKpD,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAKyF,gBAAkB,EAAKA,gBAAgBzF,KAArB,gBACvB,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBA9BP,E,iFAiCC,IAAD,OAEP1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,uBAA6BgB,IACxBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GACzB,OAAOA,GACH,IAAK,mBAAoBF,EAAEE,GAAKoE,IAAOrE,GAAI,MAC3C,IAAK,UAAWD,EAAEE,GAAKN,IAAEkC,IAAI7B,EAAE,WAAW,IAAK,MAC/C,IAAK,SAAUD,EAAEE,GAAK2I,WAAW5I,GAAI,MACrC,QAASD,EAAEE,GAAGD,EAElB,OAAOD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BAkPnB,IAAD,IACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IAEJ4D,GAAY,EAOhB,OALIA,OADOjC,IAAP3B,EACYjB,EAAO8E,WAAW,oBAElB9E,EAAO8E,WAAW,mBAG1B,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYjD,EAAE,mBAAd,cAAsCkD,kCAE1C,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,mBAAoBuC,KAAK,iBACnC,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,sBAA2B,4BAGjE,0BAAMiE,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,CAAyBqF,MAAOC,KAC5B,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMxD,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,aACLC,MAAQ+B,EAAQ2L,WAChBxN,UAAQ,EACR+E,MAAyC,IAAlCjC,IAAEkC,IAAIvC,EAAQ,aAAa,IAClC1C,SAAUuF,KAAKlD,eACfnC,UAAU,aACVmM,SAAUvK,EAAQgK,gBAI9B,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,iBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAA6C,IAAtCjC,IAAEkC,IAAIvC,EAAQ,iBAAiB,IACtC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,iBAAiB,IACvC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,iBAAiB,IAC3CzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,kBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,WACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAuC,IAAhCjC,IAAEkC,IAAIvC,EAAQ,WAAW,IAChC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,WAAW,IACjC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,WAAW,IACrCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACTkF,WAAS,EACTxB,MAAwC,IAAjCjC,IAAEkC,IAAIvC,EAAQ,YAAY,IACjC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAClC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAwC,IAAjCjC,IAAEkC,IAAIvC,EAAQ,YAAY,IACjC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAClC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,KAAD,GACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,iBAAiB,IACvChC,KAAK,iBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAA6C,IAAtCjC,IAAEkC,IAAIvC,EAAQ,iBAAiB,KAL1C,sBAMYA,EAAO+I,gBANnB,yBAOclG,KAAKlD,gBAPnB,2BAQgB,CACRnC,UAAU,eATlB,GAYI,kBAAC,IAAD,CAAUH,MAAO,OAEbY,EAAOsL,gBAAgBvK,KAAI,SAACwK,GACxB,OAAQ,kBAAC,IAAD,CAAUnM,MAAOmM,EAAEnM,OAAQmM,EAAEtG,WAIjD,kBAAC,IAAD,CAAgB1F,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,iBAAiB,OAG1E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,SACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnCzC,UAAQ,EACR+E,MAAqC,IAA9BjC,IAAEkC,IAAIvC,EAAQ,SAAS,IAC9B6D,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,YAClBK,KAAK,SAKrB,kBAAC,IAAD,CAAMlG,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,0BAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,mBAAoB,MACzC6H,YAAY,GACZ3E,MAA+C,IAAxCjC,IAAEkC,IAAIvC,EAAQ,mBAAmB,IACxCzC,UAAQ,EACR6J,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,oBACnC+C,QAAS,IAAIC,KACbzB,OAAO,aACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACRrG,UAAU,wBACVmM,SAAUvK,EAAQgK,eAG1B,kBAAC,IAAD,CAAgB5L,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,mBAAmB,OAG5E,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,qBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,cACLuB,QAAQ,WACR2D,MAA0C,IAAnCjC,IAAEkC,IAAIvC,EAAQ,cAAc,IACnCpB,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,cAAc,IACpC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,cAAc,IACxC6D,WAAY,CACRrG,UAAU,aACVkK,SAAUtI,EAAQgK,iBAKlC,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,qBAAR,MAEL,kBAAC,IAAD,CACIlB,WAAS,EACTvB,MAAOgD,IAAEkC,IAAInD,EAAQ,cAAe,MACpCkD,MAA0C,IAAnCjC,IAAEkC,IAAIvC,EAAQ,cAAc,IACnCiH,YAAY,GACZG,aAAa,WACb9J,SAAWuF,KAAKyB,mBAAmB,eACnC+C,QAAS,IAAIC,KACbzB,OAAO,aACP0B,oBAAqB,CAAC3F,SAAU,OAChCpE,UAAU,aACVqG,WAAY,CACRrG,UAAU,wBACVmM,SAAUvK,EAAQgK,eAG1B,kBAAC,IAAD,CAAgB5L,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,cAAc,OAGvE,kBAAC,IAAD,CAAMuD,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CAEIR,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACIzC,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAK0B,eACfjC,MAA2C,IAApCjC,IAAEkC,IAAIvC,EAAQ,eAAe,IACpC5C,KAAK,eACLoK,aAAa,iBACbmC,SAAUvK,EAAQgK,gBAI9B,kBAAC,IAAD,CAAM7F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,qBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,cACLuB,QAAQ,WACRC,WAAS,EACT0D,MAA0C,IAAnCjC,IAAEkC,IAAIvC,EAAQ,cAAc,IACnC3C,MAAQgD,IAAEkC,IAAInD,EAAQ,cAAc,IACpC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,cAAc,IACxC8D,WAAS,EACTD,WAAY,CACRrG,UAAU,aACViK,KAAM,WAO9B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMrE,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,EAAGR,GAAI,QAEV5C,IAAP3B,IAAqBE,EAAQgK,aAAenL,EAAO8E,WAAW,wBAA2B,kBAAC,IAAD,CACtF6G,QAAS/G,KAAKwF,gBACdtB,MAAM,UACN8C,KAAK,SACLlL,QAAQ,YACR0E,MAAO,CACHyG,YAAa,SANqE,YAa9F,kBAAC,IAAD,CAAMvG,MAAI,EAACU,GAAI,EAAGR,GAAI,EAAGJ,MAAO,CAACa,UAAU,UACvC,kBAAC,IAAD,CACIpB,UAAWA,EACXqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,0BAcrDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GAvnBT4C,aA4nBdlH,gBAAgB,cAAhBA,CAA+B4N,K,2RChoBxCG,E,YACF,WAAY9N,GAAQ,IAAD,8BACf,4CAAMA,KAoDVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IAnEE,EAuEnBO,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IA3EJ,EA8EnBmC,gBAAkB,SAACpC,EAAMC,GACrB,EAAKC,SAASF,EAAKC,IA/EJ,EAiFnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAQb,OAPKH,EAAOzC,OAAM4C,EAAO5C,KAAO0C,EAAE,yBACC,GAA/BD,EAAOqL,cAAcxC,SAAa1I,EAAOkL,cAAgBpL,EAAE,yBAE/D,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GA9FQ,EAiGnBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAUjB,OATAF,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACV,MAALD,GAGQrC,EAAKuC,OAAOD,EAAED,KAI5B,IACKzC,EAAOC,MAAP,0BAAkC2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CAC3E4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IAlBV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBAxGtB,EA+HnBC,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,2BAA2CnD,SAGpDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WArKzB,EAAKnC,MAAQ,CACTD,QAAS,CACLhC,KAAK,GACLqF,OAAQ,GACRyI,cAAe,IAEnBlL,OAAO,GACPwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK1B,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKpD,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBAfP,E,iFAkBC,IAAD,OAEP1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,sBAA4BgB,IACvBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GACzB,OAAOA,GACH,IAAK,gBACDF,EAAEE,GAAKD,EAAE1B,KAAI,SAAC8H,GACV,OAAOqE,SAASrE,EAAI5H,OAExB,MACJ,QAASuB,EAAEE,GAAGD,EAElB,OAAOD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BA+HnB,IAAD,EACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IACJ4D,GAAY,EAMhB,OAJIA,OADOjC,IAAP3B,EACYjB,EAAO8E,WAAW,mBAElB9E,EAAO8E,WAAW,kBAE1B,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYjD,EAAE,iBAAd,cAAoCkD,kCAExC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,iBAAkBuC,KAAK,eACjC,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,oBAAyB,0BAG/D,0BAAMiE,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM8B,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,QAAS,GAChC,kBAAC,IAAD,CACInG,UAAQ,EACRsN,OAAK,EACL3H,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,OACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO5C,KACdC,MAAQgD,IAAEkC,IAAInD,EAAQ,OAAO,IAC7B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,OAAO,IACjCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,QAAS,GAChC,kBAAC,IAAD,CACImH,OAAK,EACL3H,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOyC,OACdpF,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnC8D,WAAS,EACTD,WAAY,CACRrG,UAAU,aACViK,KAAM,SAKtB,kBAAC,IAAD,CAAMlE,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,QAAS,GAChC,kBAAC,IAAD,CACImH,OAAK,EACL3H,MAAK,UAAMpD,EAAE,uBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,gBACLC,MAAQ+B,EAAQ8L,cAChB5N,SAAUuF,KAAKrD,kBAEnB,kBAAC,IAAD,CAAgBhC,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,gBAAgB,SAKjF,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMoD,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,GAAIR,GAAI,GAAIJ,MAAO,CAACa,UAAU,UACzC,kBAAC,IAAD,CACIpB,UAAWA,EACXqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,uBAajDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GA3RV4C,aAgSblH,gBAAgB,cAAhBA,CAA+B+N,K,oTClSxCG,E,YACF,WAAYjO,GAAQ,IAAD,8BACf,4CAAMA,KAuDVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IAtEE,EA0EnBO,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IA9EJ,EAiFnBmC,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KAnFJ,EAsFnBiH,mBAAqB,SAAClH,GAAD,OAAU,SAACC,GAC5B,EAAKC,SAASF,EAAKC,KAvFJ,EA0FnBkH,eAAiB,SAACnH,EAAKC,GACnB,EAAKC,SAASF,EAAKC,IA3FJ,EA6FnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EAEAZ,GAHc,EACXa,KACmB,EAAK5C,MAA3BgD,MAASC,OACTlB,IAER,EAAKI,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAuBb,OAtBKH,EAAOwL,UAASrL,EAAOqL,QAAUvL,EAAE,yBACnCD,EAAOyL,UAAStL,EAAOsL,QAAUxL,EAAE,yBACnCD,EAAO0L,gBAAevL,EAAOuL,cAAgBzL,EAAE,yBAC/CD,EAAO+E,QAAO5E,EAAO4E,MAAQ9E,EAAE,yBAC/BD,EAAO2L,YAAWxL,EAAOwL,UAAY1L,EAAE,yBAEvCD,EAAO4F,SAKH5F,EAAO6F,sBAED7F,EAAO4F,UAAY5F,EAAO6F,wBACjC1F,EAAO0F,sBAAwB5F,EAAE,0CAFjCE,EAAO0F,sBAAwB5F,EAAE,6BAL1Be,IAAP3B,IACAc,EAAOyF,SAAW3F,EAAE,yBAU5B,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GA5HQ,EA+HnBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAChC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAYjB,OAXAF,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACnB,GAAS,MAALD,EACA,OAAOC,GACH,IAAK,aACD,MACJ,QACItC,EAAKuC,OAAOD,EAAED,MAI5B,IACKzC,EAAOC,MAAP,oBAA4B2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CACrE4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IApBV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBArItB,EA6JnBC,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,sBAAsCnD,SAG/CZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAnMzB,EAAKnC,MAAQ,CACTD,QAAS,CACLiM,QAAQ,GACRC,QAAQ,GACRE,UAAW,GACX5G,MAAM,GACNO,OAAO,GACPM,SAAU,GACVC,sBAAsB,GACtB6F,cAAe,KACf7E,YAAW,GAEf1G,OAAO,GACPwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK1B,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKpD,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBAvBP,E,iFA0BC,IAAD,OAEP1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,gBAAsBgB,IACjBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GAIzB,OAFaF,EAAEE,GAAGD,EAEXD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BA0JnB,IAAD,EACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IAEJ4D,GAAY,EAOhB,OALIA,OADOjC,IAAP3B,EACYjB,EAAO8E,WAAW,aAElB9E,EAAO8E,WAAW,YAG1B,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYjD,EAAE,YAAd,cAA+BkD,kCAEnC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,YAAauC,KAAK,UAC5B,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,eAAoB,qBAG1D,0BAAMiE,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM8B,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,UACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOqL,QACdhO,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,UAAU,IACpCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,UACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOsL,QACdjO,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,UAAU,IACpCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAM1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,eAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,QACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO4E,MACdvH,MAAQgD,IAAEkC,IAAInD,EAAQ,QAAQ,IAC9B9B,SAAUuF,KAAKlD,eACfgE,KAAK,QACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,QAAQ,IAClCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOmF,OACd9H,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOwL,UACdnO,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAClC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,gBACLC,MAAQ+B,EAAQmM,cAChBhO,UAAQ,EACR+E,MAAOtC,EAAOuL,cACdjO,SAAUuF,KAAKlD,eACfnC,UAAU,iBAItB,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,kBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,WACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOyF,SACdpI,MAAQgD,IAAEkC,IAAInD,EAAQ,WAAW,IACjC9B,SAAUuF,KAAKlD,eACfgE,KAAK,WACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,WAAW,IACrC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,SAAU6B,EAAQqG,SAClBvC,MAAK,UAAMpD,EAAE,+BAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,wBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO0F,sBACdnI,SAAU6B,EAAQqG,SAClBpI,MAAQgD,IAAEkC,IAAInD,EAAQ,wBAAwB,IAC9C9B,SAAUuF,KAAKlD,eACfgE,KAAK,WACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,wBAAwB,IAClD6D,WAAY,CACRrG,UAAU,kBAM1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,oBAAR,MAEL,kBAAC,IAAD,CAAatC,UAAU,YAAYuG,UAAU,YACzC,kBAAC,IAAD,CACIC,QACI,kBAAC,IAAD,CACItE,QAASN,EAAQsH,WACjBpE,MAAOtC,EAAO0G,WACdpJ,SAAUuF,KAAKrD,gBAAgB,mBAK/C,kBAAC,IAAD,CAAgBhC,UAAU,SAAS6C,IAAEkC,IAAIvC,EAAQ,aAAa,SAK9E,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMoD,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,GAAIR,GAAI,GAAIJ,MAAO,CAACa,UAAU,UACzC,kBAAC,IAAD,CACIpB,UAAWA,EACXqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,kBAajDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GApbf4C,aAybRlH,gBAAgB,cAAhBA,CAA+BkO,K,yRCvbxCK,E,YACF,WAAYtO,GAAQ,IAAD,8BACf,4CAAMA,KAiDVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IAhEE,EAoEnBO,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IAxEJ,EA2EnBmC,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KA7EJ,EAgFnBiH,mBAAqB,SAAClH,GAAD,OAAU,SAACC,GAC5B,EAAKC,SAASF,EAAKC,KAjFJ,EAoFnBkH,eAAiB,SAACnH,EAAKC,GACnB,EAAKC,SAASF,EAAKC,IArFJ,EAuFnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAiBb,OAhBKH,EAAOwL,UAASrL,EAAOqL,QAAUvL,EAAE,yBACnCD,EAAOyL,UAAStL,EAAOsL,QAAUxL,EAAE,yBACnCD,EAAO+E,QAAO5E,EAAO4E,MAAQ9E,EAAE,yBAEhCD,EAAO4F,WACF5F,EAAO6F,sBAED7F,EAAO4F,UAAY5F,EAAO6F,wBACjC1F,EAAO0F,sBAAwB5F,EAAE,0CAFjCE,EAAO0F,sBAAwB5F,EAAE,yBAMzC,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GA7GQ,EA+GnBE,OAAS,WACyB,EAAK/C,MAA3BgD,MAASC,OADL,IAELhB,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAUjB,OATAF,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACV,MAALD,GAGQrC,EAAKuC,OAAOD,EAAED,KAI5B,IACKzC,EAAOC,MAAP,gBAA6B,CAChC4C,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IAlBV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBArHtB,EA2InBC,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GACSA,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,iBAGT/D,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WAjLzB,EAAKnC,MAAQ,CACTD,QAAS,CACLiM,QAAQ,GACRC,QAAQ,GACRE,UAAW,GACX5G,MAAM,GACNO,OAAO,GACPM,SAAU,GACVC,sBAAsB,IAE1B1F,OAAO,GACPwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK1B,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKpD,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAK0B,mBAAqB,EAAKA,mBAAmB1B,KAAxB,gBAC1B,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBArBP,E,iFAwBC,IAAD,OACfC,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,iBACKC,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GAIzB,OAFaF,EAAEE,GAAGD,EAEXD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,S,+BA6If,IAAD,EACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAFH,EAEMC,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,GAER,OAAQ,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYY,EAAE,cAAd,cAAiCkD,kCAErC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAOpD,EAAE,kBAGnB,0BAAMqD,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM8B,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,UACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOqL,QACdhO,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,UAAU,IACpCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,iBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,UACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOsL,QACdjO,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,UAAU,IACpCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAM1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,eAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,QACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO4E,MACdvH,MAAQgD,IAAEkC,IAAInD,EAAQ,QAAQ,IAC9B9B,SAAUuF,KAAKlD,eACfgE,KAAK,QACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,QAAQ,IAClCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,gBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,SACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOmF,OACd9H,MAAQgD,IAAEkC,IAAInD,EAAQ,SAAS,IAC/B9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,SAAS,IACnCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,mBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,YACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOwL,UACdnO,MAAQgD,IAAEkC,IAAInD,EAAQ,YAAY,IAElCuE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,YAAY,IACtCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,aACVkK,UAAS,OAKzB,kBAAC,IAAD,CAAMnE,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,IAGnC,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,kBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,WACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAOyF,SACdpI,MAAQgD,IAAEkC,IAAInD,EAAQ,WAAW,IACjC9B,SAAUuF,KAAKlD,eACfgE,KAAK,WACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,WAAW,IACrC6D,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,SAAU6B,EAAQqG,SAClBvC,MAAK,UAAMpD,EAAE,+BAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,wBACLuB,QAAQ,WACRC,WAAS,EACT0D,MAAOtC,EAAO0F,sBACdnI,SAAU6B,EAAQqG,SAClBpI,MAAQgD,IAAEkC,IAAInD,EAAQ,wBAAwB,IAC9C9B,SAAUuF,KAAKlD,eACfgE,KAAK,WACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,wBAAwB,IAClD6D,WAAY,CACRrG,UAAU,oBAOlC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,GAAIR,GAAI,GAAIJ,MAAO,CAACa,UAAW,UAC1C,kBAAC,IAAD,YASpBrB,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GAtXhB4C,aA2XPlH,gBAAgB,cAAhBA,CAA+BuO,K,wGCzYjCC,EAAgB,WACzB,IAAMC,EAA6B,kBAAXxJ,OAExB,SAASyJ,IACP,MAAO,CACLC,MAAOF,EAAWxJ,OAAO2J,gBAAajL,EACtCkL,OAAQJ,EAAWxJ,OAAO6J,iBAAcnL,GANb,MAUKpD,mBAASmO,GAVd,mBAUxBK,EAVwB,KAUZC,EAVY,KAyB/B,OAbAnO,qBAAU,WACR,IAAK4N,EACH,OAAO,EAGT,SAASQ,IACPD,EAAcN,KAIhB,OADAzJ,OAAOiK,iBAAiB,SAAUD,GAC3B,kBAAMhK,OAAOkK,oBAAoB,SAAUF,MACjD,IAEIF,I,6PC4HI/O,gBAAgB,cAAhBA,EAzIE,SAAAC,GAAU,IAAD,EAEFmP,cAAZxM,EAFc,EAEdA,EAFc,KAEXC,KACatC,mBAAS,KAHX,mBAGfY,EAHe,KAGTkO,EAHS,OAIK9O,mBAAS,IAJd,mBAIf+O,EAJe,KAIRC,EAJQ,OAKQhP,oBAAS,GALjB,mBAKf+D,EALe,KAKNkL,EALM,OAMMjP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,KACRC,MAAO,IAXW,mBAMf/O,EANe,KAMPgP,EANO,KAchBC,EAAU,CACZ,CAAEC,IAAK,OAAQ9J,MAAOpD,EAAE,eACxB,CAAEkN,IAAK,UAAW9J,MAAOpD,EAAE,kBAC3B,CAAEkN,IAAK,UAAW9J,MAAOpD,EAAE,iBAAkBmN,OAAO,SAACnG,EAAIoG,GAAS,MAAM,OAAN,OAAsB,MAARA,EAAe,EAAGA,KAClG,CAAEF,IAAK,SAAU9J,MAAOpD,EAAE,iBAC1B,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,oBAAqBmN,OAAQ,SAACnG,EAAIoG,GAAW,OAAOA,EAAO,IAAK,MAC9F,CAAEF,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,uBAGrGnH,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EACJ9B,GADgBb,EAAT4C,KACJ,wBAAoBjC,EAAOF,QAA3B,iBAA2CE,EAAOD,SAAlD,kBAAoEC,EAAO8O,QAA3E,iBAA2F9O,EAAO6O,QAC3F,IAAVH,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CE,GAAW,GACXzO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MAEzBd,EAAQnO,EAAOC,MACfyO,EAAUM,GACVV,GAAW,MACZpO,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,eAAd,cAAkCkD,kCAEtC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,mBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,GAEPxF,EAAO8E,WAAW,iBAAmB,kBAAC,IAAD,CACjCwK,UAAW,kBAAC,IAAD,MACXxG,MAAM,UACNpI,QAAQ,YACRnB,UAAU,cACV6E,KAAK,oBAEJvC,EAAE,aAIf,kBAAC,IAAD,CAAM2D,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,yBAAoByE,EAAI5H,KAC5DjB,EAAO8E,WAAW,eAAiB,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAWrFvB,GAAW,kBAAC,IAAD,Y,gPCvIf0M,EAAU,IAAIC,IACdC,EAAWC,YAAW,CACxBC,MAAO,CACHpK,UAAW,UAEfqK,UAAW,CACPC,aAAc,QAElBC,SAAU,CACN5C,MAAO,QAEX6C,UAAW,CACPC,gBAAiB,4BACjBC,iBAAkB,YAClBC,eAAgB,QAChBC,UAAU,QACVjD,MAAO,OACPkD,SAAS,SACTC,QAAQ,OACRC,WAAW,UAEfC,aAAc,CACVC,WAAY,OACZtD,MAAO,QACPuD,OAAQ,OACRJ,QAAS,QACTK,QAAS,OACTC,aAAc,MACdR,UAAW,WAwHJS,IArHD,SAAApS,GAAU,IAAD,EAEWM,oBAAS,GAFpB,mBAEZ+D,EAFY,KAEHkL,EAFG,OAIajP,mBAAS,IAJtB,mBAIZ+R,EAJY,KAIFC,EAJE,OAKahS,mBAAS,IALtB,mBAKZgI,EALY,KAKFiK,EALE,OAOSjS,mBAAS,IAPlB,mBAOZkS,EAPY,KAOJC,EAPI,OAQmBnS,mBAAS,IAR5B,mBAQZoS,EARY,KAQCC,EARD,OASWrS,mBAAS,IATpB,mBASZsS,EATY,KASHC,EATG,OAWavS,oBAAS,GAXtB,mBAWZwS,EAXY,KAWFC,EAXE,OAaQzS,oBAAS,GAbjB,mBAaZ0S,EAbY,KAaLC,EAbK,OAeC9D,cAAZxM,EAfW,EAeXA,EAEFuQ,GAjBa,EAeRtQ,KAEKqO,KAmChB,OAAQ+B,EAAS,kBAAC,IAAD,CAAUG,GAAI,CAACC,SAAU,OAAU,kBAAC,WAAD,KAChD,kBAAC,IAAD,KACI,yCAAYzQ,EAAE,YAAd,cAA+BkD,kCAEnC,kBAAC,IAAD,CAAMxF,UAAW6S,EAAQ3B,WACrB,0BAAMlR,UAAW6S,EAAQnB,aAAc/L,SAtC9B,SAACpE,GACdA,EAAEwC,iBACFqO,EAAU,IACVE,EAAe,IACfE,EAAW,IACX9B,EAAQsC,OAAO,YAAY,CAACC,KAAK,IAAIC,OAAOvO,OAAOC,SAASuO,WAC5C,IAAZnB,GAAgBM,EAAehQ,EAAE,uBACrB,IAAZ2F,GAAgBuK,EAAWlQ,EAAE,uBAEjB,IAAZ0P,GAA8B,IAAZ/J,IAClBiH,GAAW,GACXzO,EAAOC,MAAM,aAAa,CACtB4C,OAAQ,OACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,mBACV,eAAgB,qBAEpBC,KAAO0P,KAAKC,UAAU,CAClBrB,SAAUA,EACV/J,SAAUA,MAEftH,MAAK,SAACC,GACUiC,IAAEkC,IAAInE,EAAO,gBAAgB,IAC5C8P,EAAQ4C,IAAI,YAAa1S,EAAOC,KAAK,CAACoS,KAAK,IAAIC,OAAOvO,OAAOC,SAASuO,WACtEP,GAAU,MACX9R,OAAM,SAACC,GACNmO,GAAW,GACXkD,EAAU9P,EAAEO,IAAEkC,IAAIhE,EAAI,UAAU8B,IAAEkC,IAAIhE,EAAI,QAAQ,yBAWlD,kBAAC,IAAD,CAAMgF,MAAI,EAACE,GAAI,GAAIjG,UAAU,aACrB,yBAAKA,UAAW6S,EAAQ/B,OACpB,4BAAMxO,EAAE,cAEZ,kBAAC,IAAD,CACIoD,MAAQpD,EAAE,eACVmH,YAAY,GACZrI,WAAS,EACTD,QAAQ,WACRvB,KAAK,WACLE,SAAU,SAACyB,GAAM0Q,EAAY1Q,EAAEU,OAAOpC,QACtCA,MAAOmS,EACPuB,gBAAiB,CACbC,QAAQ,GAEZpN,WAAaiM,EACbvN,MAAQqN,EAAOjH,OAAS,GAAKmH,EAAYnH,OAAS,EAClDlL,UAAW6S,EAAQ9B,YAEvB,kBAAC,IAAD,CACIrL,MAAQpD,EAAE,eACVmH,YAAY,GACZtD,KAAOsM,EAAW,OAAS,WAC3BrR,WAAS,EACTD,QAAQ,WACRvB,KAAK,WACLE,SAAU,SAACyB,GAAM2Q,EAAY3Q,EAAEU,OAAOpC,QACtCA,MAAOoI,EACPsL,gBAAiB,CACbC,QAAQ,GAEZ1O,MAAQqN,EAAOjH,OAAS,GAAKqH,EAAQrH,OAAS,EAC9C9E,WAAamM,GAAoBJ,EACjCnS,UAAW6S,EAAQ9B,UACnB0C,WAAY,CACRC,aACE,kBAAC,IAAD,CACEtH,QAAS,SAAC7K,GAAQmR,GAAaD,IAC/BzS,UAAU,eACVoE,SAAS,OAEDqO,EAAW,kBAAC,IAAD,MAAoB,kBAAC,IAAD,UAOnD,kBAAC,IAAD,CACItM,KAAK,SAAShF,QAAQ,YAAYoI,MAAM,UACxCvJ,UAAW6S,EAAQ5B,UAFvB,YAOdjN,GAAW,kBAAC,IAAD,U,+QCJNtE,gBAAgB,cAAhBA,EA3IC,SAAAC,GAAU,IAAD,EAEDmP,cAAZxM,EAFa,EAEbA,EAFa,KAEVC,KACatC,mBAAS,KAHZ,mBAGdY,EAHc,KAGRkO,EAHQ,OAIM9O,mBAAS,IAJf,mBAId+O,EAJc,KAIPC,EAJO,OAKShP,oBAAS,GALlB,mBAKd+D,EALc,KAKLkL,EALK,OAMOjP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,KACRC,MAAO,IAXU,mBAMd/O,EANc,KAMNgP,EANM,KAcfC,EAAU,CACZ,CAAEC,IAAK,aAAc9J,MAAOpD,EAAE,qBAC9B,CAAEkN,IAAK,gBAAiB9J,MAAOpD,EAAE,wBACjC,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,qBAC9B,CAAEkN,IAAK,gBAAiB9J,MAAOpD,EAAE,wBACjC,CAAEkN,IAAK,QAAS9J,MAAOpD,EAAE,gBACzB,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,sBACvG,CAAEmH,IAAK,aAAc9J,MAAOpD,EAAE,oBAAsBmN,OAAQ,SAACE,EAAQD,GACjE,OAAOA,EAAO,IAAI,OAIpBxO,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EACJ9B,GADgBb,EAAT4C,KACJ,uBAAmBjC,EAAOF,QAA1B,iBAA0CE,EAAOD,SAAjD,kBAAmEC,EAAO8O,QAA1E,iBAA0F9O,EAAO6O,QAC1F,IAAVH,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CE,GAAW,GACXzO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MACzBX,GAAW,GACXH,EAAQnO,EAAOC,MACfyO,EAAUM,MACX9O,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,cAAd,cAAiCkD,kCAErC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,kBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,GAEPxF,EAAO8E,WAAW,gBAAkB,kBAAC,IAAD,CAChCwK,UAAW,kBAAC,IAAD,MACXxG,MAAM,UACNpI,QAAQ,YACRnB,UAAU,cACV6E,KAAK,mBAEJvC,EAAE,aAIf,kBAAC,IAAD,CAAM2D,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,wBAAmByE,EAAI5H,KAC3DjB,EAAO8E,WAAW,cAAgB,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAWpFvB,GAAW,kBAAC,IAAD,Y,+QCCNtE,gBAAgB,cAAhBA,EAzIA,SAAAC,GAAU,IAAD,EAEAmP,cAAZxM,EAFY,EAEZA,EAFY,KAETC,KACatC,mBAAS,KAHb,mBAGbY,EAHa,KAGPkO,EAHO,OAIO9O,mBAAS,IAJhB,mBAIb+O,EAJa,KAINC,EAJM,OAKUhP,oBAAS,GALnB,mBAKb+D,EALa,KAKJkL,EALI,OAMQjP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,KACRC,MAAO,IAXS,mBAMb/O,EANa,KAMLgP,EANK,KAcdC,EAAU,CACZ,CAAEC,IAAK,UAAW9J,MAAOpD,EAAE,kBAC3B,CAAEkN,IAAK,UAAW9J,MAAOpD,EAAE,iBAAkBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,gBAClG,CAAEmH,IAAK,iBAAkB9J,MAAOpD,EAAE,yBAClC,CAAEkN,IAAK,YAAa9J,MAAOpD,EAAE,oBAC7B,CAAEkN,IAAK,SAAU9J,MAAOpD,EAAE,gBAAiBmN,OAAO,SAACnG,EAAIoG,GAAS,MAAM,IAAN,OAAmB,MAARA,EAAe,EAAGA,KAC7F,CAAEF,IAAK,SAAU9J,MAAOpD,EAAE,iBAC1B,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,uBAGrGnH,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EACJ9B,GADgBb,EAAT4C,KACJ,sBAAkBjC,EAAOF,QAAzB,iBAAyCE,EAAOD,SAAhD,kBAAkEC,EAAO8O,QAAzE,iBAAyF9O,EAAO6O,QACzF,IAAVH,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CE,GAAW,GACXzO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MACzBX,GAAW,GACXH,EAAQnO,EAAOC,MACfyO,EAAUM,MACX9O,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,aAAd,cAAgCkD,kCAEpC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,iBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,GAEPxF,EAAO8E,WAAW,eAAiB,kBAAC,IAAD,CAC/BwK,UAAW,kBAAC,IAAD,MACXxG,MAAM,UACNpI,QAAQ,YACRnB,UAAU,cACV6E,KAAK,kBAEJvC,EAAE,aAIf,kBAAC,IAAD,CAAM2D,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,uBAAkByE,EAAI5H,KAC1DjB,EAAO8E,WAAW,aAAe,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAWnFvB,GAAW,kBAAC,IAAD,Y,uRCrIH6M,aAAW,SAAA8C,GAAK,MAAK,CACnCC,eAAgB,CACdC,WAAY,YA6IHnU,gBAAgB,cAAhBA,EA1IO,SAAAC,GAAU,IAAD,EAEPmP,cAAZxM,EAFmB,EAEnBA,EAFmB,KAEhBC,KACatC,mBAAS,KAHN,mBAGpBY,EAHoB,KAGdkO,EAHc,OAIG9O,oBAAS,GAJZ,mBAIpB+D,EAJoB,KAIXkL,EAJW,OAKAjP,mBAAS,IALT,mBAKpB+O,EALoB,KAKbC,EALa,OAMChP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,KACRC,MAAO,IAXgB,mBAMpB/O,EANoB,KAMZgP,EANY,KAcrBC,EAAU,CACZ,CAAEC,IAAK,aAAc9J,MAAOpD,EAAE,qBAC9B,CAAEkN,IAAK,gBAAiB9J,MAAOpD,EAAE,wBACjC,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,qBAC9B,CAAEkN,IAAK,gBAAiB9J,MAAOpD,EAAE,wBACjC,CAAEkN,IAAK,QAAS9J,MAAOpD,EAAE,gBACzB,CAAEkN,IAAK,SAAU9J,MAAOpD,EAAE,iBAC1B,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAC/D,OAAOnI,IAAOmI,GAAMrH,OAAO,uBAI7BnH,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EACJ9B,GADgBb,EAAT4C,KACJ,6BAAyBjC,EAAOF,QAAhC,iBAAgDE,EAAOD,SAAvD,kBAAyEC,EAAO8O,QAAhF,iBAAgG9O,EAAO6O,QAChG,IAAVH,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CE,GAAW,GACXzO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MAEzBd,EAAQnO,EAAOC,MACfyO,EAAUM,GACVV,GAAW,MACZpO,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,oBAAd,cAAuCkD,kCAE3C,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,wBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACI8J,UAAW,kBAAC,IAAD,MACXxG,MAAM,UACNpI,QAAQ,YACRnB,UAAU,cACV6E,KAAK,yBAEJvC,EAAE,aAGX,kBAAC,IAAD,CAAM2D,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,8BAAyByE,EAAI5H,KACjEjB,EAAO8E,WAAW,oBAAsB,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAW1FvB,GAAW,kBAAC,IAAD,Y,+QCHNtE,gBAAgB,cAAhBA,EA1IM,SAAAC,GAAU,IAAD,EAENmP,cAAZxM,EAFkB,EAElBA,EAFkB,KAEfC,KACatC,mBAAS,KAHP,mBAGnBY,EAHmB,KAGbkO,EAHa,OAIC9O,mBAAS,IAJV,mBAInB+O,EAJmB,KAIZC,EAJY,OAKIhP,oBAAS,GALb,mBAKnB+D,EALmB,KAKVkL,EALU,OAMEjP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,KACRC,MAAO,IAXe,mBAMnB/O,EANmB,KAMXgP,EANW,KAcpBC,EAAU,CACZ,CAAEC,IAAK,eAAgB9J,MAAOpD,EAAE,iBAAkBwR,WAAW,GAC7D,CAAEtE,IAAK,iBAAkB9J,MAAOpD,EAAE,yBAClC,CAAEkN,IAAK,YAAa9J,MAAOpD,EAAE,oBAC7B,CAAEkN,IAAK,SAAU9J,MAAOpD,EAAE,gBAAiBmN,OAAO,SAACnG,EAAIoG,GAAS,MAAM,IAAN,OAAmB,MAARA,EAAe,EAAGA,KAC7F,CAAEF,IAAK,cAAe9J,MAAOpD,EAAE,qBAAuBmN,OAAQ,SAACE,EAAQD,GACnE,OAAOA,EAAO,IAAI,MAEtB,CAAEF,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,uBAGrGnH,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EACJ9B,GADgBb,EAAT4C,KACJ,4BAAwBjC,EAAOF,QAA/B,iBAA+CE,EAAOD,SAAtD,kBAAwEC,EAAO8O,QAA/E,iBAA+F9O,EAAO6O,QAC/F,IAAVH,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CE,GAAW,GACXzO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MACzBX,GAAW,GACXH,EAAQnO,EAAOC,MACfyO,EAAUM,MACX9O,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,mBAAd,cAAsCkD,kCAE1C,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,uBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,GAEPxF,EAAO8E,WAAW,qBAAuB,kBAAC,IAAD,CACrCwK,UAAW,kBAAC,IAAD,MACXxG,MAAM,UACNpI,QAAQ,YACRnB,UAAU,cACV6E,KAAK,wBAEJvC,EAAE,aAIf,kBAAC,IAAD,CAAM2D,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,6BAAwByE,EAAI5H,KAChEjB,EAAO8E,WAAW,mBAAqB,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAWzFvB,GAAW,kBAAC,IAAD,Y,sIC5FNtE,gBAAgB,cAAhBA,EAjDS,SAACC,GAAW,IACxBC,EAA+ED,EAA/EC,KAAMC,EAAyEF,EAAzEE,MAAOC,EAAkEH,EAAlEG,SADU,GACwDH,EAAxDI,SAAwDJ,EAA9CK,kBADV,MACoB,GADpB,IACwDL,EAAhCwM,gBADxB,YACwDxM,EAAhBmF,MACzC7E,mBAAS,KAFR,mBAExBC,EAFwB,KAEfC,EAFe,OAIHF,mBAAS,CACjCG,QAAS,EACTC,SAAU,KANiB,mBAIxBC,EAJwB,UA0B/B,OAJAC,qBAAU,YAbM,WACZ,IAAIC,EAAG,wBAAoBF,EAAOF,QAA3B,iBAA2CE,EAAOD,SAAlD,wBAEPI,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACHT,EAAWS,EAAOC,SACnBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAOpBG,KACF,IAEK,kBAAC,WAAD,KACH,kBAAC,IAAD,CACIC,QAAQ,WACRC,WAAS,EACT0D,OAAK,EACL9E,UAAWA,EACXJ,KAAMA,EACNC,MAAOA,EACPC,SAAUA,EACVuB,UAAW,CACPC,SAjBU,SAACC,GACnBP,QAAQC,IAAIM,KAkBR4K,SAAUA,GAEV,kBAAC,IAAD,CAAUtM,MAAO,OAEbK,EAAQsB,KAAI,SAACC,GACT,OAAQ,kBAAC,IAAD,CAAU5B,MAAO4B,EAAOC,IAAKD,EAAOgB,gB,+QCgGjD/C,gBAAgB,cAAhBA,EArII,SAAAC,GAAU,IAAD,EAEJmP,cAAZxM,EAFgB,EAEhBA,EAFgB,KAEbC,KACatC,mBAAS,KAHT,mBAGjBY,EAHiB,KAGXkO,EAHW,OAIG9O,mBAAS,IAJZ,mBAIjB+O,EAJiB,KAIVC,EAJU,OAKMhP,oBAAS,GALf,mBAKjB+D,EALiB,KAKRkL,EALQ,OAMIjP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,OACRC,MAAO,IAXa,mBAMjB/O,EANiB,KAMTgP,EANS,KAclBC,EAAU,CACZ,CAAEC,IAAK,OAAQ9J,MAAOpD,EAAE,qBACxB,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,uBAGrGnH,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EACJ9B,GADgBb,EAAT4C,KACJ,2BAAuBjC,EAAOF,QAA9B,iBAA8CE,EAAOD,SAArD,kBAAuEC,EAAO8O,QAA9E,iBAA8F9O,EAAO6O,QAC5GD,GAAW,GACG,IAAVF,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CvO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MACzBX,GAAW,GACXH,EAAQnO,EAAOC,MACfyO,EAAUM,MACX9O,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,iBAAd,cAAoCkD,kCAExC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,qBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,GAEPxF,EAAO8E,WAAW,oBAAsB,kBAAC,IAAD,CACpCwK,UAAW,kBAAC,IAAD,MACXxG,MAAM,UACNpI,QAAQ,YACRnB,UAAU,cACV6E,KAAK,sBAEJvC,EAAE,aAIf,kBAAC,IAAD,CAAM2D,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,2BAAsByE,EAAI5H,KAC9DjB,EAAO8E,WAAW,kBAAoB,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAWxFvB,GAAW,kBAAC,IAAD,Y,iKCpCNtE,gBAAgB,cAAhBA,EAlGM,SAACC,GAAW,IACrBE,EAA0BF,EAA1BE,MAAOD,EAAmBD,EAAnBC,KAAME,EAAaH,EAAbG,SADO,EAEEG,mBAAS,IAFX,mBAErBC,EAFqB,KAEZC,EAFY,OAGIF,mBAASJ,GAHb,mBAGrBkU,EAHqB,KAGXC,EAHW,KAgBtBhS,EAAkB,SAACT,GACPA,EAAEU,OAAOC,QAAvB,IACIrC,EAAQ8N,SAASpM,EAAEU,OAAOpC,OACxBoU,EAAgBF,EAASG,QAAQrU,GACnCsU,EAAc,IACK,IAAnBF,EACAE,EAAcA,EAAYC,OAAOL,EAAUlU,GAChB,IAAlBoU,EACTE,EAAcA,EAAYC,OAAOL,EAASM,MAAM,IACvCJ,IAAkBF,EAAS7I,OAAS,EAC7CiJ,EAAcA,EAAYC,OAAOL,EAASM,MAAM,GAAI,IAC3CJ,EAAgB,IACzBE,EAAcA,EAAYC,OACxBL,EAASM,MAAM,EAAGJ,GAClBF,EAASM,MAAMJ,EAAgB,KAInCnU,EAASF,EAAKuU,IAUpB,OARA5T,qBAAU,WA3BNE,EAAOC,MADA,YAEFC,MAAK,SAACC,GACHT,EAAWS,EAAOC,SACnBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAyBtB,IAEFR,qBAAU,WACNyT,EAAYnU,KACd,CAACA,IAEI,kBAAC,WAAD,KAECgD,IAAEG,OAAO9C,GAAQ,SAACU,EAAOf,EAAM2P,GA+C3B,OA9CA5O,EAAO0T,KAAK,kBAAC,WAAD,KAEAzR,IAAEG,OAAOnD,GAAM,SAACoD,EAAEC,EAAEC,GAwChB,OAvCAF,EAAEqR,KAAK,kBAAC,IAAD,CAAatU,UAAU,YAAYuG,UAAU,WAC5CV,MAAO,CACHwI,MAAO,OACP2C,aAAc,OACduD,aAAc,sBAGlB,+BAAS/E,GACT,kBAAC,IAAD,CAAM5J,WAAS,EAACC,MAAO,CACnB2O,YAAa,SAEb,kBAAC,IAAD,CAAMzO,MAAI,EAACU,GAAI,EAAGR,GAAI,GAClB,2BAAOJ,MAAO,CACV4O,WAAY,SACXtR,IAET,kBAAC,IAAD,CAAM4C,MAAI,EAACU,GAAI,GAAIR,GAAI,IACnB,kBAAC,IAAD,CAAML,WAAS,GAEX1C,EAAE1B,KAAI,SAAC8H,GACH,IAjEjC5H,EAiEuCgT,GAjEvChT,EAiEmE4H,EAAI5H,IAjEvC,IAA1BqS,EAASG,QAAQxS,IAkEU,OAAO,kBAAC,IAAD,CAAMqE,MAAI,EAACU,GAAI,EAAGR,GAAI,GACzB,kBAAC,IAAD,CACIO,QACI,kBAAC,IAAD,CACItE,QAASwS,EACT5U,SAAUkC,EACVnC,MAAOyJ,EAAI5H,KAGnBgE,MAAQ4D,EAAIqL,uBASrC1R,IACT,MAGPrC,IACT,U,+QCgDClB,gBAAgB,cAAhBA,EAzID,SAAAC,GAAU,IAAD,EAECmP,cAAZxM,EAFW,EAEXA,EAFW,KAERC,KACatC,mBAAS,KAHd,mBAGZY,EAHY,KAGNkO,EAHM,OAIQ9O,mBAAS,IAJjB,mBAIZ+O,EAJY,KAILC,EAJK,OAKWhP,oBAAS,GALpB,mBAKZ+D,EALY,KAKHkL,EALG,OAMSjP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,YACRC,MAAO,IAXQ,mBAMZ/O,EANY,KAMJgP,EANI,KAcbC,EAAU,CACZ,CAAEC,IAAK,kBAAmB9J,MAAOpD,EAAE,oBAAqBwR,WAAU,GAClE,CAAEtE,IAAK,UAAW9J,MAAOpD,EAAE,kBAC3B,CAAEkN,IAAK,UAAW9J,MAAOpD,EAAE,kBAC3B,CAAEkN,IAAK,YAAa9J,MAAOpD,EAAE,oBAC7B,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,uBAGrGnH,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EAAY3C,EAAT4C,KACXvB,QAAQC,IAAItB,GACZ,IAAIa,EAAG,qBAAiBF,EAAOF,QAAxB,iBAAwCE,EAAOD,SAA/C,kBAAiEC,EAAO8O,QAAxE,iBAAwF9O,EAAO6O,OACtGD,GAAW,GACG,IAAVF,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CvO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MACzBX,GAAW,GACXH,EAAQnO,EAAOC,MACfyO,EAAUM,MACX9O,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,YAAd,cAA+BkD,kCAEnC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,gBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,GAEPxF,EAAO8E,WAAW,cAAgB,kBAAC,IAAD,CAC9BwK,UAAW,kBAAC,IAAD,MACXxG,MAAM,UACNpI,QAAQ,YACRnB,UAAU,cACV6E,KAAK,iBAEJvC,EAAE,aAIf,kBAAC,IAAD,CAAM2D,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,sBAAiByE,EAAI5H,KACzDjB,EAAO8E,WAAW,YAAc,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAWlFvB,GAAW,kBAAC,IAAD,Y,sPCTNtE,gBAAgB,cAAhBA,EA5HC,SAAAC,GAAU,IAAD,EAEDmP,cAAZxM,EAFa,EAEbA,EAFa,KAEVC,KACatC,mBAAS,KAHZ,mBAGdY,EAHc,KAGRkO,EAHQ,OAIM9O,mBAAS,IAJf,mBAId+O,EAJc,KAIPC,EAJO,OAKShP,oBAAS,GALlB,mBAKd+D,EALc,KAKLkL,EALK,OAMOjP,mBAAS,CACjCG,QAAS,EACTC,SAAU,EACV8O,MAAO,MACPC,QAAQ,eACRC,MAAO,IAXU,mBAMd/O,EANc,KAMNgP,EANM,KAcfC,EAAU,CACZ,CAAEC,IAAK,eAAgB9J,MAAOpD,EAAE,sBAChC,CAAEkN,IAAK,aAAc9J,MAAOpD,EAAE,mBAAoBmN,OAAQ,SAACE,EAAQD,GAAS,OAAOnI,IAAOmI,GAAMrH,OAAO,uBAGrGnH,EAAU,WAAO,IACXoB,EAAY3C,EAAZ2C,EAAY3C,EAAT4C,KACXvB,QAAQC,IAAItB,GACZ,IAAIa,EAAG,uBAAmBF,EAAOF,QAA1B,iBAA0CE,EAAOD,SAAjD,kBAAmEC,EAAO8O,QAA1E,iBAA0F9O,EAAO6O,OACxGD,GAAW,GACG,IAAVF,IAAcxO,EAAG,UAAMA,EAAN,qBAAsBwO,IAC3CvO,EAAOC,MAAMF,GACRG,MAAK,SAACC,GACH,IAAIgP,EAAYtP,EAChBsP,EAAUP,MAAQzO,EAAOiP,MACzBX,GAAW,GACXH,EAAQnO,EAAOC,MACfyO,EAAUM,MACX9O,OAAM,SAACC,GACNmD,IAAMY,MAAMxC,EAAE,gBAAiB,CAC3B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLwK,GAAW,UAY/B,OAPA3O,qBAAU,WACNW,MACF,IACFX,qBAAU,WACNW,MACF,CAAC8N,EAAO1O,IAEF,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYgC,EAAE,cAAd,cAAiCkD,kCAErC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,kBAGlB,kBAAC,IAAD,CAAMtC,UAAU,mBACZ,kBAAC,IAAD,CAAaA,UAAU,gBACnB,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACE,GAAI,GACX,kBAAC,IAAD,CACIwD,YAAcnH,EAAE,aAChBnB,QAAQ,WACR2O,SAAU,SAACjQ,GACPoP,EAAUpP,OAItB,kBAAC,IAAD,CAAMkG,MAAI,EAACE,GAAI,IAGf,kBAAC,IAAD,CAAMA,GAAI,GAAIjG,UAAU,wBACpB,kBAAC,IAAD,CACIgQ,OAAO,KACPT,QAAUA,EACV1O,KAAOA,EACPP,OAASA,EACT2P,aAAc,SAACC,EAAOC,GAClBb,EAAU,eACHhP,EADE,CAELF,QAAS+P,EAAQ,MAGzBC,oBAAqB,SAAC7O,GAClB,IAAI8O,EAAU9O,EAAEU,OAAOpC,MACvByP,EAAU,eACHhP,EADE,CAELD,SAAUgQ,MAGlBC,aAAe,SAAC/O,EAAGgP,EAAUC,GACzBlB,EAAU,eACHhP,EADE,CAEL6O,MAAOqB,EACPpB,QAASmB,MAGjBE,UACI,SAACnH,GACG,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAYD,aAAW,WAAWxE,KAAI,wBAAmByE,EAAI5H,KAC3DjB,EAAO8E,WAAW,kBAAoB,kBAAC,IAAD,MAAc,kBAAC,IAAD,gBAWxFvB,GAAW,kBAAC,IAAD,Y,0QCxHf4Q,E,YACF,WAAYjV,GAAQ,IAAD,8BACf,4CAAMA,KA8CVG,SAAW,SAACF,EAAKC,GAAW,IAChBC,EAAa,EAAKH,MAAlBG,SACJ8B,EAAO,eACJ,EAAKC,MAAMD,QADP,eAENhC,EAAMC,IAEX,EAAKiC,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDA,QAIa,oBAAb9B,GACPA,EAAS8B,IA7DE,EAiEnBI,gBAAkB,SAACpC,GAAD,OAAU,SAAC2B,GACzB,IAAI1B,EAAQ0B,EAAEU,OAAOC,QACrB,EAAKpC,SAASF,EAAKC,KAnEJ,EAsEnBsC,eAAiB,SAACZ,GACd,IAAI3B,EAAO2B,EAAEU,OAAOrC,KAChBC,EAAQ0B,EAAEU,OAAOpC,MAErB,EAAKC,SAASF,EAAKC,IA1EJ,EA4EnBuC,YAAc,SAACC,GAAY,IAAD,EACF,EAAK1C,MAAjB2C,EADc,EACdA,EADc,EACXC,KACX,EAAKT,SAAS,CACVU,OAAQ,KAEZ,IAAIA,EAAS,GAOb,OANKH,EAAOwS,eAAcrS,EAAOqS,aAAevS,EAAE,yBAElD,EAAKR,UAAS,SAAAC,GAAS,sBAChBA,EADgB,eAElB,SAAWS,OAETA,GAxFQ,EA0FnBE,OAAS,WAAO,IAEJhB,EADsB,EAAK/B,MAA3BgD,MAASC,OACTlB,GACDE,EAAW,EAAKC,MAAhBD,QACDY,EAAS,EAAKJ,YAAYR,GAEhC,GAAKiB,IAAEC,QAAQN,GAER,CACH,IAAM3B,EAAO,IAAIkC,SAWjB,OAVA/B,QAAQC,IAAIW,GACZiB,IAAEG,OAAOpB,GAAS,SAACqB,EAAEC,EAAEC,GACV,MAALD,GAGQrC,EAAKuC,OAAOD,EAAED,KAI5B,IACKzC,EAAOC,MAAP,sBAA8B2C,IAAP3B,EAAmB,WAAWA,EAAG,WAAY,CACvE4B,YAAeD,IAAP3B,EAAmB,OAAQ,MACnC6B,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,qBAEdC,KAAM7C,IAnBV,OAAO8C,QAAQC,OAAO,CAAEC,QAAS,kBAjGtB,EAwHnBC,eAAiB,SAACvC,GACdA,EAAEwC,iBACF,EAAKjC,SAAS,CACVkC,SAAS,IAHO,MAKA,EAAKrE,MAAjB2C,EALY,EAKZA,EACF2B,GANc,EAKT1B,KACA,gBAEX,EAAKG,SAAS/B,MAAK,SAACC,GAAU,IACVc,EAASd,EAAjBC,KAAQa,GAChBwC,IAAMC,QAAQ7B,EAAE,gBAAiB,CAC7B8B,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLC,OAAOC,SAASC,KAAhB,wBAAwCnD,SAGjDZ,OAAM,SAACC,GAAO,IAAD,EAC2BA,EAA/B8C,eADI,MACM,GADN,IAC2B9C,EAAjB+D,aADV,MACkB,KADlB,EAEC,MAATA,GACA,EAAKhD,SAAS,CACVU,OAAQK,IAAEG,OAAO8B,GAAM,SAAC7B,EAAEC,EAAEC,GAExB,OADAF,EAAEE,GAAKb,EAAEO,IAAEkC,IAAI7B,EAAE,IAAI,KACdD,IACT,MAGViB,IAAMY,MAAgBxC,EAAVuB,GAAyB,gBAAiB,CAClDO,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,QAAS,WACLT,EAAMnC,SAAS,CACXkC,SAAS,WA9JzB,EAAKnC,MAAQ,CACTD,QAAS,CACLiT,aAAa,GACbjT,QAAQ,IAEZY,OAAO,GACPwB,SAAS,EACTmB,OAAQ,GACRtB,QAAS,IAEb,EAAK7B,gBAAkB,EAAKA,gBAAgBoD,KAArB,gBACvB,EAAKjD,eAAiB,EAAKA,eAAeiD,KAApB,gBACtB,EAAKtB,eAAiB,EAAKA,eAAesB,KAApB,gBAdP,E,iFAiBC,IAAD,OAEP1D,EADsB2D,KAAK1F,MAA3BgD,MAASC,OACTlB,QACG2B,IAAP3B,IACA2D,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAP,kBAAwBgB,IACnBf,MAAK,SAACC,GACH,EAAKkB,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAEnBH,QAAQ,eACDG,EAAUH,QADV,GAEAiB,IAAEG,OAAOpC,EAAOC,MAAK,SAACoC,EAAEC,EAAEC,GAIzB,OAFaF,EAAEE,GAAGD,EAEXD,IACT,KAENe,SAAQ,UAEblD,OAAM,SAACC,GACN,EAAKe,SAAS,CACVkC,SAAS,U,+BA8HnB,IAAD,EACuBqB,KAAKxD,MAAzBD,EADH,EACGA,QAASY,EADZ,EACYA,OADZ,EAEe6C,KAAK1F,MAAjB2C,EAFH,EAEGA,EAEAZ,GAJH,EAEMa,KACmB8C,KAAK1F,MAA3BgD,MAASC,OACTlB,IAEJ4D,GAAY,EAOhB,OALIA,OADOjC,IAAP3B,GAGYjB,EAAO8E,WAAW,kBAG1B,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAYjD,EAAE,cAAd,cAAiCkD,kCAErC,kBAAC,IAAD,KACI,kBAAC,IAAD,CACIC,MAAO,CACH,CAAEC,MAAMpD,EAAE,WAAYuC,KAAK,KAC3B,CAAEa,MAAMpD,EAAE,cAAeuC,KAAK,YAC9B,CAAEa,MAA0BpD,OAAZe,IAAP3B,EAAqB,iBAAsB,uBAG5D,0BAAMiE,SAAUN,KAAKvB,gBACjB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM8B,WAAS,EAACC,MAAO,CACnBC,UAAW,SAEX,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACInG,UAAQ,EACR2F,MAAK,UAAMpD,EAAE,qBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,eACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,eAAe,IACrC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,eAAe,IACzCzC,UAAQ,EACRsG,WAAY,CACRrG,UAAU,kBAK1B,kBAAC,IAAD,CAAM+F,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,QAAS,GAC/B,kBAAC,IAAD,CACIR,MAAK,UAAMpD,EAAE,wBAAR,MAEL,kBAAC,IAAD,CACI1C,KAAK,UACLuB,QAAQ,WACRC,WAAS,EACTvB,MAAQgD,IAAEkC,IAAInD,EAAQ,UAAU,IAChC9B,SAAUuF,KAAKlD,eACfgE,KAAK,OACLC,WAAYvD,IAAEkC,IAAIvC,EAAQ,UAAU,IACpC8D,WAAS,EACTD,WAAY,CACRrG,UAAU,oBAOlC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAM4F,WAAS,GACX,kBAAC,IAAD,CAAMG,MAAI,EAACU,GAAI,GAAIR,GAAI,GAAIJ,MAAO,CAACa,UAAU,UACzC,kBAAC,IAAD,CACIpB,UAAYA,EACZqB,SAAU,SAACpF,GACPA,EAAEwC,iBACFY,OAAOC,SAASC,KAAK,oBAajDQ,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,W,GApQb4C,aAyQVlH,gBAAgB,cAAhBA,CAA+BkV,K,kDCvR9C,2BAsBeE,IAnBA,SAACnV,GACZ,OAAO,yBAAKK,UAAU,UAClB,yBAAKA,UAAU,eACX,yBAAKwP,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,MACT,yBAAKA,IAAI,OACT,yBAAKA,IAAI,OACT,yBAAKA,IAAI,W,yLCdfkB,EAAU,IAAIC,IACpBlQ,EAAOC,MAAQ,SAACF,GAAwB,IAAnBuU,EAAkB,uDAAP,GACxBC,EAAgB,CAChBC,aAAY,EACZ3R,OAAQ,MACRC,YAAa,UACbC,QAAS,IAAIC,QAAQ,CACjB,OAAU,mBACV,eAAgB,sDAGxB,OAAOyR,MAAM,GAAD,OAAI1P,oDAAJ,OAAoChF,GAApC,eACLwU,EADK,GAELD,IACJpU,MAAK,SAACwU,GACL,OAAKA,EAASC,GAEPD,EAASE,OADLF,EAASE,OAAO1U,MAAK,SAAC2U,GAAU,OAAO3R,QAAQC,OAAO0R,UAKzE7U,EAAO8E,WAAa,SAACgQ,GACjB,IAAMC,EAAO9E,EAAQ3L,IAAI,YAAY,CAACkO,KAAM,IAAIC,OAAOvO,OAAOC,SAASuO,WACvE,QAAa9P,IAATmS,EACA,OAAO,EAHe,IAIlB9H,EAAkB8H,EAAlB9H,cAQR,MAPoB,kBAAT6H,EACPA,EAAKjB,KAAK,eAEViB,EAAO,CAAC,cAAcA,GAEb1S,IAAE4S,KAAKF,GAAM,SAACG,GAAD,OAAQ7S,IAAE8S,SAASjI,EAAegI,OAMhEjV,EAAOsL,gBAAkB,CACrB,CAAErG,MAAO,mBAAoB7F,MAAO,oBACpC,CAAE6F,MAAO,OAAQ7F,MAAO,QACxB,CAAE6F,MAAO,SAAU7F,MAAO,UAC1B,CAAE6F,MAAO,cAAe7F,MAAO,eAC/B,CAAE6F,MAAO,MAAO7F,MAAO,OACvB,CAAE6F,MAAO,QAAS7F,MAAO,SACzB,CAAE6F,MAAO,iBAAkB7F,MAAO,kBAClC,CAAE6F,MAAO,QAAS7F,MAAO,Y,qKCpCd+V,GARC,I,MAAIjF,GAEA,SAAAhR,GAChB,OAAQ,kBAAC,IACDA,K,0CCeGkW,EAlBF,SAAAlW,GAAU,IAAD,EAEEmP,cAAZxM,EAFU,EAEVA,EAFU,EAEPC,KAMX,OAJAhC,qBAAU,cAER,IAEM,kBAAC,WAAD,KACJ,kBAAC,IAAD,KACI,yCAAY+B,EAAE,WAAd,cAA8BkD,kCAElC,kBAACsQ,EAAA,EAAD,Q,gJC8DOC,EA9CA,SAAApW,GACX,OAAQ,kBAAC,IAAD,KACJ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAaqW,OAAK,EAAC/C,KAAK,SAAS1M,UAAWwL,MAE5C,kBAAC,IAAD,CAAciE,OAAK,EAAC/C,KAAK,IAAI1M,UAAWsP,IACxC,kBAAC,IAAD,CAAcG,OAAK,EAAC/C,KAAK,YAAY1M,UAAW0P,MAChD,kBAAC,IAAD,CAAcD,OAAK,EAAC/C,KAAK,mBAAmB1M,UAAW5E,MACvD,kBAAC,IAAD,CAAcqU,OAAK,EAAC/C,KAAK,qBAAqB1M,UAAW5E,MAEzD,kBAAC,IAAD,CAAcqU,OAAK,EAAC/C,KAAK,WAAW1M,UAAW2P,MAC/C,kBAAC,IAAD,CAAcF,OAAK,EAAC/C,KAAK,kBAAkB1M,UAAWM,MACtD,kBAAC,IAAD,CAAcmP,OAAK,EAAC/C,KAAK,oBAAoB1M,UAAWM,MAExD,kBAAC,IAAD,CAAcmP,OAAK,EAAC/C,KAAK,WAAW1M,UAAW0H,MAE/C,kBAAC,IAAD,CAAc+H,OAAK,EAAC/C,KAAK,iBAAiB1M,UAAW4P,MACrD,kBAAC,IAAD,CAAcH,OAAK,EAAC/C,KAAK,wBAAwB1M,UAAWgG,MAC5D,kBAAC,IAAD,CAAcyJ,OAAK,EAAC/C,KAAK,0BAA0B1M,UAAWgG,MAE9D,kBAAC,IAAD,CAAcyJ,OAAK,EAAC/C,KAAK,UAAU1M,UAAW6P,MAC9C,kBAAC,IAAD,CAAcJ,OAAK,EAAC/C,KAAK,iBAAiB1M,UAAW6D,MACrD,kBAAC,IAAD,CAAc4L,OAAK,EAAC/C,KAAK,mBAAmB1M,UAAW6D,MAEvD,kBAAC,IAAD,CAAc4L,OAAK,EAAC/C,KAAK,gBAAgB1M,UAAW8P,MACpD,kBAAC,IAAD,CAAcL,OAAK,EAAC/C,KAAK,uBAAuB1M,UAAW+G,MAC3D,kBAAC,IAAD,CAAc0I,OAAK,EAAC/C,KAAK,yBAAyB1M,UAAW+G,MAE7D,kBAAC,IAAD,CAAc0I,OAAK,EAAC/C,KAAK,cAAc1M,UAAW+P,MAClD,kBAAC,IAAD,CAAcN,OAAK,EAAC/C,KAAK,qBAAqB1M,UAAWkH,MACzD,kBAAC,IAAD,CAAcuI,OAAK,EAAC/C,KAAK,uBAAuB1M,UAAWkH,MAE3D,kBAAC,IAAD,CAAcuI,OAAK,EAAC/C,KAAK,SAAS1M,UAAWgQ,MAC7C,kBAAC,IAAD,CAAcP,OAAK,EAAC/C,KAAK,gBAAgB1M,UAAWqH,MACpD,kBAAC,IAAD,CAAcoI,OAAK,EAAC/C,KAAK,kBAAkB1M,UAAWqH,MACtD,kBAAC,IAAD,CAAcoI,OAAK,EAAC/C,KAAK,WAAW1M,UAAW0H,MAE/C,kBAAC,IAAD,CAAc+H,OAAK,EAAC/C,KAAK,WAAW1M,UAAWiQ,MAC/C,kBAAC,IAAD,CAAcR,OAAK,EAAC/C,KAAK,oBAAoB1M,UAAWkQ,U,kDC/DxEC,IAAOC,OAAO,MAWCjX,kBAAgB,cAAhBA,EATf,WACE,OACE,yBAAKM,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,UCHc4W,QACW,cAA7BjS,OAAOC,SAASuO,UAEe,UAA7BxO,OAAOC,SAASuO,UAEhBxO,OAAOC,SAASuO,SAASxQ,MACvB,2D,+BCbNJ,IAGGsU,IAAIC,KAGJD,IAAIE,KAEJF,IAAIG,KAGJC,KAAK,CACJC,IAAKC,aAAcC,QAAQ,kBAAoB,KAC/CC,YAAa,KACbC,OAAO,EACPC,MAAO,CACLC,aAAa,GAEfC,cAAe,CACbC,aAAa,KAIJnV,QAAf,ECnBAoV,IAASlI,OAAO,kBAAC,IAAD,CAAiBlN,KAAMA,GAAM,kBAAC,EAAD,OAA2BqV,SAASC,eAAe,SF0H1F,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrX,MAAK,SAAAsX,GACJA,EAAaC,gBAEdpX,OAAM,SAAAgE,GACL9D,QAAQ8D,MAAMA,EAAMjB,a,gCGzI5B,gEAOM+M,EAAWC,YAAW,CACxBsH,WAAY,CACRtG,QAAS,YAuBFuG,IAnBK,SAACzY,GAAW,IACpB8F,EAAU9F,EAAV8F,MACFoN,EAAUjC,IAChB,OACI,kBAAC,IAAD,CACI5Q,UAAS,UAAM6S,EAAQsF,WAAd,gBACTE,UAAW,kBAAC,IAAD,CAAkBC,SAAS,UACtCjP,aAAW,cAEP5D,EAAMjE,KAAI,SAACuE,EAAKwS,GACZ,OAAO,kBAAC,IAAD,CAAMhP,MAAM,UAAUiG,IAAK+I,EAAO1T,UAAoBxB,IAAd0C,EAAKlB,KAAqB,IAAMkB,EAAKlB,MACnFkB,EAAKL,a,4YCLpBgL,EAAU,IAAIC,IAEd6H,E,YACF,WAAY7Y,GAAQ,IAAD,8BACf,4CAAMA,KACDkC,MAAQ,CACT4W,YAAY,EACZzU,SAAS,GAJE,E,iFAOE,IAAD,OAChBqB,KAAKvD,SAAS,CACVkC,SAAS,IAEbvD,EAAOC,MAAM,QAAQC,MAAK,SAACC,GACvB,EAAKkB,SAAS,CACVkC,SAAS,OAEdlD,OAAM,SAACC,GACN2P,EAAQsC,OAAO,YAAY,CAACC,KAAK,IAAIC,OAAOvO,OAAOC,SAASuO,WAC5DzC,EAAQsC,OAAO,aACf,EAAKlR,SAAS,CACV2W,YAAY,S,+BAMpB,OAAQ,kBAAC,WAAD,KACFpT,KAAKxD,MAAMmC,SAAW,kBAAC,IAAD,OACrBqB,KAAKxD,MAAM4W,YAAc,kBAAC,IAAD,CAAU3F,GAAI,CAACC,SAAU,iB,GA5B1CnM,aAgCjB8R,EAAe,SAAC/Y,GAAW,IAAD,EACJM,oBAAS,GADL,mBACrB0Y,EADqB,KACfC,EADe,OAER9J,cACZlP,GAHoB,EAEpB0C,EAFoB,EAEjBC,KACuB5C,EAA1BC,MAAMiZ,EAAoBlZ,EAApBkZ,MAAOnX,EAAa/B,EAAb+B,GAAIoX,EAASnZ,EAATmZ,KAWzB,OALAvY,qBAAU,WAAK,IACHwS,EAAapO,OAAOC,SAApBmO,SACJ8F,EAAME,MAAK,SAAAC,GAAC,OAAKA,EAAEC,MAAQlG,MAC3B6F,GAAQ,KACd,IACM,kBAAC,WAAD,KACJ,kBAAC,IAAD,CAAU5Y,UAAU,iBAAiBwP,IAAK9N,EAAIwX,QAAM,EAAC9M,QATzC,SAAC7K,GACbqX,GAASD,KASL,kBAAC,IAAD,CAAS3Y,UAAU,WAAWwP,IAAK9N,EAAIsU,OAAK,EAAClD,GAAG,KAC5C,0BAAM9S,UAAU,YAAa8Y,GAC7B,0BAAM9Y,UAAU,aAAcJ,IAElC,yBAAKI,UAAU,eACV2Y,EAAO,kBAAC,IAAD,MAAiB,kBAAC,IAAD,QAGjC,kBAAC,IAAD,CAAUQ,GAAIR,EAAMS,QAAQ,OAAOC,eAAa,GAC5C,kBAAC,IAAD,CAAM9S,UAAU,MAAM+S,gBAAc,GAE5BT,EAAM7J,QAAO,SAAAgK,GAAC,OAAIA,EAAEO,cAAY/X,KAAI,SAACgY,GACjC,OACI,kBAAC,IAAD,CAAUxZ,UAAU,iBAAiBwP,IAAKgK,EAAI9X,GAAIwX,QAAM,GACpD,kBAAC,IAAD,CAASlZ,UAAU,WAAWgW,OAAK,EAAClD,GAAI0G,EAAIP,MACxC,0BAAMjZ,UAAU,YAAawZ,EAAIV,MACjC,0BAAM9Y,UAAU,aAAcwZ,EAAI5Z,eAuIvD6Z,IA7HM,SAAC,GAAuC,IAA1B7S,EAAyB,EAApCL,UAAyBmT,EAAW,+BAExBzZ,oBAAS,GAFe,mBAEjD0Z,EAFiD,KAEvCC,EAFuC,OAGtB3Z,oBAAS,GAHa,mBAGjD4Z,EAHiD,KAGtCC,EAHsC,OAI1B7Z,oBAAS,GAJiB,mBAIjD+D,EAJiD,KAIxCkL,EAJwC,KAKlD6K,EAAU7L,cAEVsH,EAAO9E,EAAQ3L,IAAI,YAAY,CAACkO,KAAM,IAAIC,OAAOvO,OAAOC,SAASuO,WAPf,EAQpCrE,cAAZxM,EARgD,EAQhDA,EAEF0X,GAVkD,EAQ7CzX,KAES,CAChB,CAAEb,GAAI,KAAM9B,KAAK,GAAD,OAAK0C,EAAE,YAAc2W,KAAM,IAAKH,KAAO,kBAAC,IAAD,MAAeS,YAAY,GAClF,CAAE7X,GAAI,KAAM9B,KAAK,GAAD,OAAK0C,EAAE,qBAAuB2W,KAAM,iBAAkBH,KAAO,kBAAC,IAAD,MAAkBS,WAAY9Y,EAAO8E,WAAW,qBAC7H,CAAE7D,GAAI,KAAM9B,KAAK,GAAD,OAAK0C,EAAE,eAAiB2W,KAAM,WAAYH,KAAO,kBAAC,IAAD,MAAgBS,WAAY9Y,EAAO8E,WAAW,eAC/G,CAAE7D,GAAI,KAAM9B,KAAK,GAAD,OAAK0C,EAAE,eAAiBuW,MAAO,CAC3C,CAAEnX,GAAI,MAAO9B,KAAK,GAAD,OAAK0C,EAAE,gBAAkB2W,KAAM,YAAaH,KAAM,kBAAC,IAAD,MAAqBS,WAAY9Y,EAAO8E,WAAW,gBACtH,CAAE7D,GAAI,MAAO9B,KAAK,GAAD,OAAK0C,EAAE,oBAAsB2W,KAAM,gBAAiBH,KAAM,kBAAC,IAAD,MAAgBS,WAAY9Y,EAAO8E,WAAW,oBACzH,CAAE7D,GAAI,MAAO9B,KAAK,GAAD,OAAK0C,EAAE,cAAgB2W,KAAM,UAAWH,KAAM,kBAAC,IAAD,MAAcS,WAAY9Y,EAAO8E,WAAW,eAC5GuT,KAAO,kBAAC,IAAD,MAAeS,WAAY9Y,EAAO8E,WAAW,CAAC,cAAc,kBAAkB,eACxF,CAAE7D,GAAI,KAAM9B,KAAK,GAAD,OAAK0C,EAAE,cAAeuW,MAAM,CACxC,CAAEnX,GAAI,MAAO9B,KAAK,GAAD,OAAK0C,EAAE,kBAAoB2W,KAAM,cAAeH,KAAM,kBAAC,IAAD,MAAgBS,WAAY9Y,EAAO8E,WAAW,mBACrH,CAAE7D,GAAI,MAAO9B,KAAK,GAAD,OAAK0C,EAAE,aAAe2W,KAAM,SAAUH,KAAM,kBAAC,IAAD,MAAoBS,WAAY9Y,EAAO8E,WAAW,aAC/G,CAAE7D,GAAI,MAAO9B,KAAK,GAAD,OAAK0C,EAAE,eAAiB2W,KAAM,WAAYH,KAAM,kBAAC,IAAD,MAAYS,WAAY9Y,EAAO8E,WAAW,oBAC5GuT,KAAO,kBAAC,IAAD,MAAeS,WAAY9Y,EAAO8E,WAAW,CAAC,iBAAiB,WAAW,sBAGxFhF,qBAAU,WACFwZ,EAAQ1L,OAAS,MACjBuL,GAAY,KAElB,IAmBF,OAAQC,EACJ,kBAAC,WAAD,KACI,kBAAC,IAAD,CAAU/G,GAAI,CAACC,SAAU,YACvB/O,GAAW,kBAAC,IAAD,OACH,kBAAC,WAAD,KACd,kBAAC,IAAD,CAAMhE,UAAU,kBACZ,kBAACwY,EAAD,MACA,kBAAC,IAAD,CACIxY,UAAS,oBAAe2Z,EAAW,YAAY,IAC/CpT,UAAU,OAEV,kBAAC,IAAD,CAAUvG,UAAU,kBAChB,kBAAC,IAAD,CACIA,UAAS,gBACToM,QAAS,SAAC7K,GACNqY,GAAaD,KAGjB,kBAAC,IAAD,QAGR,kBAAC,IAAD,CAAU3Z,UAAU,qBAChB,kBAAC,IAAD,CAASA,UAAU,WAAWgW,OAAK,EAAClD,GAAE,YAClC,kBAAC,IAAD,CAAQ9S,UAAS,cAAiBia,IAAG,UAAOpX,IAAEkC,IAAIyQ,EAAK,UAAU,QAErE,kBAAC,IAAD,CAASxV,UAAU,qBAAqBgW,OAAK,EAAClD,GAAE,YAC5C,wCAAYjQ,IAAEkC,IAAIyQ,EAAK,UAAU,QAIzCwE,EAAYhL,QAAO,SAAAgK,GAAC,OAAIA,EAAEO,cAAY/X,KAAI,SAACgY,GACvC,YAAkBnW,IAAdmW,EAAIX,MACG,kBAACH,EAAD,CACH9Y,KAAM4Z,EAAI5Z,KACV8B,GAAI8X,EAAI9X,GACR8N,IAAKgK,EAAI9X,GACToX,KAAMU,EAAIV,KACVD,MAAOW,EAAIX,MACXc,UAAQ,IAIR,kBAAC,IAAD,CAAU3Z,UAAU,iBAAiBwP,IAAKgK,EAAI9X,GAAIwX,QAAM,GACpD,kBAAC,IAAD,CAASlZ,UAAU,WAAWgW,OAAK,EAAClD,GAAI0G,EAAIP,MACxC,0BAAMjZ,UAAU,YAAawZ,EAAIV,MACjC,0BAAM9Y,UAAU,aAAcwZ,EAAI5Z,WAQtD,kBAAC,IAAD,CAAUI,UAAU,iBAAiBwP,IAAI,OAAO0J,QAAM,GAClD,kBAAC,IAAD,CAASlZ,UAAU,WAAWgW,OAAK,EAAClD,GAAG,IAAI1G,QAvEtC,SAAC7K,GAClBA,EAAEwC,iBACFmL,GAAW,GACXzO,EAAOC,MAAM,cAAc,CACvB4C,OAAQ,SACT3C,MAAK,SAACC,GACL8P,EAAQsC,OAAO,YAAY,CAACC,KAAM,IAAIC,OAAOvO,OAAOC,SAASuO,WAC7DzC,EAAQsC,OAAO,aACfkH,YAAW,WAAKJ,GAAa,KAAQ,QACtChZ,OAAM,SAACC,GACN2P,EAAQsC,OAAO,YAAY,CAACC,KAAM,IAAIC,OAAOvO,OAAOC,SAASuO,WAC7DzC,EAAQsC,OAAO,aACfkH,YAAW,WAAKJ,GAAa,KAAQ,KACrC5K,GAAW,QA2DC,0BAAMlP,UAAU,YAAW,kBAAC,IAAD,OAC3B,0BAAMA,UAAU,aAAcsC,EAAE,iBAI5C,kBAAC,IAAD,CAAMtC,UAAU,gBACZ,kBAAC,IAAD,iBACQ0Z,EADR,CAEIjK,OAAS,SAAA9P,GAAK,OACT6V,IAASqE,EAAc,kBAACjT,EAAcjH,GAAc,kBAAC,IAAD,CAAUmT,GAAI,CAACC,SAAU,iBAI1F,4BAAQ/S,UAAU,eACd,uBAAGA,UAAS,cAAZ,QAA+BuH,MAASc,OAAO,KAA/C,0CAGNrE,GAAW,kBAAC,IAAD,U,kDCxNrB,wEAKiB6M,YAAW,IA0CbsJ,IAvCS,SAACxa,GAAW,IACxBgH,EAAyChH,EAAzCgH,SAAUyT,EAA+Bza,EAA/Bya,SADa,EACkBza,EAArB2F,iBADG,SAO/B,OAJA/E,qBAAU,cAER,IAGE,kBAAC,WAAD,KACM6Z,EAEE9U,GAAa,kBAAC,IAAD,CACTnE,QAAQ,YACRoI,MAAM,UACN8C,KAAK,SACLlG,KAAK,SACL4J,UAAW,kBAAC,IAAD,MACXlK,MAAO,CACHyG,YAAa,SAPR,aAcAjJ,IAAbsD,GAA0B,kBAAC,IAAD,CACtBxF,QAAQ,YACRoI,MAAM,UACN8C,KAAK,SACL0D,UAAW,kBAAC,IAAD,MACX3D,QAAUzF,GALY,W,2LC1BpC0T,EAAYxJ,aAAW,SAAA8C,GAAK,MAAK,CACnC2G,KAAM,CACJjM,MAAO,QAETkM,MAAO,CACLlM,MAAO,OACP2C,aAAc2C,EAAMzN,QAAQ,IAE9BsU,MAAO,CACLC,SAAU,KAEZC,eAAgB,CACdC,OAAQ,EACRC,KAAM,gBACNrM,OAAQ,EACRqD,QAAS,EACTL,SAAU,SACVM,QAAS,EACTzN,SAAU,WACVyW,IAAK,GACLxM,MAAO,GAETzI,UAAW,OAGTkV,EAAgB,SAAAnb,GAAU,IACpB4P,EAA2F5P,EAA3F4P,QAAiBJ,GAA0ExP,EAAlFqQ,OAAkFrQ,EAA1EwP,OAAOC,EAAmEzP,EAAnEyP,QAAS2L,EAA0Dpb,EAA1Dob,OAAQC,EAAkDrb,EAAlDqb,YAAaC,EAAqCtb,EAArCsb,YAAaC,EAAwBvb,EAAxBub,SAAUzK,EAAc9Q,EAAd8Q,UAC/EoC,EAAUwH,IAIhB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAWxI,QAAQ,YACf,kBAAC,IAAD,CACIsJ,cAAeF,EAAc,GAAKA,EAAcC,EAChDhZ,QAASgZ,EAAW,GAAKD,IAAgBC,EACzCpb,SAAUkb,EACV3U,WAAY,CAAE,aAAc,0BAIhCkJ,EAAQ/N,KAAI,SAAC4Z,GACT,IAhBO7K,EAAUC,EAgBb6K,EAAcjM,IAAYgM,EAAI5L,IAAML,EAAQ,MADjC,EAEciM,EAArBtH,UACR,YAHe,SAIJ,kBAAC,IAAD,CACHtE,IAAK4L,EAAI5L,IACT8L,MAAOF,EAAIE,MAAQF,EAAIE,MAAO,OAC9BC,cAAenM,IAAYgM,EAAI5L,KAAML,GAErC,kBAAC,IAAD,CACIqM,OAAQpM,IAAYgM,EAAI5L,IACxBiM,UAAWJ,EACXjP,SA3BLmE,EA2BgC6K,EAAI5L,IA3B1BgB,EA2B8C,SAAf6K,EAAwB,MAAM,OA3BpD,SAAAnL,GAC1C6K,EAAO7K,EAAOK,EAAUC,MA4BK4K,EAAI1V,MACJ0J,IAAYgM,EAAI5L,IACb,0BAAMxP,UAAW6S,EAAQ6H,gBACV,SAAVvL,EAAmB,oBAAsB,oBAE9C,OAIL,kBAAC,IAAD,CACHK,IAAK4L,EAAI5L,IACT8L,MAAOF,EAAIE,MAAQF,EAAIE,MAAO,OAC9BC,cAAenM,IAAYgM,EAAI5L,KAAML,GAEpCiM,EAAI1V,eAOHrC,IAAdoN,GAA2B,kBAAC,IAAD,CAAW6K,MAAM,SAAQ,kBAAC,IAAD,CAAOI,QAAQ,aAAf,cAOlEC,EAAY,SAAAhc,GAAU,IAChB4P,EAAyG5P,EAAzG4P,QAASvP,EAAgGL,EAAhGK,UAAWgQ,EAAqFrQ,EAArFqQ,OAAQnP,EAA6ElB,EAA7EkB,KAAMP,EAAuEX,EAAvEW,OAAQmQ,EAA+D9Q,EAA/D8Q,UAAWR,EAAoDtQ,EAApDsQ,aAAcG,EAAsCzQ,EAAtCyQ,oBAAqBE,EAAiB3Q,EAAjB2Q,aADzE,EAESrQ,mBAAS,IAFlB,mBAEhB8T,EAFgB,KAENC,EAFM,KAGjBnB,EAAUwH,IA8BhB,OAAO,kBAAC,WAAD,KACH,kBAAC,IAAD,CAAgBra,UAAW6S,EAAQjN,WAC/B,kBAAC,IAAD,CACI5F,UAAS,yBAA6BqD,IAAdrD,EAA0B,GAAKA,GACvD4b,kBAAgB,aAChBC,cAAY,GAEZ,kBAACf,EAAD,iBACQnb,EADR,CAEIwP,MAAQ7O,EAAO6O,MACfC,QAAU9O,EAAO8O,QACjB6L,YAAclH,EAAS7I,OACvBgQ,SAAWra,EAAKqK,OAChB8P,YAAa,SAACzZ,KAGdwZ,OAAQzK,KAEZ,kBAAC,IAAD,KAEIzP,EAAKW,KAAI,SAAC8H,EAAKiP,GACX,IAlDD3Y,EAkDO8U,GAlDP9U,EAkDmCiD,IAAEkC,IAAIuE,EAAI0G,EAAO,KAlDhB,IAA5B+D,EAASG,QAAQtU,IAmDlBkc,EAAO,kCAA8BvD,GAC3C,OACI,kBAAC,IAAD,CACIwD,OAAK,EACL3P,QAAS,SAAA8D,GAAK,OAtDtB,SAACA,EAAOtQ,GACxB,IAAMqU,EAAgBF,EAASG,QAAQtU,GACnCuU,EAAc,IAEK,IAAnBF,EACFE,EAAcA,EAAYC,OAAOL,EAAUnU,GAChB,IAAlBqU,EACTE,EAAcA,EAAYC,OAAOL,EAASM,MAAM,IACvCJ,IAAkBF,EAAS7I,OAAS,EAC7CiJ,EAAcA,EAAYC,OAAOL,EAASM,MAAM,GAAI,IAC3CJ,EAAgB,IACzBE,EAAcA,EAAYC,OACxBL,EAASM,MAAM,EAAGJ,GAClBF,EAASM,MAAMJ,EAAgB,KAInCD,EAAYG,GAqC8B6H,CAAY9L,EAAOrN,IAAEkC,IAAIuE,EAAI0G,EAAO,MACtDiM,KAAK,WACLC,UAAW,EACXC,eAAczH,EACdlF,IAAKlG,EAAI1J,KACTmU,SAAUW,GAEV,kBAAC,IAAD,CAAW7C,QAAQ,YACf,kBAAC,IAAD,CACA3P,QAASwS,EACTrO,WAAY,CAAE,kBAAmByV,MAIjCvM,EAAQ/N,KAAI,SAAC4Z,GACT,YACmB/X,IAAf+X,EAAI3L,QACoB,mBAAd2L,EAAI3L,OAGV,kBAAC,IAAD,KAAa5M,IAAEkC,IAAIuE,EAAI8R,EAAI5L,IAAI,KAG5B,kBAAC,IAAD,KACD4L,EAAI3L,OAAOnG,EAAKzG,IAAEkC,IAAIuE,EAAI8R,EAAI5L,IAAI,gBAOlCnM,IAAdoN,GAA2B,kBAAC,IAAD,CAAW6K,MAAM,SAAU7K,EAAUnH,WAS5F,kBAAC,IAAD,CACE8S,mBAAoB,CAAC,EAAG,GAAI,IAC5B7V,UAAU,MACVsJ,MAAOvP,EAAO+O,MACdgN,YAAa/b,EAAOD,SAEpBic,KAAMhc,EAAOF,QAAQ,EACrB6P,aAAcA,EACdG,oBAAqBA,MAI/BuL,EAAUY,UAAY,CAClB9L,UAAW+L,IAAUC,KACrBlN,QAASiN,IAAUE,MAAMC,WACzBrc,OAAQkc,IAAUI,OAAOD,WACzB3M,OAAQwM,IAAUK,OAAOF,WACzB1M,aAAcuM,IAAUC,KAAKE,WAC7BvM,oBAAqBoM,IAAUC,KAAKE,WACpCrM,aAAckM,IAAUC,KAAKE,WAC7B9b,KAAM2b,IAAUE,OAELf,O,+FCzKAmB,IAtCG,SAAAnd,GAAU,IAAD,EAEKM,mBAAS,IAFd,mBAEhB8c,EAFgB,KAERC,EAFQ,KAIflN,EAAwCnQ,EAAxCmQ,SAJe,EAIyBnQ,EAA9B8J,mBAJK,MAIS,YAJT,EASvB,OAAO,kBAAC,IAAD,CACHtD,KAAK,OACLrG,SAAU,SAACyB,GAAMyb,EAAUzb,EAAEU,OAAOpC,QACpCA,MAAOkd,EACP5b,QAAQ,WACRnB,UAAU,aACVid,WAAY,SAAC1b,GACG,UAAVA,EAAEiO,MACJjO,EAAEwC,iBACF+L,EAASiN,KAGbtJ,WAAY,CACRzT,UAAW,aACXkd,eACE,kBAAC,IAAD,CACE9Q,QAnBU,SAAC7K,GACnBuO,EAASiN,IAmBD3Y,SAAS,SACL,kBAAC,IAAD,QAIZqF,YAAaA,M,+BCrCrB,oCAmBe0T,IAfW,SAACxd,GAAW,IAC1Bya,EAAuEza,EAAvEya,SADyB,EAC8Cza,EAA7D+F,aADe,MACT,GADS,IAC8C/F,EAAnDI,gBADK,WAC8CJ,EAAjC0N,aADb,WAC8C1N,EAApByB,iBAD1B,SAGjC,OAAO,kBAAC,IAAD,CAAMwE,WAAS,EAAC5F,UAAS,wBAEvBoB,GAAa,kBAAC,IAAD,CAAM2E,MAAI,EAACE,GAAIoH,EAAQ,EAAG,GACpC,kBAAC,IAAD,CAAWrN,UAAS,qBAAgBD,EAAW,WAAa,KAAQ2F,IAG5E,kBAAC,IAAD,CAAMK,MAAI,EAACE,GAAIoH,EAAQ,EAAI,GACrB+M,M,qKCFRxJ,EAAWC,YAAW,CACxBuM,OAAQ,CACJ5L,QAAS,QAEb6L,QAAS,CACL9O,OAAQ,EACRsF,WAAY,UAEhByJ,gBAAiB,CACb/O,OAAQ,QACRF,MAAO,QACPjK,SAAU,YAEdmZ,aAAc,CACVnZ,SAAU,WACVyW,IAAK,MACL2C,KAAM,MACNlR,YAAa,OACbmR,UAAW,yBAEfC,uBAAwB,CACpBnP,OAAQ,QACRF,MAAO,QACPsP,OAAQ,EACRpM,SAAU,SACVF,eAAgB,QAChBD,iBAAkB,aAEtBwM,aAAc,CACVC,UAAW,OACXC,SAAU,QAEdC,aAAc,CACV3Z,SAAU,WACVyW,IAAK,IACLmD,MAAO,IACPP,UAAW,wBAEfQ,MAAO,CACHzM,QAAS,OACTC,WAAY,SACZyM,eAAgB,YA+FTC,IA5FI,SAAAxe,GAAU,IAAD,EAECM,mBAAS,MAFV,mBAEXme,GAFW,WAGhBxe,EAA+DD,EAA/DC,KAAME,EAAyDH,EAAzDG,SAAUgZ,EAA+CnZ,EAA/CmZ,KAAM9O,EAAyCrK,EAAzCqK,aAAcnK,EAA2BF,EAA3BE,MAHpB,EAG+CF,EAApBwM,gBAH3B,WAKMlM,mBAAS,MALf,mBAKjBod,EALiB,KAKRgB,EALQ,OAMMpe,mBAASsH,MAASc,OAAO,mBAN/B,mBAMjBiW,EANiB,KAMRC,EANQ,OAOAte,oBAAS,GAPT,mBAOjB0Y,EAPiB,KAOXC,EAPW,KAQlB/F,EAAUjC,IAChBrQ,qBAAU,WACN8d,EAAWxe,KACb,CAACA,IACH,IA2BM2e,EAAc,WAChB5F,GAAQ,IAGZ,OAAO,kBAAC,WAAD,KACH,2BACI6F,OAAO,UACP/c,GAAG,oBACH5B,SAnCa,SAACyB,GAClB,IAAI1B,EAAQ0B,EAAEU,OAAOyc,MAAM,GACvBC,EAAS,IAAIC,WACPD,EAAOE,cAAchf,GAC/B8e,EAAOG,UAAY,SAAUvd,GACzB8c,EAAWM,EAAO/d,SACpBwE,U,GACFpE,QAAQC,IAAI,eACKoC,IAAbvD,GAA6C,mBAAZA,IAEjCA,EAASF,EAAKC,QACOwD,IAAjB2G,GAA4BkQ,YAAW,WAAKpa,EAASkK,GAAa,KAAS,OAyB/E7D,KAAK,OACLqJ,IAAK8O,EACLte,UAAW6S,EAAQuK,SAEvB,kBAAC,IAAD,CAAOpd,UAAW6S,EAAQyK,iBAElBD,EAAU,kBAAC,IAAD,CAAY9T,MAAM,YAAYvJ,UAAW6S,EAAQkL,aAAc5R,SAAUA,EAAU5F,UAAU,OAAO6F,QA3BrG,SAAC7K,GAClB6c,EAAS,MACTG,EAAWhX,MAASc,OAAO,mBAC3BgW,EAAW,MACXrd,QAAQC,IAAI,kBACKoC,IAAbvD,GAA6C,mBAAZA,IAEjCA,EAASF,EAAM,WACMyD,IAAjB2G,GAA4BkQ,YAAW,WAAKpa,EAASkK,GAAa,KAAQ,QAoBtE,kBAAC,IAAD,OACY,2BAAO+U,QAAQ,oBAAoB/e,UAAW6S,EAAQ0K,cAClE,kBAAC,IAAD,CAAYhU,MAAM,UAAUhD,UAAU,OAAO4F,SAAUA,QACzC9I,IAATyV,EAAqB,kBAAC,IAAD,MAAoB,kBAAC,YAAD,CAAWvS,UAAWuS,MAKxEuE,GAAW,kBAAC,IAAD,CAAOrd,UAAW6S,EAAQ6K,uBACjC7X,MAAOwX,EAAU,CACblM,gBAAgB,OAAD,OAASkM,EAAT,MACf,GACJjR,QAAS,SAAC7K,GACNqX,GAAQ,MAMpB,kBAAC,IAAD,CACID,KAAMA,EACNjU,QAAS8Z,EACTQ,gBAAiBR,EACjBS,sBAAoB,EACpBjf,UAAW6S,EAAQoL,MACnBiB,kBAAmBC,IACnBvD,kBAAgB,yBAChBwD,mBAAiB,gCAEjB,kBAAC,IAAD,CAAMjG,GAAIR,GACN,yBAAK0G,IAAKhC,EAASrd,UAAW6S,EAAQ+K,sB","file":"static/js/main.51969e82.chunk.js","sourcesContent":["import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Select, MenuItem } from '@material-ui/core';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Loader from '../../components/Loader';\r\nimport Alert from '../../components/Alert';\r\n\r\nconst UserGroupSelector = (props) => {\r\n    const { name, value, onChange, required, className=\"\" } = props;\r\n    const [options, setOptions] = useState([]);\r\n\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 50\r\n    }); \r\n\r\n    const GetData = () => {\r\n        let url = `user_groups?page=${paging.current}&size=${paging.pageSize}&order=name&sort=asc`;\r\n        // if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                setOptions(result.data);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    const loadMoreItems = (e) => {\r\n        console.log(e);\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n\r\n    return(<Fragment>\r\n        <Select\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            className={className}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            MenuProps={{\r\n                onScroll:loadMoreItems\r\n            }}\r\n        >\r\n            <MenuItem value={null}></MenuItem>\r\n            {\r\n                options.map((option)=>{\r\n                    return (<MenuItem value={option.id}>{option.name}</MenuItem>)\r\n                })\r\n            }\r\n        </Select>\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(UserGroupSelector);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControlLabel, FormControl, FormHelperText, Checkbox } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditAccount extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                bank:\"\",\r\n                bank_no:\"\",\r\n                remark: \"\",\r\n                is_default: false\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`accounts/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.bank) errors.bank = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            console.log(content);\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`accounts${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/accounts/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        let allowSave = true;\r\n        if (id === undefined) {\r\n            allowSave = global.Accessible(\"POST_ACCOUNT\");\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_ACCOUNT\");\r\n        }\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_accounts\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_accounts\"), href:\"/accounts\" },\r\n                        { label: id === undefined ? t(\"lb_new_accounts\") : t(\"lb_edit_accounts\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_bank')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"bank\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"bank\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"bank\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_bank_no')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"bank_no\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"bank_no\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"bank_no\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_remark')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"remark\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"remark\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"remark\",\"\")}\r\n                                            multiline\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_is_default')}:` }\r\n                                    >\r\n                                        <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Checkbox \r\n                                                        checked={content.is_default} \r\n                                                        onChange={this.handleOnChecked(\"is_default\")} \r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </FormControl>\r\n                                        <FormHelperText className=\"error\">{_.get(errors, \"is_default\",\"\")}</FormHelperText>\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                    <FormButtonGroup\r\n                                        allowSave={ allowSave }\r\n                                        onCancel={(e) => {\r\n                                            e.preventDefault()\r\n                                            window.location.href=\"/accounts\"\r\n                                        }}\r\n                                    >\r\n                                        \r\n                                    </FormButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditAccount);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, Radio, RadioGroup, FormControlLabel, FormControl, Switch, Select, MenuItem, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n    DatePicker\r\n} from '@material-ui/pickers';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport FileUpload from '../../components/FileUpload';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditMember extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_surname:\"\",\r\n                en_surname:\"\",\r\n                zh_first_name:\"\",\r\n                en_first_name:\"\",\r\n                member_ref: \"\",\r\n                hkid:\"\",\r\n                yob:\"\",\r\n                dob: null,\r\n                email:\"\",\r\n                home_address:\"\",\r\n                department: \"\",\r\n                mobile:\"\",\r\n                gender:\"\",\r\n                comnpany:\"\",\r\n                job_title:\"\",\r\n                office_address:\"\",\r\n                office_phone: \"\",\r\n                employment_terms:\"\",\r\n                emergency_contact: \"\",\r\n                emergency_relation: \"\",\r\n                emergency_number: \"\",\r\n                profile: \"\",\r\n                profile_file: null,\r\n                subscription:true,\r\n                sent_group_invite: false,\r\n                password: null,\r\n                password_confirmation: null,\r\n                remark: \"\",\r\n                delete_profile: false,\r\n                is_actived:true\r\n            },\r\n            errors: {},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`members/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"profile\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"dob\": r[k] = moment(v); break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n        console.log(content);\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.zh_surname) errors.zh_surname = t(\"field_error_required\");\r\n        if (!values.zh_first_name) errors.zh_first_name = t(\"field_error_required\");\r\n        if (!values.en_surname) errors.en_surname = t(\"field_error_required\");\r\n        if (!values.en_first_name) errors.en_first_name = t(\"field_error_required\");\r\n        if (!values.email) errors.email = t(\"field_error_required\");\r\n        if (!values.hkid) errors.hkid = t(\"field_error_required\");\r\n        if (!values.dob) \r\n            errors.dob = t(\"field_error_required\");\r\n        else if(!moment(values.paid_at).isValid())\r\n            errors.dob = t(\"field_error_invalid\");\r\n\r\n        if (!values.home_address) errors.home_address = t(\"field_error_required\");\r\n        if (!values.mobile) errors.mobile = t(\"field_error_required\");\r\n        if (!values.gender) errors.gender = t(\"field_error_required\");\r\n        if (!values.comnpany) errors.comnpany = t(\"field_error_required\");\r\n        if (!values.job_title) errors.job_title = t(\"field_error_required\");\r\n        if (!values.office_address) errors.office_address = t(\"field_error_required\");\r\n        if (!values.employment_terms) errors.employment_terms = t(\"field_error_required\");\r\n\r\n        if (values.password) {\r\n            if (!values.password_confirmation) {\r\n                errors.password_confirmation = t(\"field_error_required\");\r\n            } else if (values.password != values.password_confirmation) {\r\n                errors.password_confirmation = t(\"field_password_confirmation_not_match\");\r\n            }\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            console.log(content);\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"dob\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            data.append(\"yob\",d.format(\"YYYY\"));\r\n                            break;\r\n                        case \"profile_file\":\r\n                            data.append(\"profile\",v);\r\n                            break;\r\n                        case \"profile\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`members${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/members/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        let allowSave = true;\r\n        if (id === undefined) {\r\n            allowSave = global.Accessible(\"POST_MEMBER\");\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_MEMBER\");\r\n        }\r\n        \r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_members\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_members\"), href:\"/members\" },\r\n                        { label: id === undefined ? t(\"lb_new_members\") : t(\"lb_edit_members\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.zh_surname}\r\n                                                value={ _.get(content,\"zh_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.zh_first_name}\r\n                                                value={ _.get(content,\"zh_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.en_surname}\r\n                                                value={ _.get(content,\"en_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.en_first_name}\r\n                                                value={ _.get(content,\"en_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_email')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"email\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.email}\r\n                                                value={ _.get(content,\"email\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"email\"\r\n                                                helperText={_.get(errors, \"email\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_mobile')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"mobile\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.mobile}\r\n                                                value={ _.get(content,\"mobile\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"phone\"\r\n                                                helperText={_.get(errors, \"mobile\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_home_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"home_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.home_address}\r\n                                                value={ _.get(content,\"home_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"home_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_gender')}:` }\r\n                                        >\r\n                                            <RadioGroup aria-label=\"gender\" name=\"gender\" \r\n                                                value={_.get(content,\"gender\", null)}\r\n                                                onChange={this.handleOnChange}\r\n                                                error={errors.gender}\r\n                                                row\r\n                                            >\r\n                                                <FormControlLabel\r\n                                                    value=\"F\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_female') }\r\n                                                    labelPlacement=\"end\"\r\n                                                    error={errors.gender}\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"M\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_male') }\r\n                                                    labelPlacement=\"end\"\r\n                                                    error={errors.gender}\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"O\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_other') }\r\n                                                    labelPlacement=\"end\"\r\n                                                    error={errors.gender}\r\n                                                />\r\n                                            </RadioGroup>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"gender\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_dob')}:` }\r\n                                        >\r\n                                            <DatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"dob\", null)}\r\n                                                placeholder=\"\"\r\n                                                required\r\n                                                openTo=\"year\"\r\n                                                views={[\"year\", \"month\"]}\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('dob') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                error={errors.dob}\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"dob\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_hkid')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"hkid\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.hkid}\r\n                                                value={ _.get(content,\"hkid\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"hkid\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_emergency_contact')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"emergency_contact\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.emergency_contact}\r\n                                                value={ _.get(content,\"emergency_contact\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"emergency_contact\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_emergency_relation')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"emergency_relation\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.emergency_relation}\r\n                                                value={ _.get(content,\"emergency_relation\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"emergency_relation\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_emergency_number')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"emergency_number\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.emergency_number}\r\n                                                value={ _.get(content,\"emergency_number\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"emergency_number\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_comnpany')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"comnpany\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.comnpany}\r\n                                                value={ _.get(content,\"comnpany\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"comnpany\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_office_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.office_address}\r\n                                                value={ _.get(content,\"office_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_job_title')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"job_title\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"job_title\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                error={errors.job_title}\r\n                                                helperText={_.get(errors, \"job_title\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_employment_terms')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"employment_terms\",\"\")}\r\n                                                name=\"employment_terms\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.employment_terms}\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value=\"Permanent\">長工 Permanent</MenuItem>\r\n                                                <MenuItem value=\"General Contract\">一般合約  General Contract</MenuItem>\r\n                                                <MenuItem value=\"Self-Employed\">自僱 Self-Employed</MenuItem>\r\n                                                <MenuItem value=\"Non-Civil Service Contract\">非公務員合約制 Non-Civil Service Contract</MenuItem>\r\n                                                <MenuItem value=\"Gov T-Contract\">Gov T-Contract</MenuItem>\r\n                                                <MenuItem value=\"Civil Servant\">公務員 Civil Servant</MenuItem>\r\n                                                <MenuItem value=\"Part-time\">兼職 Part-time</MenuItem>\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"office_address\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_office_phone')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_phone\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={errors.office_phone}\r\n                                                value={ _.get(content,\"office_phone\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_phone\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_department')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"department\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.office_phone }\r\n                                                value={ _.get(content,\"department\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                error={errors.department}\r\n                                                helperText={_.get(errors, \"department\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_profile')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"profile\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                name=\"profile_file\"\r\n                                                error={errors.profile_file}\r\n                                                deletedField=\"delete_profile\"\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"profile_file\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_remark')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"remark\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"remark\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                error={errors.remark}\r\n                                                helperText={_.get(errors, \"remark\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12}><hr /></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_member_ref')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"member_ref\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"member_ref\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                error={errors.member_ref}\r\n                                                helperText={_.get(errors, \"member_ref\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: true\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_is_actived')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.is_actived} \r\n                                                onChange={this.handleOnChecked(\"is_actived\")} \r\n                                                name=\"is_actived\"\r\n                                                error={errors.is_actived}\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"is_actived\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_password')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"password\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"password\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"password\"\r\n                                                error={errors.password}\r\n                                                helperText={_.get(errors, \"password\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required={content.password}\r\n                                            label={ `${t('input_password_confirmation')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"password_confirmation\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                required={content.password}\r\n                                                value={ _.get(content,\"password_confirmation\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"password\"\r\n                                                error={errors.password_confirmation}\r\n                                                helperText={_.get(errors, \"password_confirmation\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_subscription')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_confirmation} \r\n                                                onChange={this.handleOnChecked(\"subscription\")} \r\n                                                name=\"subscription\"\r\n                                                error={errors.subscription}\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"subscription\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_group_invite')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_confirmation} \r\n                                                onChange={this.handleOnChecked(\"sent_group_invite\")} \r\n                                                name=\"sent_group_invite\"\r\n                                                error={errors.sent_group_invite}\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_group_invite\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            allowSave={allowSave}\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/members\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditMember);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button, Select, MenuItem } from '@material-ui/core';\r\nimport { TextField, FormControl, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport FileUpload from '../../components/FileUpload';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditClaims extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                invoice_number: \"\",\r\n                item_name: \"\",\r\n                item_type: \"\",\r\n                provider: \"\",\r\n                payment_method: \"\",\r\n                description: \"\",\r\n                paid_by: \"\",\r\n                paid_at: moment(),\r\n                approved_by: \"\",\r\n                approved_at: null,\r\n                handled_by: \"\",\r\n                handled_at: null,\r\n                receipt: null,\r\n                transaction_date: null,\r\n                receipt_file: null,\r\n                delete_receipt: false,\r\n                amount: 0,\r\n                status: \"New\",\r\n                is_approved: false,\r\n                is_handled: false\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnApprove = this.handleOnApprove.bind(this);\r\n        this.handleOnHandle = this.handleOnHandle.bind(this);\r\n        this.handleOnReject = this.handleOnReject.bind(this);\r\n        this.handleOnCancel = this.handleOnCancel.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`claims/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"paid_at\": r[k] = moment(v); break;\r\n                                    case \"receipt\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"amount\": r[k] = parseFloat(v); break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.invoice_number) errors.invoice_number = t(\"field_error_required\");\r\n        if (!values.item_name) errors.item_name = t(\"field_error_required\");\r\n        if (!values.item_type) errors.item_type = t(\"field_error_required\");\r\n        if (!values.provider) errors.provider = t(\"field_error_required\");\r\n        if (!values.paid_by) errors.paid_by = t(\"field_error_required\");\r\n        if (!values.paid_at) errors.paid_at = t(\"field_error_required\");\r\n        if (values.amount == \"\") errors.amount = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            console.log(content);\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"paid_at\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            break;\r\n                        case \"receipt_file\":\r\n                            data.append(\"receipt\",v);\r\n                            break;\r\n                        case \"receipt\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`claims${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnCancel = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`claims/cancel/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_cancelled\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnReject = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`claims/reject/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_rejected\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnApprove = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        // Check Approved data\r\n        const {content} = this.state;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n\r\n        if (!content.approved_at) errors.approved_at = t(\"field_error_required\");\r\n        if (!content.approved_by) errors.approved_by = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        if (Object.keys(errors).length > 0) {\r\n            toast.error(t(\"form_invalid\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        \r\n        \r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`claims/approve/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_approved\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n    handleOnHandle = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        // Check data\r\n        const {content} = this.state;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n\r\n        if (!content.handled_at) errors.handled_at = t(\"field_error_required\");\r\n        if (!content.handled_by) errors.handled_by = t(\"field_error_required\");\r\n        if (!content.transaction_date) errors.transaction_date = t(\"field_error_required\");\r\n        \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        if (Object.keys(errors).length > 0) {\r\n            toast.error(t(\"form_invalid\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        \r\n        \r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`claims/handle/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_handled\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/claims/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        let allowSave = true;\r\n        if (id === undefined) {\r\n            allowSave = global.Accessible(\"POST_CLAIM\");\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_CLAIM\");\r\n        }\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_claims\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_claims\"), href:\"/claims\" },\r\n                        { label: id === undefined ? t(\"lb_new_claims\") : t(\"lb_edit_claims\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_invoice_number')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"invoice_number\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"invoice_number\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"invoice_number\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"invoice_number\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_provider')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"provider\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"provider\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"provider\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"provider\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_item_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"item_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                multiline\r\n                                                error={_.get(errors, \"item_name\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"item_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"item_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_item_type')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"item_type\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"item_type\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"item_type\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"item_type\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_payment_method')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"payment_method\",\"\")}\r\n                                                name=\"payment_method\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"payment_method\",\"\") != \"\"}\r\n                                                error={ errors.payment_method }\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value={null}></MenuItem>\r\n                                                {\r\n                                                    global.payment_methods.map((p)=>{\r\n                                                        return (<MenuItem value={p.value}>{p.label}</MenuItem>);\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"payment_method\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_amount')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"amount\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"amount\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"number\"\r\n                                                error={_.get(errors, \"amount\",\"\") != \"\"}\r\n                                                helperText={_.get(errors, \"amount\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved,\r\n                                                    step:0.01,\r\n                                                    min:0\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_paid_by')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"paid_by\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"paid_by\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"paid_by\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"paid_by\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    readOnly: content.is_approved,\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_paid_at')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"paid_at\", null)}\r\n                                                placeholder=\"\"\r\n                                                required\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('paid_at') }\r\n                                                error={_.get(errors, \"paid_at\",\"\") != \"\"}\r\n                                                maxDate={new Date()}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    disabled: content.is_approved,\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"paid_at\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_approved_by')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"approved_by\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"approved_by\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"approved_by\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"approved_by\",\"\")}\r\n                                                inputProps={{\r\n                                                    readOnly: content.is_approved,\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_approved_at')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"approved_at\", null)}\r\n                                                placeholder=\"\"\r\n                                                inputVariant=\"outlined\"\r\n                                                error={_.get(errors, \"approved_at\",\"\") != \"\"}\r\n                                                onChange={ this.handleOnDateChange('approved_at') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    disabled: content.is_approved,\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"approved_at\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_handled_by')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"handled_by\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"handled_by\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                error={_.get(errors, \"handled_by\",\"\") != \"\"}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"handled_by\",\"\")}\r\n                                                inputProps={{\r\n                                                    readOnly: content.is_handled,\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_handled_at')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"handled_at\", null)}\r\n                                                placeholder=\"\"\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('handled_at') }\r\n                                                maxDate={new Date()}\r\n                                                error={_.get(errors, \"handled_at\",\"\") != \"\"}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    disabled: content.is_handled,\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"handled_at\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_transaction_date')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"transaction_date\", null)}\r\n                                                placeholder=\"\"\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('transaction_date') }\r\n                                                maxDate={new Date()}\r\n                                                error={_.get(errors, \"transaction_date\",\"\") != \"\"}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    disabled: content.is_handled,\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"transaction_date\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_receipt')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"receipt\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                error={_.get(errors, \"receipt_file\",\"\") != \"\"}\r\n                                                name=\"receipt_file\"\r\n                                                deletedField=\"delete_receipt\"\r\n                                                disabled={content.is_approved}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"receipt_file\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_description')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"description\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"description\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"description\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"description\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    \r\n                                    \r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={6} xs={6}>\r\n                                    {\r\n                                        (id !== undefined && content.is_approved && !content.is_handled && global.Accessible(\"HANDLE_CLAIM\")) && <Button \r\n                                            onClick={this.handleOnHandle}\r\n                                            color=\"primary\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                            style={{\r\n                                                marginRight: \"15px\"\r\n                                            }}\r\n                                        >\r\n                                            Handle\r\n                                        </Button>\r\n                                    }\r\n                                    {\r\n                                        (id !== undefined && !content.is_approved && global.Accessible(\"APPROVE_CLAIM\") ) && <Button \r\n                                            onClick={this.handleOnApprove}\r\n                                            color=\"primary\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                            style={{\r\n                                                marginRight: \"15px\"\r\n                                            }}\r\n                                        >\r\n                                            Approve\r\n                                        </Button>\r\n                                    }\r\n                                    {\r\n                                        (id !== undefined && content.status == \"New\" && global.Accessible(\"REJECT_CLAIM\")) && <Button \r\n                                            onClick={this.handleOnReject}\r\n                                            color=\"secondary\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                            style={{\r\n                                                marginRight: \"15px\"\r\n                                            }}\r\n                                        >\r\n                                            Reject\r\n                                        </Button>\r\n                                    }\r\n                                    {\r\n                                        (id !== undefined && content.status == \"New\") && <Button \r\n                                            onClick={this.handleOnCancel}\r\n                                            color=\"inherit\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Cancelled\r\n                                        </Button>\r\n                                    }\r\n                                    \r\n                                    </Grid>\r\n                                    <Grid item sm={6} xs={6} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            allowSave={allowSave}\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/claims\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditClaims);","import React, { Component, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Grid, Card,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { \r\n    Radio, FormControlLabel, FormControl, MenuItem,\r\n    TextField, Select, RadioGroup, Switch, Checkbox, FormHelperText \r\n} from '@material-ui/core';\r\n\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n    DatePicker\r\n} from '@material-ui/pickers';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport FileUpload from '../../components/FileUpload';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditRegistration extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_surname:\"\",\r\n                en_surname:\"\",\r\n                zh_first_name:\"\",\r\n                en_first_name:\"\",\r\n                hkid:\"\",\r\n                yob:\"\",\r\n                dob: null,\r\n                email:\"\",\r\n                home_address:\"\",\r\n                mobile:\"\",\r\n                gender:\"\",\r\n                comnpany:\"\",\r\n                department:\"\",\r\n                job_title:\"\",\r\n                office_address:\"\",\r\n                office_phone:\"\",\r\n                employment_terms:\"\",\r\n                proof: \"\",\r\n                proof_file: null,\r\n                delete_proof: false,\r\n                declare:true,\r\n                agreement:true,\r\n                remark: \"\",\r\n                receipt_no: \"\",\r\n                status: \"New\",\r\n                payment_method: null,\r\n                paid: false,\r\n                paid_at: null,\r\n                sent_confirmation: false,\r\n                sent_payment_note: false,\r\n                sent_receipt: false\r\n            },\r\n            errors: {\r\n\r\n            },\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n    \r\n    componentWillMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`registrations/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"dob\": r[k] = moment(v); break;\r\n                                    case \"proof\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"audit\":\r\n                                        r = {\r\n                                            ...r,\r\n                                            ...v\r\n                                        }\r\n                                        break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.zh_surname) errors.zh_surname = t(\"field_error_required\");\r\n        if (!values.zh_first_name) errors.zh_first_name = t(\"field_error_required\");\r\n        if (!values.en_surname) errors.en_surname = t(\"field_error_required\");\r\n        if (!values.en_first_name) errors.en_first_name = t(\"field_error_required\");\r\n        if (!values.email) errors.email = t(\"field_error_required\");\r\n        if (!values.hkid) errors.hkid = t(\"field_error_required\");\r\n        if (!values.dob) \r\n            errors.dob = t(\"field_error_required\");\r\n        else if(!moment(values.dob).isValid())\r\n            errors.dob = t(\"field_error_invalid\");\r\n\r\n        if (!values.home_address) errors.home_address = t(\"field_error_required\");\r\n        if (!values.mobile) errors.mobile = t(\"field_error_required\");\r\n        if (!values.gender) errors.gender = t(\"field_error_required\");\r\n        if (!values.comnpany) errors.comnpany = t(\"field_error_required\");\r\n        if (!values.job_title) errors.job_title = t(\"field_error_required\");\r\n        if (!values.office_address) errors.office_address = t(\"field_error_required\");\r\n        \r\n        if (!values.office_phone && (!values.proof && !values.proof_file)) \r\n        {\r\n            errors.office_phone = t(\"field_phone_or_proof\");\r\n            errors.proof_file = t(\"field_phone_or_proof\");\r\n        }\r\n        if (!values.employment_terms) errors.employment_terms = t(\"field_error_required\");\r\n        if (!values.declare) errors.declare = t(\"field_error_required\");\r\n        if (!values.agreement) errors.agreement = t(\"field_error_required\");\r\n\r\n        // Audit use\r\n        if (values.paid) {\r\n            if (!values.paid_at) {\r\n                errors.paid_at = t(\"field_error_required\");\r\n            } else if (!moment(values.paid_at).isValid()) {\r\n                errors.paid_at = t(\"field_error_invalid\");\r\n            }\r\n            if (!values.payment_method) errors.payment_method = t(\"field_error_required\");\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"dob\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            data.append(\"yob\",d.format(\"YYYY\"));\r\n                            break;\r\n                        case \"proof_file\":\r\n                            data.append(\"proof\",v);\r\n                            break;\r\n                        case \"paid_at\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            break;\r\n                        case \"proof\":\r\n                        case \"auth\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`registrations${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnCancel = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`registrations/cancel/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_cancelled\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnWithdraw = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`registrations/withdraw/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_withdraw\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnApprove = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n        this.setState({\r\n            loading: true,\r\n        })\r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`registrations/approve/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_approved\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })  \r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/registrations/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        let allowSave = true;\r\n        let allowWithdraw = true;\r\n        let allowCancel = true;\r\n        let allowApprove = true;\r\n        if (id === undefined) {\r\n            allowSave = global.Accessible(\"POST_REGISTRATION\");\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_REGISTRATION\");\r\n        }\r\n        switch(content.status) {\r\n            case \"New\":\r\n                allowWithdraw = false;\r\n                break;\r\n            case \"Cancelled\":\r\n                allowWithdraw = false;\r\n                allowApprove = false;\r\n                allowCancel = false;\r\n                break;\r\n            case \"Completed\":\r\n                allowApprove = false;\r\n                allowCancel = false;\r\n                allowSave = global.Accessible(\"UPDATE_REGISTRATION_AFTER_APPROVED\");\r\n                break;\r\n            default:\r\n                allowCancel = false;\r\n                allowApprove = false;\r\n                break;\r\n        }\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_registrations\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_registrations\"), href:\"/registrations\" },\r\n                        { label: id === undefined ? t(\"lb_new_registrations\") : t(\"lb_edit_registrations\") }\r\n                    ]}\r\n                />\r\n                <form\r\n                    onSubmit={this.handleOnSubmit}\r\n                >\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.zh_surname }\r\n                                                value={ _.get(content,\"zh_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_zh_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"zh_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.zh_first_name }\r\n                                                value={ _.get(content,\"zh_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"zh_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_surname')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_surname\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.en_surname }\r\n                                                value={ _.get(content,\"en_surname\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_surname\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_en_first_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"en_first_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.en_first_name }\r\n                                                value={ _.get(content,\"en_first_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"en_first_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_email')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"email\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.email }\r\n                                                value={ _.get(content,\"email\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"email\"\r\n                                                helperText={_.get(errors, \"email\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_mobile')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"mobile\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.mobile }\r\n                                                value={ _.get(content,\"mobile\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"phone\"\r\n                                                helperText={_.get(errors, \"mobile\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_home_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"home_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.home_address }\r\n                                                value={ _.get(content,\"home_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"home_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_gender')}:` }\r\n                                        >\r\n                                            <RadioGroup aria-label=\"gender\" name=\"gender\" \r\n                                                value={_.get(content,\"gender\", null)}\r\n                                                onChange={this.handleOnChange}\r\n                                                row\r\n                                                error={ errors.gender }\r\n                                            >\r\n                                                <FormControlLabel\r\n                                                    value=\"F\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_female') }\r\n                                                    labelPlacement=\"end\"\r\n                                                    error={ errors.gender }\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"M\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_male') }\r\n                                                    labelPlacement=\"end\"\r\n                                                    error={ errors.gender }\r\n                                                />\r\n                                                <FormControlLabel\r\n                                                    value=\"O\"\r\n                                                    control={<Radio color=\"primary\" />}\r\n                                                    label={ t('radio_other') }\r\n                                                    labelPlacement=\"end\"\r\n                                                    error={ errors.gender }\r\n                                                />\r\n                                            </RadioGroup>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"gender\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_dob')}:` }\r\n                                        >\r\n                                            <DatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"dob\", null)}\r\n                                                placeholder=\"\"\r\n                                                required\r\n                                                openTo=\"year\"\r\n                                                views={[\"year\",\"month\"]}\r\n                                                error={ errors.dob }\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('dob') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"MM/YYYY\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"dob\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_hkid')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"hkid\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.hkid }\r\n                                                value={ _.get(content,\"hkid\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"hkid\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_comnpany')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"comnpany\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.comnpany }\r\n                                                value={ _.get(content,\"comnpany\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"comnpany\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_office_address')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_address\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.office_address }\r\n                                                value={ _.get(content,\"office_address\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_address\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_job_title')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"job_title\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.job_title }\r\n                                                value={ _.get(content,\"job_title\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"job_title\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_employment_terms')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"employment_terms\",\"\")}\r\n                                                name=\"employment_terms\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.employment_terms }\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value=\"Permanent\">長工 Permanent</MenuItem>\r\n                                                <MenuItem value=\"General Contract\">一般合約  General Contract</MenuItem>\r\n                                                <MenuItem value=\"Self-Employed\">自僱 Self-Employed</MenuItem>\r\n                                                <MenuItem value=\"Non-Civil Service Contract\">非公務員合約制 Non-Civil Service Contract</MenuItem>\r\n                                                <MenuItem value=\"Gov T-Contract\">Gov T-Contract</MenuItem>\r\n                                                <MenuItem value=\"Civil Servant\">公務員 Civil Servant</MenuItem>\r\n                                                <MenuItem value=\"Part-time\">兼職 Part-time</MenuItem>\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"employment_terms\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_office_phone')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"office_phone\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.office_phone }\r\n                                                value={ _.get(content,\"office_phone\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"office_phone\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_department')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"department\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.department }\r\n                                                value={ _.get(content,\"department\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"department\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_status')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"status\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.status }\r\n                                                value={ _.get(content,\"status\",\"\")}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"status\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: true\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_proof')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"proof\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                name=\"proof_file\"\r\n                                                deletedField=\"delete_proof\"\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_remark')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"remark\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.remark }\r\n                                                value={ _.get(content,\"remark\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"remark\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={11} xs={11} spacing={1}>\r\n                                        <FormItemContainer large>\r\n                                            <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Checkbox \r\n                                                            checked={content.declare} \r\n                                                            onChange={this.handleOnChecked(\"declare\")} \r\n                                                        />\r\n                                                    }\r\n                                                    label={ t(\"input_declare\") }\r\n                                                />\r\n                                            </FormControl>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"declare\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={11} xs={11} spacing={1}>\r\n                                        <FormItemContainer large>\r\n                                            <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                                <FormControlLabel\r\n                                                    control={\r\n                                                        <Checkbox \r\n                                                            checked={content.agreement} \r\n                                                            onChange={this.handleOnChecked(\"agreement\")} \r\n                                                        />\r\n                                                    }\r\n                                                    label={ t(\"input_agreement\") }\r\n                                                />\r\n                                            </FormControl>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"agreement\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={12} xs={12}><hr /></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_confirmation')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_confirmation} \r\n                                                onChange={this.handleOnChecked(\"sent_confirmation\")} \r\n                                                name=\"sent_confirmation\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_confirmation\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_paid')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.paid} \r\n                                                onChange={this.handleOnChecked(\"paid\")} \r\n                                                name=\"paid\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"paid\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_payment_note')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_payment_note} \r\n                                                onChange={this.handleOnChecked(\"sent_payment_note\")} \r\n                                                name=\"sent_payment_note\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_payment_note\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required={content.paid}\r\n                                            label={ `${t('input_paid_at')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"paid_at\", null)}\r\n                                                placeholder=\"\"\r\n                                                error={ errors.paid_at }\r\n                                                required={content.paid}\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('paid_at') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\"\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"paid_at\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={5} xs={11} spacing={1}></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required={content.paid}\r\n                                            label={ `${t('input_payment_method')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"payment_method\",\"\")}\r\n                                                name=\"payment_method\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.payment_method }\r\n                                                required={content.paid}\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value={null}></MenuItem>\r\n                                                {\r\n                                                    global.payment_methods.map((p)=>{\r\n                                                        return (<MenuItem value={p.value}>{p.label}</MenuItem>);\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"payment_method\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_sent_receipt')}:` }\r\n                                        >\r\n                                            <Switch\r\n                                                checked={content.sent_receipt} \r\n                                                onChange={this.handleOnChecked(\"sent_receipt\")} \r\n                                                name=\"sent_receipt\"\r\n                                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"sent_receipt\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}></Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_receipt_no')}:` }\r\n                                            required={content.sent_receipt}\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"receipt_no\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={ errors.receipt_no }\r\n                                                value={ _.get(content,\"receipt_no\",\"\")}\r\n                                                required={content.sent_receipt}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"receipt_no\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={6} xs={6}>\r\n                                    {\r\n                                        id !== undefined && <Fragment>\r\n                                            {\r\n                                                (content.status != \"Completed\" && global.Accessible(\"APPROVE_REGISTRATION\") && allowApprove) && <Button \r\n                                                        onClick={this.handleOnApprove}\r\n                                                        color=\"primary\"\r\n                                                        size=\"middle\"\r\n                                                        variant=\"contained\"\r\n                                                        style={{\r\n                                                            marginRight: \"15px\"\r\n                                                        }}\r\n                                                    >\r\n                                                    Approve\r\n                                                </Button>\r\n                                            }\r\n                                            {\r\n                                                (content.status != \"Cancelled\" && global.Accessible(\"CANCEL_REGISTRATION\") && allowCancel) && <Button \r\n                                                        onClick={this.handleOnCancel}\r\n                                                        color=\"secondary\"\r\n                                                        size=\"middle\"\r\n                                                        variant=\"contained\"\r\n                                                        style={{\r\n                                                            marginRight: \"15px\"\r\n                                                        }}\r\n                                                    >\r\n                                                    Cancelled\r\n                                                </Button>\r\n                                            }\r\n                                            {\r\n                                                (content.status != \"Withdraw\" && global.Accessible(\"WITHDRAW_REGISTRATION\") && allowWithdraw) && <Button \r\n                                                        onClick={this.handleOnWithdraw}\r\n                                                        color=\"inherit\"\r\n                                                        size=\"middle\"\r\n                                                        variant=\"contained\"\r\n                                                    >\r\n                                                    Withdraw\r\n                                                </Button>\r\n                                            }\r\n                                        </Fragment>\r\n                                    }\r\n                                    </Grid>\r\n                                    <Grid item sm={6} xs={6} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            allowSave={allowSave}\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/registrations\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditRegistration);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControl, FormLabel, Select, MenuItem, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from 'moment';\r\nimport AccountSelector from '../../components/AccountSelector';\r\nimport FileUpload from '../../components/FileUpload';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\nimport { toast } from 'react-toastify';\r\nclass EditTransition extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                account_id: \"\",\r\n                account: {},\r\n                invoice_number: \"\",\r\n                item_name: \"\",\r\n                item_type: \"\",\r\n                payment_method: \"\",\r\n                provider: \"\",\r\n                approved_by: \"\",\r\n                approved_at: null,\r\n                description: \"\",\r\n                transaction_date: null,\r\n                receipt: null,\r\n                receipt_file: null,\r\n                delete_receipt: false,\r\n                amount: 0\r\n            },\r\n            errors: {},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnApprove = this.handleOnApprove.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`transactions/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"transaction_date\": r[k] = moment(v); break;\r\n                                    case \"receipt\": r[k] = _.get(v,\"original\",\"\"); break;\r\n                                    case \"amount\": r[k] = parseFloat(v); break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.item_name) errors.item_name = t(\"field_error_required\");\r\n        if (!values.account_id) errors.account_id = t(\"field_error_required\");\r\n        if (!values.item_type) errors.item_type = t(\"field_error_required\");\r\n        if (!values.provider) errors.provider = t(\"field_error_required\");\r\n        if (values.amount == \"\") errors.amount = t(\"field_error_required\");\r\n        if (!values.transaction_date) errors.transaction_date = t(\"field_error_required\");\r\n        \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"transaction_date\":\r\n                            var d = moment.isMoment(v) ? v : moment(v);\r\n                            data.append(k,d.format(\"YYYY-MM-DD\"));\r\n                            break;\r\n                        case \"receipt_file\":\r\n                            data.append(\"receipt\",v);\r\n                            break;\r\n                        case \"receipt\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`transactions${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnApprove = (e) => {\r\n        e.preventDefault();\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        // Check Approved data\r\n        const {content} = this.state;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n\r\n        if (!content.approved_at) errors.approved_at = t(\"field_error_required\");\r\n        if (!content.approved_by) errors.approved_by = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        if (Object.keys(errors).length > 0) {\r\n            toast.error(t(\"form_invalid\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n\r\n        this.setState({\r\n            loading: true,\r\n            message: \"\",\r\n            status:\"\",\r\n        })\r\n        \r\n        \r\n        this.OnSave()\r\n        .then((result)=>{\r\n            return global.Fetch(`transactions/approve/${id }`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: {}\r\n            })\r\n        }).then((result)=>{\r\n            toast.success(t(\"success_approved\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/transactions/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/transactions/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        let allowSave = true;\r\n        if (id === undefined) {\r\n            allowSave = global.Accessible(\"POST_TRANSACTION\");\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_TRANSACTION\");\r\n        }\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_transactions\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_transactions\"), href:\"/transactions\" },\r\n                        { label: id === undefined ? t(\"lb_new_transactions\") : t(\"lb_edit_transactions\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid container style={{\r\n                                    marginTop: \"20px\"\r\n                                }}>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_account')}:` }\r\n                                        >\r\n                                            <AccountSelector\r\n                                                name=\"account_id\"\r\n                                                value={ content.account_id }\r\n                                                required\r\n                                                error={_.get(errors, \"account_id\",\"\") != \"\"}\r\n                                                onChange={this.handleOnChange}\r\n                                                className=\"form-input\"\r\n                                                disabled={content.is_approved}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_invoice_number')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"invoice_number\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"invoice_number\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"invoice_number\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"invoice_number\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_provider')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"provider\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"provider\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"provider\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"provider\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_item_name')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"item_name\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                multiline\r\n                                                error={_.get(errors, \"item_name\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"item_name\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"item_name\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_item_type')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"item_type\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"item_type\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"item_type\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"item_type\",\"\")}\r\n                                                required\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_payment_method')}:` }\r\n                                        >\r\n                                            <Select\r\n                                                value={ _.get(content,\"payment_method\",\"\")}\r\n                                                name=\"payment_method\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"payment_method\",\"\") != \"\"}\r\n                                                error={ errors.payment_method }\r\n                                                onChange={this.handleOnChange}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\"\r\n                                                }}\r\n                                            >\r\n                                                <MenuItem value={null}></MenuItem>\r\n                                                {\r\n                                                    global.payment_methods.map((p)=>{\r\n                                                        return (<MenuItem value={p.value}>{p.label}</MenuItem>);\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"payment_method\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_amount')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"amount\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"amount\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"number\"\r\n                                                helperText={_.get(errors, \"amount\",\"\")}\r\n                                                required\r\n                                                error={_.get(errors, \"amount\",\"\") != \"\"}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved,\r\n                                                    step:0.01\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            required\r\n                                            label={ `${t('input_transaction_date')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"transaction_date\", null)}\r\n                                                placeholder=\"\"\r\n                                                error={_.get(errors, \"transaction_date\",\"\") != \"\"}\r\n                                                required\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('transaction_date') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\",\r\n                                                    disabled: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"transaction_date\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_approved_by')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"approved_by\"\r\n                                                variant=\"outlined\"\r\n                                                error={_.get(errors, \"approved_by\",\"\") != \"\"}\r\n                                                fullWidth\r\n                                                value={ _.get(content,\"approved_by\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"approved_by\",\"\")}\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    readOnly: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_approved_at')}:` }\r\n                                        >\r\n                                            <KeyboardDatePicker\r\n                                                fullWidth\r\n                                                value={_.get(content,\"approved_at\", null)}\r\n                                                error={_.get(errors, \"approved_at\",\"\") != \"\"}\r\n                                                placeholder=\"\"\r\n                                                inputVariant=\"outlined\"\r\n                                                onChange={ this.handleOnDateChange('approved_at') }\r\n                                                maxDate={new Date()}\r\n                                                format=\"YYYY-MM-DD\"\r\n                                                InputAdornmentProps={{position: \"end\"}}\r\n                                                className=\"datePicker\"\r\n                                                inputProps={{\r\n                                                    className:\"form-input date-input\",\r\n                                                    disabled: content.is_approved\r\n                                                }}\r\n                                            />\r\n                                            <FormHelperText className=\"error\">{_.get(errors, \"approved_at\",\"\")}</FormHelperText>\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            \r\n                                            label={ `${t('input_receipt')}:` }\r\n                                        >\r\n                                            <FileUpload \r\n                                                value={ _.get(content,\"receipt\",\"\")}\r\n                                                onChange={this.handleOnUpload} \r\n                                                error={_.get(errors, \"receipt_file\",\"\") != \"\"}\r\n                                                name=\"receipt_file\"\r\n                                                deletedField=\"delete_receipt\"\r\n                                                disabled={content.is_approved}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                    <Grid item md={5} xs={11} spacing={1}>\r\n                                        <FormItemContainer\r\n                                            label={ `${t('input_description')}:` }\r\n                                        >\r\n                                            <TextField\r\n                                                name=\"description\"\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                error={_.get(errors, \"description\",\"\") != \"\"}\r\n                                                value={ _.get(content,\"description\",\"\")}\r\n                                                onChange={this.handleOnChange}\r\n                                                type=\"text\"\r\n                                                helperText={_.get(errors, \"description\",\"\")}\r\n                                                multiline\r\n                                                inputProps={{\r\n                                                    className:\"form-input\",\r\n                                                    rows: \"4\"\r\n                                                }}\r\n                                            />\r\n                                        </FormItemContainer>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Grid container>\r\n                                    <Grid item sm={6} xs={6}>\r\n                                    {\r\n                                        (id !== undefined && !content.is_approved && global.Accessible(\"APPROVE_TRANSACTION\")) && <Button \r\n                                            onClick={this.handleOnApprove}\r\n                                            color=\"primary\"\r\n                                            size=\"middle\"\r\n                                            variant=\"contained\"\r\n                                            style={{\r\n                                                marginRight: \"15px\"\r\n                                            }}\r\n                                        >\r\n                                            Approve\r\n                                        </Button>\r\n                                    }\r\n                                    </Grid>\r\n                                    <Grid item sm={6} xs={6} style={{textAlign:\"right\"}}>\r\n                                        <FormButtonGroup\r\n                                            allowSave={allowSave}\r\n                                            onCancel={(e) => {\r\n                                                e.preventDefault()\r\n                                                window.location.href=\"/transactions\"\r\n                                            }}\r\n                                        >\r\n                                            \r\n                                        </FormButtonGroup>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                \r\n                            </CardActions>\r\n                        </Card>\r\n                    </MuiPickersUtilsProvider>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditTransition);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControl, FormLabel, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\n\r\nimport AccessRights from '../../components/AccessRights';\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditUserGroup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                name:\"\",\r\n                remark: \"\",\r\n                access_rights: []\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`user_groups/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    case \"access_rights\":\r\n                                        r[k] = v.map((row) => {\r\n                                            return parseInt(row.id);\r\n                                        })\r\n                                        break;\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name, value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.name) errors.name = t(\"field_error_required\");\r\n        if (values.access_rights.length == 0) errors.access_rights = t(\"field_error_required\");\r\n        \r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    \r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`user_groups${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/usergroups/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        let allowSave = true;\r\n        if (id === undefined) {\r\n            allowSave = global.Accessible(\"POST_USER_GROUP\");\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_USER_GROUP\");\r\n        }\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_usergroups\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_usergroups\"), href:\"/usergroups\" },\r\n                        { label: id === undefined ? t(\"lb_new_usergroups\") : t(\"lb_edit_usergroups\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={11} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        large\r\n                                        label={ `${t('input_group_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.name}\r\n                                            value={ _.get(content,\"name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={11} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        large\r\n                                        label={ `${t('input_remark')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"remark\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.remark}\r\n                                            value={ _.get(content,\"remark\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"remark\",\"\")}\r\n                                            multiline\r\n                                            inputProps={{\r\n                                                className:\"form-input\",\r\n                                                rows: \"4\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={11} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        large\r\n                                        label={ `${t('input_access_rights')}:` }\r\n                                    >\r\n                                        <AccessRights\r\n                                            name=\"access_rights\"\r\n                                            value={ content.access_rights }\r\n                                            onChange={this.handleOnChecked}\r\n                                        />\r\n                                        <FormHelperText className=\"error\">{_.get(errors, \"access_rights\",\"\")}</FormHelperText>\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                    <FormButtonGroup\r\n                                        allowSave={allowSave}\r\n                                        onCancel={(e) => {\r\n                                            e.preventDefault()\r\n                                            window.location.href=\"/usergroups\"\r\n                                        }}\r\n                                    >\r\n                                        \r\n                                    </FormButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditUserGroup);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControlLabel, FormControl, FormLabel, Checkbox, FormHelperText } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport UserGroupSelector from '../../components/UserGroupSelector';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\nimport { toast } from 'react-toastify';\r\nclass EditUser extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_name:\"\",\r\n                en_name:\"\",\r\n                user_name: \"\",\r\n                email:\"\",\r\n                mobile:\"\",\r\n                password: \"\",\r\n                password_confirmation:\"\",\r\n                user_group_id: null,\r\n                is_actived:true\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`users/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.zh_name) errors.zh_name = t(\"field_error_required\");\r\n        if (!values.en_name) errors.en_name = t(\"field_error_required\");\r\n        if (!values.user_group_id) errors.user_group_id = t(\"field_error_required\");\r\n        if (!values.email) errors.email = t(\"field_error_required\");\r\n        if (!values.user_name) errors.user_name = t(\"field_error_required\");\r\n       \r\n        if (!values.password) {\r\n            if (id === undefined) {\r\n                errors.password = t(\"field_error_required\");\r\n            }\r\n        } else {\r\n            if (!values.password_confirmation) {\r\n                errors.password_confirmation = t(\"field_error_required\");\r\n            } else if (values.password != values.password_confirmation) {\r\n                errors.password_confirmation = t(\"field_password_confirmation_not_match\");\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        case \"user_group\":\r\n                            break;\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`users${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/users/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        let allowSave = true;\r\n        if (id === undefined) {\r\n            allowSave = global.Accessible(\"POST_USER\");\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_USER\");\r\n        }\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_users\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_users\"), href:\"/users\" },\r\n                        { label: id === undefined ? t(\"lb_new_users\") : t(\"lb_edit_users\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_zh_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"zh_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.zh_name}\r\n                                            value={ _.get(content,\"zh_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"zh_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_en_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"en_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.en_name}\r\n                                            value={ _.get(content,\"en_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"en_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_email')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"email\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.email}\r\n                                            value={ _.get(content,\"email\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"email\"\r\n                                            helperText={_.get(errors, \"email\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_mobile')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"mobile\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.mobile}\r\n                                            value={ _.get(content,\"mobile\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"mobile\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_user_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"user_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.user_name}\r\n                                            value={ _.get(content,\"user_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"user_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_user_group')}:` }\r\n                                    >\r\n                                        <UserGroupSelector\r\n                                            name=\"user_group_id\"\r\n                                            value={ content.user_group_id }\r\n                                            required\r\n                                            error={errors.user_group_id}\r\n                                            onChange={this.handleOnChange}\r\n                                            className=\"form-input\"\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_password')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.password}\r\n                                            value={ _.get(content,\"password\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required={content.password}\r\n                                        label={ `${t('input_password_confirmation')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password_confirmation\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.password_confirmation}\r\n                                            required={content.password}\r\n                                            value={ _.get(content,\"password_confirmation\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password_confirmation\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_is_actived')}:` }\r\n                                    >\r\n                                        <FormControl className=\"form-item\" component=\"fieldset\">\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Checkbox \r\n                                                        checked={content.is_actived} \r\n                                                        error={errors.is_actived}\r\n                                                        onChange={this.handleOnChecked(\"is_actived\")} \r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </FormControl>\r\n                                        <FormHelperText className=\"error\">{_.get(errors, \"is_actived\",\"\")}</FormHelperText>\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                    <FormButtonGroup\r\n                                        allowSave={allowSave}\r\n                                        onCancel={(e) => {\r\n                                            e.preventDefault()\r\n                                            window.location.href=\"/users\"\r\n                                        }}\r\n                                    >\r\n                                        \r\n                                    </FormButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditUser);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Checkbox, Select, MenuItem } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport FileUpload from '../../components/FileUpload';\r\nimport UserGroupSelector from '../../components/UserGroupSelector';\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                zh_name:\"\",\r\n                en_name:\"\",\r\n                user_name: \"\",\r\n                email:\"\",\r\n                mobile:\"\",\r\n                password: \"\",\r\n                password_confirmation:\"\",\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnDateChange = this.handleOnDateChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        global.Fetch(`users/profile`)\r\n            .then((result)=>{\r\n                this.setState(prevState => ({\r\n                    ...prevState,\r\n                    content: {\r\n                        ...prevState.content,\r\n                        ..._.reduce(result.data,(r,v,k)=>{\r\n                            switch(k) {\r\n                                default: r[k]=v;break;\r\n                            }\r\n                            return r;\r\n                        },{})\r\n                    },\r\n                    loading:false\r\n                }))\r\n            }).catch((err)=>{\r\n                this.setState({\r\n                    loading: true\r\n                })\r\n            })\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnDateChange = (name) => (value) => {\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnUpload = (name,value) => {\r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.zh_name) errors.zh_name = t(\"field_error_required\");\r\n        if (!values.en_name) errors.en_name = t(\"field_error_required\");\r\n        if (!values.email) errors.email = t(\"field_error_required\");\r\n\r\n        if (values.password) {\r\n            if (!values.password_confirmation) {\r\n                errors.password_confirmation = t(\"field_error_required\");\r\n            } else if (values.password != values.password_confirmation) {\r\n                errors.password_confirmation = t(\"field_password_confirmation_not_match\");\r\n            }\r\n        }\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`users/profile`,{\r\n                method: 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/profile`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_profile\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label: t(\"lb_profile\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_zh_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"zh_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.zh_name}\r\n                                            value={ _.get(content,\"zh_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"zh_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_en_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"en_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.en_name}\r\n                                            value={ _.get(content,\"en_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"en_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_email')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"email\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.email}\r\n                                            value={ _.get(content,\"email\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"email\"\r\n                                            helperText={_.get(errors, \"email\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_mobile')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"mobile\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.mobile}\r\n                                            value={ _.get(content,\"mobile\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"mobile\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_user_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"user_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.user_name}\r\n                                            value={ _.get(content,\"user_name\",\"\")}\r\n                                            // onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"user_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\",\r\n                                                readOnly:true\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    \r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_password')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.password}\r\n                                            value={ _.get(content,\"password\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required={content.password}\r\n                                        label={ `${t('input_password_confirmation')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"password_confirmation\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            error={errors.password_confirmation}\r\n                                            required={content.password}\r\n                                            value={ _.get(content,\"password_confirmation\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"password\"\r\n                                            helperText={_.get(errors, \"password_confirmation\",\"\")}\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign: \"right\"}}>\r\n                                    <FormButtonGroup />\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(Profile);","import React, { useState, Component, Fragment, useEffect } from 'react';\r\n\r\nexport const useWindowSize = () => {\r\n    const isClient = typeof window === 'object';\r\n  \r\n    function getSize() {\r\n      return {\r\n        width: isClient ? window.innerWidth : undefined,\r\n        height: isClient ? window.innerHeight : undefined\r\n      };\r\n    }\r\n  \r\n    const [windowSize, setWindowSize] = useState(getSize);\r\n  \r\n    useEffect(() => {\r\n      if (!isClient) {\r\n        return false;\r\n      }\r\n      \r\n      function handleResize() {\r\n        setWindowSize(getSize());\r\n      }\r\n  \r\n      window.addEventListener('resize', handleResize);\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount and unmount\r\n  \r\n    return windowSize;\r\n}","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst Accounts = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"bank\", label: t('input_bank') },\r\n        { key: \"bank_no\", label: t('input_bank_no') },\r\n        { key: \"balance\", label: t('input_balance'), render:(row,text)=>{ return `HKD$${text == null ? 0: text}`;} },\r\n        { key: \"remark\", label: t('input_remark') },\r\n        { key: \"is_default\", label: t('input_is_default'), render: (row,text) => { return text ? \"Y\": \"N\"} },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        let url = `accounts?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        setLoading(true);\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n                setLoading(false);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_accounts\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_accounts\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {\r\n                                global.Accessible(\"POST_ACCOUNT\") && <Button\r\n                                    startIcon={<AddIcon />}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    className=\"float-right\"\r\n                                    href=\"/accounts/create\"\r\n                                >\r\n                                    {t('btn_new')}\r\n                                </Button>\r\n                            }\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/accounts/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_ACCOUNT\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(Accounts);","import React, { useState, Fragment, useEffect } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, TextField, Button, InputAdornment, FormControlLabel, Icon } from '@material-ui/core'\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport moment from 'moment';\r\nimport Cookies from 'universal-cookie';\r\nimport Loader from '../../components/Loader';\r\nimport _ from 'lodash';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst cookies = new Cookies();\r\nconst useStyle = makeStyles({\r\n    title: {\r\n        textAlign: \"center\"\r\n    },\r\n    formInput: {\r\n        marginBottom: \"49px\"\r\n    },\r\n    loginBtn: {\r\n        width: \"100%\"\r\n    },\r\n    loginArea: {\r\n        backgroundImage: \"url('/assets/img/bg.jpg')\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"cover\",\r\n        minHeight:\"100vh\",\r\n        width: \"100%\",\r\n        overflow:\"hidden\",\r\n        display:\"flex\",\r\n        alignItems:\"center\"\r\n    },\r\n    loginWrapper: {\r\n        background: \"#FFF\",\r\n        width: \"400px\",\r\n        margin: \"auto\",\r\n        display: \"block\",\r\n        padding: \"50px\",\r\n        borderRadius: \"5px\",\r\n        minHeight: \"300px\"\r\n    }\r\n})\r\nconst Login = props => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const [errMsg, setErrMsg] = useState(\"\");\r\n    const [errUserName, setErrUserName] = useState(\"\");\r\n    const [errPass, setErrPass] = useState(\"\");\r\n\r\n    const [showpass, setShowPass] = useState(false);\r\n\r\n    const [logged,setLogged] = useState(false);\r\n\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const classes = useStyle();\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setErrMsg(\"\");\r\n        setErrUserName(\"\");\r\n        setErrPass(\"\");\r\n        cookies.remove(\"mms_login\",{path:\"/\",domain:window.location.hostname});\r\n        if (username == \"\") setErrUserName(t(\"msg_username_empty\")); \r\n        if (password == \"\") setErrPass(t(\"msg_password_empty\")); \r\n        \r\n        if (username != \"\" && password != \"\") {\r\n            setLoading(true);\r\n            global.Fetch('auth/login',{\r\n                method: 'POST',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }),\r\n                body:  JSON.stringify({\r\n                    username: username,\r\n                    password: password\r\n                })\r\n            }).then((result)=>{\r\n                let exp_date = _.get(result,'data.exp_date','');\r\n                cookies.set(\"mms_login\", result.data,{path:\"/\",domain:window.location.hostname})\r\n                setLogged(true);\r\n            }).catch((err)=>{\r\n                setLoading(false);\r\n                setErrMsg(t(_.get(err,'message',_.get(err,'error','system_error'))));\r\n            })\r\n        }\r\n    }\r\n\r\n    return (logged ? <Redirect to={{pathname: \"/\"}}/> : <Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_login\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid className={classes.loginArea}>\r\n            <form className={classes.loginWrapper} onSubmit={onSubmit}>\r\n                <Grid item xs={12} className=\"loginForm\">\r\n                        <div className={classes.title}>\r\n                            <h2>{ t(\"lb_login\") }</h2>\r\n                        </div>\r\n                        <TextField\r\n                            label={ t('lb_username') }\r\n                            placeholder=\"\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            name=\"username\"\r\n                            onChange={(e)=>{ setUsername(e.target.value) }}\r\n                            value={username}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            helperText={ errUserName }\r\n                            error={ errMsg.length > 0 || errUserName.length > 0 }\r\n                            className={classes.formInput}\r\n                        />\r\n                        <TextField\r\n                            label={ t('lb_password') }\r\n                            placeholder=\"\"\r\n                            type={ showpass ? 'text' : 'password'}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            name=\"password\"\r\n                            onChange={(e)=>{ setPassword(e.target.value) }}\r\n                            value={password}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            error={ errMsg.length > 0 || errPass.length > 0 }\r\n                            helperText={ errPass ? errPass : errMsg }\r\n                            className={classes.formInput}\r\n                            InputProps={{\r\n                                endAdornment: (\r\n                                  <InputAdornment\r\n                                    onClick={(e) => { setShowPass(!showpass); }}\r\n                                    className=\"showPassword\"\r\n                                    position=\"end\">\r\n                                        {\r\n                                            showpass ? <VisibilityIcon/> : <VisibilityOffIcon/>\r\n                                        }\r\n                                  </InputAdornment>\r\n                                ),\r\n                              }}\r\n                        />\r\n                        \r\n                        <Button \r\n                            type=\"submit\" variant=\"contained\" color=\"primary\" \r\n                            className={classes.loginBtn}\r\n                        >login</Button>\r\n                </Grid>\r\n            </form>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\n\r\nexport default Login;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst Members = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"zh_surname\", label: t('input_zh_surname') },\r\n        { key: \"zh_first_name\", label: t('input_zh_first_name') },\r\n        { key: \"en_surname\", label: t('input_en_surname') },\r\n        { key: \"en_first_name\", label: t('input_en_first_name') },\r\n        { key: \"email\", label: t('input_email')  },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}},\r\n        { key: \"is_actived\", label: t('input_is_actived') , render: (record, text)=>{\r\n            return text ? \"Y\":\"N\";\r\n        } }\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        let url = `members?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        setLoading(true);\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n                setLoading(false);\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_members\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_members\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {\r\n                                global.Accessible(\"POST_MEMBER\") && <Button\r\n                                    startIcon={<AddIcon />}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    className=\"float-right\"\r\n                                    href=\"/members/create\"\r\n                                >\r\n                                    {t('btn_new')}\r\n                                </Button>\r\n                            }\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/members/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_MEMBER\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(Members);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst Claims = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"paid_by\", label: t('input_paid_by') },\r\n        { key: \"paid_at\", label: t('input_paid_at'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD\");}},\r\n        { key: \"invoice_number\", label: t('input_invoice_number') },\r\n        { key: \"item_name\", label: t('input_item_name') },\r\n        { key: \"amount\", label: t('input_amount'), render:(row,text)=>{ return `$${text == null ? 0: text}`;} },\r\n        { key: \"status\", label: t('input_status') },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        let url = `claims?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        setLoading(true);\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n                setLoading(false);\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_claims\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_claims\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {\r\n                                global.Accessible(\"POST_CLAIM\") && <Button\r\n                                    startIcon={<AddIcon />}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    className=\"float-right\"\r\n                                    href=\"/claims/create\"\r\n                                >\r\n                                    {t('btn_new')}\r\n                                </Button>\r\n                            }\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/claims/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_CLAIM\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(Claims);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst useStyles = makeStyles(theme => ({\r\n    tableContainer: {\r\n      paddingTop: \"10px\"\r\n    }\r\n}));\r\nconst Registrations = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"zh_surname\", label: t('input_zh_surname') },\r\n        { key: \"zh_first_name\", label: t('input_zh_first_name') },\r\n        { key: \"en_surname\", label: t('input_en_surname') },\r\n        { key: \"en_first_name\", label: t('input_en_first_name') },\r\n        { key: \"email\", label: t('input_email')  },\r\n        { key: \"status\", label: t('input_status') },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{\r\n            return moment(text).format(\"YYYY-MM-DD HH:mm\");\r\n        } }\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        let url = `registrations?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        setLoading(true);\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n                setLoading(false);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_registrations\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_registrations\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                startIcon={<AddIcon />}\r\n                                color=\"primary\"\r\n                                variant=\"contained\"\r\n                                className=\"float-right\"\r\n                                href=\"/registrations/create\"\r\n                            >\r\n                                {t('btn_new')}\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/registrations/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_REGISTRATION\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(Registrations);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst Transactions = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"id\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"account.bank\", label: t('input_account'), allowSort: false },\r\n        { key: \"invoice_number\", label: t('input_invoice_number') },\r\n        { key: \"item_name\", label: t('input_item_name') },\r\n        { key: \"amount\", label: t('input_amount'), render:(row,text)=>{ return `$${text == null ? 0: text}`;} },\r\n        { key: \"is_approved\", label: t('input_is_approved') , render: (record, text)=>{\r\n            return text ? \"Y\":\"N\";\r\n        } },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        let url = `transactions?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        setLoading(true);\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n                setLoading(false);\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_transactions\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_transactions\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {\r\n                                global.Accessible(\"POST_TRANSACTION\") && <Button\r\n                                    startIcon={<AddIcon />}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    className=\"float-right\"\r\n                                    href=\"/transactions/create\"\r\n                                >\r\n                                    {t('btn_new')}\r\n                                </Button>\r\n                            }\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/transactions/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_TRANSACTION\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(Transactions);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Select, MenuItem } from '@material-ui/core';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Loader from '../../components/Loader';\r\nimport Alert from '../../components/Alert';\r\n\r\nconst AccountSelector = (props) => {\r\n    const { name, value, onChange, required, className=\"\", disabled=false, error=false } = props;\r\n    const [options, setOptions] = useState([]);\r\n\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 50\r\n    }); \r\n\r\n    const GetData = () => {\r\n        let url = `accounts?page=${paging.current}&size=${paging.pageSize}&order=bank&sort=asc`;\r\n        // if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                setOptions(result.data);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    const loadMoreItems = (e) => {\r\n        console.log(e);\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n\r\n    return(<Fragment>\r\n        <Select\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            error\r\n            className={className}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            MenuProps={{\r\n                onScroll:loadMoreItems\r\n            }}\r\n            disabled={disabled}\r\n        >\r\n            <MenuItem value={null}></MenuItem>\r\n            {\r\n                options.map((option)=>{\r\n                    return (<MenuItem value={option.id}>{option.bank}</MenuItem>)\r\n                })\r\n            }\r\n        </Select>\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(AccountSelector);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst UserGroups = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"name\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"name\", label: t('input_user_group') },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        let url = `user_groups?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        setLoading(true);\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n                setLoading(false);\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_usergroups\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_usergroups\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {\r\n                                global.Accessible(\"POST_USER_GROUP\") && <Button\r\n                                    startIcon={<AddIcon />}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    className=\"float-right\"\r\n                                    href=\"/usergroups/create\"\r\n                                >\r\n                                    {t('btn_new')}\r\n                                </Button>\r\n                            }\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/usergroups/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_USER_GROUP\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\n\r\nexport default withTranslation('translation')(UserGroups);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Checkbox, Select, MenuItem } from '@material-ui/core';\r\nimport Loader from '../../components/Loader';\r\nimport Alert from '../../components/Alert';\r\n\r\nconst AccessRights = (props) => {\r\n    const { value, name, onChange } = props;\r\n    const [options, setOptions] = useState({});\r\n    const [selected, setSelected] = useState(value);\r\n\r\n    const isSelected = id => selected.indexOf(id) !== -1;\r\n\r\n    const GetData = () => {\r\n        let url = `accesses`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                setOptions(result.data);\r\n            }).catch((err)=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n    const handleOnChecked = (e) => {\r\n        let checked = e.target.checked;\r\n        let value = parseInt(e.target.value);\r\n        const selectedIndex = selected.indexOf(value);\r\n        let newSelected = [];\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, value);\r\n          } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n          } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n          } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n              selected.slice(0, selectedIndex),\r\n              selected.slice(selectedIndex + 1),\r\n            );\r\n          }\r\n          \r\n          onChange(name,newSelected);\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        setSelected(value);\r\n    },[value])\r\n\r\n    return(<Fragment>\r\n        {\r\n            _.reduce(options,(result,value,key)=>{\r\n                result.push(<Fragment>\r\n                        {\r\n                            _.reduce(value,(r,v,k)=>{\r\n                                r.push(<FormControl className=\"form-item\" component=\"fieldset\" \r\n                                        style={{\r\n                                            width: \"100%\",\r\n                                            marginBottom: \"15px\",\r\n                                            borderBottom: \"1px solid #efefef\"\r\n                                        }}\r\n                                    >\r\n                                        <label>{ key }</label>\r\n                                        <Grid container style={{\r\n                                            paddingLeft: \"15px\"\r\n                                        }}>\r\n                                            <Grid item sm={1} xs={1}>\r\n                                                <label style={{\r\n                                                    lineHeight: \"42px\"\r\n                                                }}>{ k }</label>\r\n                                            </Grid>\r\n                                            <Grid item sm={11} xs={11}>\r\n                                                <Grid container>\r\n                                                {\r\n                                                    v.map((row)=>{\r\n                                                        const isItemSelected = isSelected(row.id);\r\n                                                        return(<Grid item sm={3} xs={3}>\r\n                                                            <FormControlLabel\r\n                                                                control={\r\n                                                                    <Checkbox \r\n                                                                        checked={isItemSelected} \r\n                                                                        onChange={handleOnChecked} \r\n                                                                        value={row.id} \r\n                                                                    />\r\n                                                                }\r\n                                                                label={ row.displayname }\r\n                                                            />\r\n                                                        </Grid>)\r\n                                                    })\r\n                                                }\r\n                                                </Grid>\r\n                                            </Grid>    \r\n                                        </Grid>\r\n                                </FormControl>);\r\n                                return r;\r\n                            },[])\r\n                        }\r\n                   </Fragment>)\r\n                return result;\r\n            },[])\r\n        }\r\n    </Fragment>);\r\n}\r\nexport default withTranslation('translation')(AccessRights);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst Users = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"user_name\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"user_group.name\", label: t('input_user_group'), allowSort:false },\r\n        { key: \"zh_name\", label: t('input_zh_name') },\r\n        { key: \"en_name\", label: t('input_en_name') },\r\n        { key: \"user_name\", label: t('input_user_name') },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        console.log(props);\r\n        let url = `users?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        setLoading(true);\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n                setLoading(false);\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_users\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_users\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            {\r\n                                global.Accessible(\"POST_USER\") && <Button\r\n                                    startIcon={<AddIcon />}\r\n                                    color=\"primary\"\r\n                                    variant=\"contained\"\r\n                                    className=\"float-right\"\r\n                                    href=\"/users/create\"\r\n                                >\r\n                                    {t('btn_new')}\r\n                                </Button>\r\n                            }\r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/users/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_USER\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\n\r\nexport default withTranslation('translation')(Users);","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, IconButton, Button, ButtonGroup } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DataTable from '../../components/DataTable';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport SearchBox from '../../components/SearchBox';\r\nimport Loader from '../../components/Loader';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nconst Configs = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    const [data, setData] = useState([]);\r\n    const [filter,setFilter] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [paging, setPaging] = useState({\r\n        current: 1,\r\n        pageSize: 5,\r\n        order: \"asc\",\r\n        orderBy:\"display_name\",\r\n        total: 0\r\n    })\r\n    \r\n    const columns = [\r\n        { key: \"display_name\", label: t('input_config_name') },\r\n        { key: \"updated_at\", label: t('lb_last_updated'), render: (record, text)=>{ return moment(text).format(\"YYYY-MM-DD HH:mm\");}}\r\n    ];\r\n\r\n    const GetData = () => {\r\n        const { t, i18n } = props;\r\n        console.log(props);\r\n        let url = `configs?page=${paging.current}&size=${paging.pageSize}&order=${paging.orderBy}&sort=${paging.order}`;\r\n        setLoading(true);\r\n        if (filter != \"\") url = `${url}&keywords=${filter}`;\r\n        global.Fetch(url)\r\n            .then((result)=>{\r\n                let newPaging = paging;\r\n                newPaging.total = result.count;\r\n                setLoading(false);\r\n                setData(result.data);\r\n                setPaging(newPaging);\r\n            }).catch((err)=>{\r\n                toast.error(t(\"system_error\"), {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: false,\r\n                    onClose: () => {\r\n                        setLoading(false);\r\n                    }\r\n                });\r\n            })\r\n    }\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[])\r\n    useEffect(()=>{\r\n        GetData();\r\n    },[filter,paging])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_configs\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            <Breadcrumbs\r\n                items={[\r\n                    { label:t(\"lb_home\"), href:\"/\" },\r\n                    { label:t(\"lb_configs\") }\r\n                ]}\r\n            />\r\n            <Card className=\"content-wrapper\">\r\n                <CardContent className=\"content-body\">\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <SearchBox \r\n                                placeholder={ t('ph_search') }\r\n                                variant=\"outlined\"\r\n                                onSearch={(value)=>{\r\n                                    setFilter(value);\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            \r\n                        </Grid>\r\n                        <Grid xs={12} className=\"list-table-container\">\r\n                            <DataTable\r\n                                dataId=\"id\"\r\n                                columns={ columns }\r\n                                data={ data }\r\n                                paging={ paging }\r\n                                onChangePage={(event, newPage) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        current: newPage+1\r\n                                    })\r\n                                }}\r\n                                onChangeRowsPerPage={(e) => {\r\n                                    let newSize = e.target.value;\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        pageSize: newSize\r\n                                    })\r\n                                }}\r\n                                onChangeSort={ (e, property, sort) => {\r\n                                    setPaging({\r\n                                        ...paging,\r\n                                        order: sort,\r\n                                        orderBy: property\r\n                                    })\r\n                                }}\r\n                                rowAction={\r\n                                    (row) => {\r\n                                        return(<Fragment>\r\n                                            <IconButton aria-label=\"settings\" href={`/configs/edit/${row.id}`}>\r\n                                            { global.Accessible(\"PUT_SYS_CONFIG\") ? <EditIcon/> : <VisibilityIcon /> }\r\n                                            </IconButton>\r\n                                        </Fragment>)\r\n                                    }\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\n\r\nexport default withTranslation('translation')(Configs);","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid, Card, CardHeader,CardContent, CardActions, Button } from '@material-ui/core';\r\nimport { TextField, FormControlLabel, FormControl, FormHelperText, Checkbox } from '@material-ui/core';\r\n\r\nimport { withTranslation, Trans } from 'react-i18next';\r\nimport _ from 'lodash';\r\nimport Breadcrumbs from '../../components/Breadcrumbs';\r\nimport FormButtonGroup from '../../components/FormButtonGroup';\r\nimport Loader from '../../components/Loader';\r\nimport { toast } from 'react-toastify';\r\nimport FormItemContainer  from '../../components/FormItemContainer';\r\n\r\nclass EditConfig extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: {\r\n                display_name:\"\",\r\n                content:\"\"\r\n            },\r\n            errors:{},\r\n            loading: false,\r\n            status: \"\",\r\n            message: \"\"\r\n        };\r\n        this.handleOnChecked = this.handleOnChecked.bind(this);\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnSubmit = this.handleOnSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        if (id !== undefined) {\r\n            this.setState({\r\n                loading: true\r\n            })\r\n            global.Fetch(`configs/${id}`)\r\n                .then((result)=>{\r\n                    this.setState(prevState => ({\r\n                        ...prevState,\r\n                        content: {\r\n                            ...prevState.content,\r\n                            ..._.reduce(result.data,(r,v,k)=>{\r\n                                switch(k) {\r\n                                    default: r[k]=v;break;\r\n                                }\r\n                                return r;\r\n                            },{})\r\n                        },\r\n                        loading:false\r\n                    }))\r\n                }).catch((err)=>{\r\n                    this.setState({\r\n                        loading: true\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    onChange = (name,value) => {\r\n        const { onChange } = this.props;\r\n        let content = {\r\n            ...this.state.content,\r\n            [name]:value\r\n        }\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            content: {\r\n                ...content\r\n            }\r\n        }))\r\n\r\n        if (typeof onChange === \"function\") {\r\n            onChange(content);\r\n        }\r\n    }\r\n    \r\n    handleOnChecked = (name) => (e) => {\r\n        let value = e.target.checked ;\r\n        this.onChange(name,value);\r\n    }\r\n\r\n    handleOnChange = (e) => {\r\n        let name = e.target.name;\r\n        let value = e.target.value;\r\n        \r\n        this.onChange(name,value);\r\n    }\r\n    validations = (values) => {\r\n        const { t, i18n } = this.props;\r\n        this.setState({\r\n            errors: {}\r\n        })\r\n        let errors = {};\r\n        if (!values.display_name) errors.display_name = t(\"field_error_required\");\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            [\"errors\"]: errors\r\n        }))\r\n        return errors;\r\n    }\r\n    OnSave = () => {\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n        const {content} = this.state;\r\n        const errors = this.validations(content);\r\n        \r\n        if (!_.isEmpty(errors)) {\r\n            return Promise.reject({ message: \"form_invalid\" });\r\n        } else {\r\n            const data = new FormData();\r\n            console.log(content);\r\n            _.reduce(content, (r,v,k)=>{\r\n                if (v != null) {\r\n                    switch(k) {\r\n                        default:\r\n                            data.append(k,v);\r\n                            break;\r\n                    }\r\n                }\r\n            },{});\r\n            return global.Fetch(`configs${id !== undefined ? '/update/'+id:\"/create\"}`,{\r\n                method: id === undefined ? 'POST': 'PUT',\r\n                credentials: 'include',\r\n                headers: new Headers({\r\n                    'Accept': 'application/json'\r\n                }),\r\n                body: data\r\n            })\r\n        }\r\n    }\r\n    handleOnSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        const { t, i18n } = this.props;\r\n        const _this = this;\r\n\r\n        this.OnSave().then((result)=>{\r\n            const { data: { id } } = result;\r\n            toast.success(t(\"success_save\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    window.location.href = `/configs/edit/${id}`;\r\n                }\r\n            });\r\n        }).catch((err)=>{\r\n            const { message = \"\", error = null } = err;\r\n            if (error != null) {\r\n                this.setState({\r\n                    errors: _.reduce(error,(r,v,k) =>{\r\n                        r[k] = t(_.get(v,\"0\",\"\"));\r\n                        return r;\r\n                    },{})\r\n                })\r\n            }\r\n            toast.error(message ? t(message) : t(\"system_error\"), {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                onClose: () => {\r\n                    _this.setState({\r\n                        loading: false\r\n                    })\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { content, errors } = this.state;\r\n        const { t, i18n } = this.props;\r\n        const { match: { params } } = this.props;\r\n        const { id } = params;\r\n\r\n        let allowSave = true;\r\n        if (id === undefined) {\r\n            allowSave = false;\r\n        } else {\r\n            allowSave = global.Accessible(\"PUT_SYS_CONFIG\");\r\n        }\r\n\r\n        return (<Fragment>\r\n            <Helmet>\r\n                <title>{ `${t(\"lb_configs\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n            </Helmet>\r\n            <Grid>\r\n                <Breadcrumbs\r\n                    items={[\r\n                        { label:t(\"lb_home\"), href:\"/\" },\r\n                        { label:t(\"lb_configs\"), href:\"/configs\" },\r\n                        { label: id === undefined ? t(\"lb_new_configs\") : t(\"lb_edit_configs\") }\r\n                    ]}\r\n                />\r\n                <form onSubmit={this.handleOnSubmit}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Grid container style={{\r\n                                marginTop: \"20px\"\r\n                            }}>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        required\r\n                                        label={ `${t('input_config_name')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"display_name\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"display_name\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"display_name\",\"\")}\r\n                                            required\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                                <Grid item md={5} xs={11} spacing={1}>\r\n                                    <FormItemContainer\r\n                                        label={ `${t('input_config_content')}:` }\r\n                                    >\r\n                                        <TextField\r\n                                            name=\"content\"\r\n                                            variant=\"outlined\"\r\n                                            fullWidth\r\n                                            value={ _.get(content,\"content\",\"\")}\r\n                                            onChange={this.handleOnChange}\r\n                                            type=\"text\"\r\n                                            helperText={_.get(errors, \"content\",\"\")}\r\n                                            multiline\r\n                                            inputProps={{\r\n                                                className:\"form-input\"\r\n                                            }}\r\n                                        />\r\n                                    </FormItemContainer>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Grid container>\r\n                                <Grid item sm={12} xs={12} style={{textAlign:\"right\"}}>\r\n                                    <FormButtonGroup\r\n                                        allowSave={ allowSave }\r\n                                        onCancel={(e) => {\r\n                                            e.preventDefault()\r\n                                            window.location.href=\"/configs\"\r\n                                        }}\r\n                                    >\r\n                                        \r\n                                    </FormButtonGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                            \r\n                        </CardActions>\r\n                    </Card>\r\n                </form>\r\n            </Grid>\r\n            {\r\n                this.state.loading && <Loader />\r\n            }\r\n        </Fragment>);\r\n    }\r\n}\r\nexport default withTranslation('translation')(EditConfig);","import React, { Component } from 'react';\r\nimport \"./style.css\";\r\n\r\nconst Loader = (props) => {\r\n    return(<div className=\"Loader\">\r\n        <div className=\"lds-default\">\r\n            <div key=\"1\"></div>\r\n            <div key=\"2\"></div>\r\n            <div key=\"3\"></div>\r\n            <div key=\"4\"></div>\r\n            <div key=\"5\"></div>\r\n            <div key=\"6\"></div>\r\n            <div key=\"7\"></div>\r\n            <div key=\"8\"></div>\r\n            <div key=\"9\"></div>\r\n            <div key=\"10\"></div>\r\n            <div key=\"11\"></div>\r\n            <div key=\"12\"></div>\r\n        </div>\r\n    </div>);\r\n}\r\n\r\nexport default Loader;","import Cookies from 'universal-cookie';\r\nimport _ from \"lodash\";\r\n\r\nconst cookies = new Cookies();\r\nglobal.Fetch = (url, myHeader = {}) => {\r\n    let defaultHeader = {\r\n        crossDomain:true,\r\n        method: \"GET\",\r\n        credentials: 'include',\r\n        headers: new Headers({\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'\r\n        })\r\n    };\r\n    return fetch(`${process.env.REACT_APP_API_URL}${url}`,{\r\n        ...defaultHeader,\r\n        ...myHeader\r\n    }).then((response)=>{\r\n        if (!response.ok)\r\n            return response.json().then((res) => { return Promise.reject(res) });\r\n        return response.json();\r\n    })\r\n}\r\n\r\nglobal.Accessible = (code) => {\r\n    const user = cookies.get(\"mms_login\",{path: \"/\",domain:window.location.hostname});\r\n    if (user === undefined)\r\n        return false;\r\n    const { access_rights } = user;\r\n    if (typeof code === \"object\") {\r\n        code.push(\"ALL_REQUEST\")\r\n    } else {\r\n        code = [\"ALL_REQUEST\",code];\r\n    }\r\n    let result = _.some(code, (el) => _.includes(access_rights, el));\r\n    \r\n    return result;\r\n}\r\n\r\n// Global Configs\r\nglobal.payment_methods = [\r\n    { label: \"Bank Transaction\", value: \"Bank Transaction\" },\r\n    { label: \"Cash\", value: \"Cash\" },\r\n    { label: \"Cheque\", value: \"Cheque\" },\r\n    { label: \"Credit Card\", value: \"Credit Card\" },\r\n    { label: \"FPS\", value: \"FPS\" },\r\n    { label: \"PayMe\", value: \"PayMe\" },\r\n    { label: \"Online Payment\", value: \"Online Payment\" },\r\n    { label: \"Other\", value: \"Other\" }\r\n]","import React, { Component } from 'react';\r\nimport { Route, Redirect  } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\n\r\nconst cookies = new Cookies();\r\n\r\nconst PublicRoute = props => {\r\n    return (<Route\r\n        {...props}\r\n    />);\r\n}\r\n\r\nexport default PublicRoute;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Home = props => {\r\n\r\n    const { t, i18n } = useTranslation();\r\n    \r\n    useEffect(()=>{\r\n\r\n    },[])\r\n\r\n    return (<Fragment>\r\n        <Helmet>\r\n            <title>{ `${t(\"lb_home\")} - ${process.env.REACT_APP_TITLE}` }</title>\r\n        </Helmet>\r\n        <Grid>\r\n            \r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport PrivateRoute from '../_PrivateRoute';\r\nimport PublicRoute from '../_PublicRoute';\r\n\r\n// Pages\r\nimport Accounts from '../../pages/Accounts';\r\nimport EditAccount from '../../pages/Accounts/Edit';\r\nimport Home from '../../pages/Home';\r\nimport Login from '../../pages/Login';\r\nimport Members from '../../pages/Members';\r\nimport EditMember from '../../pages/Members/Edit';\r\n\r\nimport Claims from '../../pages/Claims';\r\nimport EditClaims from '../../pages/Claims/Edit';\r\n\r\nimport Registrations from '../../pages/Registrations';\r\nimport EditRegistration from '../../pages/Registrations/Edit';\r\n\r\nimport Transactions from '../../pages/Transactions';\r\nimport EditTransition from '../../pages/Transactions/Edit';\r\n\r\nimport UserGroups from '../../pages/UserGroups';\r\nimport EditUserGroup from '../../pages/UserGroups/Edit';\r\n\r\nimport Users from '../../pages/Users';\r\nimport EditUser from '../../pages/Users/Edit';\r\nimport Profile from '../../pages/Users/Profile';\r\n\r\nimport Configs from '../../pages/Configs';\r\nimport EditConfigs from '../../pages/Configs/Edit';\r\n\r\nconst Routes = props => {\r\n    return (<BrowserRouter>\r\n        <Route>\r\n            <Switch>\r\n                <PublicRoute exact path=\"/login\" component={Login} />\r\n\r\n                <PrivateRoute exact path=\"/\" component={Home} />\r\n                <PrivateRoute exact path=\"/accounts\" component={Accounts} />\r\n                <PrivateRoute exact path=\"/accounts/create\" component={EditAccount} />\r\n                <PrivateRoute exact path=\"/accounts/edit/:id\" component={EditAccount} />\r\n\r\n                <PrivateRoute exact path=\"/members\" component={Members} />\r\n                <PrivateRoute exact path=\"/members/create\" component={EditMember} />\r\n                <PrivateRoute exact path=\"/members/edit/:id\" component={EditMember} />\r\n\r\n                <PrivateRoute exact path=\"/profile\" component={Profile} />\r\n\r\n                <PrivateRoute exact path=\"/registrations\" component={Registrations} />\r\n                <PrivateRoute exact path=\"/registrations/create\" component={EditRegistration} />\r\n                <PrivateRoute exact path=\"/registrations/edit/:id\" component={EditRegistration} />\r\n\r\n                <PrivateRoute exact path=\"/claims\" component={Claims} />\r\n                <PrivateRoute exact path=\"/claims/create\" component={EditClaims} />\r\n                <PrivateRoute exact path=\"/claims/edit/:id\" component={EditClaims} />\r\n\r\n                <PrivateRoute exact path=\"/transactions\" component={Transactions} />\r\n                <PrivateRoute exact path=\"/transactions/create\" component={EditTransition} />\r\n                <PrivateRoute exact path=\"/transactions/edit/:id\" component={EditTransition} />\r\n\r\n                <PrivateRoute exact path=\"/usergroups\" component={UserGroups} />\r\n                <PrivateRoute exact path=\"/usergroups/create\" component={EditUserGroup} />\r\n                <PrivateRoute exact path=\"/usergroups/edit/:id\" component={EditUserGroup} />\r\n\r\n                <PrivateRoute exact path=\"/users\" component={Users} />\r\n                <PrivateRoute exact path=\"/users/create\" component={EditUser} />\r\n                <PrivateRoute exact path=\"/users/edit/:id\" component={EditUser} />\r\n                <PrivateRoute exact path=\"/profile\" component={Profile} />\r\n\r\n                <PrivateRoute exact path=\"/configs\" component={Configs} />\r\n                <PrivateRoute exact path=\"/configs/edit/:id\" component={EditConfigs} />\r\n\r\n            </Switch>\r\n        </Route>   \r\n    </BrowserRouter>);\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport { withTranslation, Trans } from 'react-i18next';\nimport Routes from './containers/__Routes';\nimport './Global';\nimport Moment from 'moment';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './styles/theme.css';\nimport { ToastContainer, toast } from 'react-toastify';\nMoment.locale('en');\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes />\n      <ToastContainer />\n    </div>\n  );\n}\n\nexport default withTranslation('translation')(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from 'i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\ni18n\r\n  // load translation using xhr -> see /public/locales\r\n  // learn more: https://github.com/i18next/i18next-xhr-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    lng: localStorage .getItem('user-language') || 'en',\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    react: {\r\n      useSuspense: false\r\n    },\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    },\r\n  });\r\n\r\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {I18nextProvider} from 'react-i18next';\nimport i18n from './i18n';\n\nReactDOM.render(<I18nextProvider i18n={i18n}><App /></I18nextProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Breadcrumbs as MIBreadcrumbs } from '@material-ui/core';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyle = makeStyles({\r\n    crumbsBody: {\r\n        padding: \"20px 0\"\r\n    }\r\n})\r\n\r\nconst Breadcrumbs = (props) => {\r\n    const { items } = props;\r\n    const classes = useStyle();\r\n    return(\r\n        <MIBreadcrumbs \r\n            className={ `${classes.crumbsBody} breadcrumbs` }\r\n            separator={<NavigateNextIcon fontSize=\"small\" />} \r\n            aria-label=\"breadcrumb\">\r\n            {\r\n                items.map((item,index)=>{\r\n                    return(<Link color=\"inherit\" key={index} href={item.href === undefined ? \"#\" : item.href}>\r\n                    {item.label}\r\n                  </Link>);\r\n                })\r\n            }\r\n        </MIBreadcrumbs>\r\n    );\r\n}\r\n\r\nexport default Breadcrumbs;","import React, { useState, Component, Fragment, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Route, Redirect  } from 'react-router-dom';\r\nimport {\r\n    List, ListItem, ListItemText, Collapse, Grid, IconButton, Avatar \r\n} from '@material-ui/core';\r\nimport Cookies from 'universal-cookie';\r\nimport Loader from '../../components/Loader';\r\nimport {NavLink, Link} from 'react-router-dom';\r\nimport { \r\n    ViewComfy, ExpandMore, ExpandLess, BorderColor, AccountBalance, SwapHoriz, GroupWork,\r\n    PeopleAlt, LocalAtm, Settings, MeetingRoom, Receipt, AccountCircle, Build\r\n} from '@material-ui/icons';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { useWindowSize } from '../../lib/useWindowSize';\r\nconst cookies = new Cookies();\r\n\r\nclass LoggedIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoggedIn: true,\r\n            loading: true\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        global.Fetch(\"auth\").then((result)=>{\r\n            this.setState({\r\n                loading: false\r\n            })  \r\n        }).catch((err)=>{\r\n            cookies.remove(\"mms_login\",{path:\"/\",domain:window.location.hostname});\r\n            cookies.remove(\"mms_login\");\r\n            this.setState({\r\n                isLoggedIn: false\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (<Fragment>\r\n            { this.state.loading && <Loader />}\r\n            { !this.state.isLoggedIn && <Redirect to={{pathname: \"/login\"}}/> }\r\n        </Fragment>)\r\n    }\r\n}\r\nconst SubSidbarNav = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const { t, i18n } = useTranslation();\r\n    const { name, child, id, icon } = props;\r\n    \r\n    \r\n    const onClick = (e) => {\r\n        setOpen(!open);\r\n    }\r\n    useEffect(()=>{\r\n        const { pathname } = window.location;\r\n        if (child.find(x => (x.link == pathname )))\r\n            setOpen(true);\r\n    },[])\r\n    return (<Fragment>\r\n        <ListItem className=\"menu-item link\" key={id} button onClick={onClick}>\r\n            <NavLink className=\"nav-item\" key={id} exact to=\"#\">\r\n                <span className=\"nav-icon\">{ icon }</span>\r\n                <span className=\"nav-label\">{ name }</span>\r\n            </NavLink>\r\n            <div className=\"expand-icon\">\r\n                {open ? <ExpandLess /> : <ExpandMore />}\r\n            </div>\r\n        </ListItem>\r\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <List component=\"div\" disablePadding>\r\n                {\r\n                    child.filter(x => x.accessible).map((nav)=>{\r\n                        return(\r\n                            <ListItem className=\"menu-item link\" key={nav.id} button>\r\n                                <NavLink className=\"nav-item\" exact to={nav.link}>\r\n                                    <span className=\"nav-icon\">{ nav.icon }</span>\r\n                                    <span className=\"nav-label\">{ nav.name }</span>\r\n                                </NavLink>\r\n                            </ListItem>\r\n                        );\r\n                    })\r\n                }\r\n            </List>\r\n        </Collapse>\r\n    </Fragment>)\r\n}\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n    \r\n    const [collapse, setCollapse] = useState(true);\r\n    const [loggedOut, setLoggedOut] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const winSize = useWindowSize();\r\n\r\n    const user = cookies.get(\"mms_login\",{path: \"/\",domain:window.location.hostname});\r\n    const { t, i18n } = useTranslation();\r\n\r\n    const navigations = [\r\n        { id: 1001, name: `${t(\"lb_home\")}`, link: \"/\", icon: (<HomeIcon />), accessible: true },\r\n        { id: 1002, name: `${t(\"lb_registrations\")}`, link: \"/registrations\", icon: (<BorderColor />), accessible: global.Accessible(\"GET_REGISTRATION\") },\r\n        { id: 1003, name: `${t(\"lb_members\")}`, link: \"/members\", icon: (<PeopleAlt />), accessible: global.Accessible(\"GET_MEMBER\") },\r\n        { id: 1004, name: `${t(\"lb_finance\")}`, child: [\r\n            { id: 10041, name: `${t(\"lb_accounts\")}`, link: \"/accounts\", icon:(<AccountBalance />), accessible: global.Accessible(\"GET_ACCOUNT\") },\r\n            { id: 10042, name: `${t(\"lb_transactions\")}`, link: \"/transactions\", icon:(<SwapHoriz />), accessible: global.Accessible(\"GET_TRANSACTION\") },\r\n            { id: 10043, name: `${t(\"lb_claims\")}`, link: \"/claims\", icon:(<Receipt />), accessible: global.Accessible(\"GET_CLAIM\") }\r\n        ], icon: (<LocalAtm />), accessible: global.Accessible([\"GET_ACCOUNT\",\"GET_TRANSACTION\",\"GET_CLAIM\"]) }, \r\n        { id: 1005, name: `${t(\"lb_system\")}`,child:[\r\n            { id: 10051, name: `${t(\"lb_usergroups\")}`, link: \"/usergroups\", icon:(<GroupWork />), accessible: global.Accessible(\"GET_USER_GROUP\") },\r\n            { id: 10052, name: `${t(\"lb_users\")}`, link: \"/users\", icon:(<AccountCircle />), accessible: global.Accessible(\"GET_USER\") },\r\n            { id: 10053, name: `${t(\"lb_configs\")}`, link: \"/configs\", icon:(<Build />), accessible: global.Accessible(\"GET_SYS_CONFIG\") }\r\n        ], icon: (<Settings />), accessible: global.Accessible([\"GET_USER_GROUP\",\"GET_USER\",\"GET_SYS_CONFIG\"])}\r\n    ];\r\n\r\n    useEffect(()=>{\r\n        if (winSize.width <= 1024) {\r\n            setCollapse(false);\r\n        }\r\n    },[])\r\n\r\n    const handleLogout = (e) =>{\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        global.Fetch(\"auth/logout\",{\r\n            method: \"POST\"\r\n        }).then((result)=>{\r\n            cookies.remove(\"mms_login\",{path: \"/\",domain:window.location.hostname});\r\n            cookies.remove(\"mms_login\");\r\n            setTimeout(()=>{setLoggedOut(true);},300)\r\n        }).catch((err)=>{\r\n            cookies.remove(\"mms_login\",{path: \"/\",domain:window.location.hostname});\r\n            cookies.remove(\"mms_login\");\r\n            setTimeout(()=>{setLoggedOut(true);},300)\r\n            setLoading(false);\r\n        })\r\n    }\r\n    \r\n    return (loggedOut ? \r\n        <Fragment>\r\n            <Redirect to={{pathname: \"/login\"}}/>\r\n            { loading && <Loader />}\r\n        </Fragment> : <Fragment>\r\n        <Grid className=\"main-container\">\r\n            <LoggedIn />\r\n            <List \r\n                className={`main-menu ${collapse ? 'collapsed':''}`}\r\n                component=\"nav\"\r\n            >\r\n                <ListItem className=\"menu-item logo\">\r\n                    <IconButton\r\n                        className={ `menu-collapse` }\r\n                        onClick={(e)=>{\r\n                            setCollapse(!collapse);\r\n                        }}\r\n                    >\r\n                        <ViewComfy />\r\n                    </IconButton>\r\n                </ListItem>\r\n                <ListItem className=\"menu-item profile\">\r\n                    <NavLink className=\"nav-item\" exact to={`/profile`}>\r\n                        <Avatar className={`profile-pic`} alt={ `${ _.get(user,\"en_name\",\"\")}` } />\r\n                    </NavLink>\r\n                    <NavLink className=\"nav-item nav-label\" exact to={`/profile`}>\r\n                        <span>{ `${ _.get(user,\"en_name\",\"\")}` }</span>\r\n                    </NavLink>\r\n                </ListItem>\r\n            {\r\n                navigations.filter(x => x.accessible).map((nav)=>{\r\n                    if (nav.child !== undefined) {\r\n                        return(<SubSidbarNav\r\n                            name={nav.name}\r\n                            id={nav.id}\r\n                            key={nav.id}\r\n                            icon={nav.icon}\r\n                            child={nav.child}\r\n                            collapse\r\n                        />)\r\n                    } else {\r\n                        return(\r\n                            <ListItem className=\"menu-item link\" key={nav.id} button>\r\n                                <NavLink className=\"nav-item\" exact to={nav.link}>\r\n                                    <span className=\"nav-icon\">{ nav.icon }</span>\r\n                                    <span className=\"nav-label\">{ nav.name }</span>\r\n                                </NavLink>\r\n                            </ListItem>\r\n                        );\r\n                    }\r\n                    \r\n                })\r\n            }\r\n                <ListItem className=\"menu-item link\" key=\"2000\" button>\r\n                    <NavLink className=\"nav-item\" exact to=\"#\" onClick={ handleLogout }>\r\n                        <span className=\"nav-icon\"><MeetingRoom /></span>\r\n                        <span className=\"nav-label\">{ t('lb_logout') }</span>\r\n                    </NavLink>\r\n                </ListItem>\r\n            </List>\r\n            <Grid className=\"main-content\">\r\n                <Route\r\n                    {...rest}\r\n                    render={ props => \r\n                        (user && !loggedOut) ? (<Component {...props} />) : (<Redirect to={{pathname: \"/login\"}}/>)\r\n                    }\r\n                />\r\n            </Grid>\r\n            <footer className=\"main-footer\">\r\n                <p className={`copy-right`}>© {moment().format(\"Y\")} Hervest InTeach All rights reserved</p>\r\n            </footer>\r\n        </Grid>\r\n        { loading && <Loader />}\r\n    </Fragment>);\r\n}\r\n\r\nexport default PrivateRoute;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nconst useStyle = makeStyles({\r\n\r\n});\r\nconst FormButtonGroup = (props) => {\r\n    const { onCancel, children, allowSave = true } = props;\r\n\r\n    useEffect(()=>{\r\n\r\n    },[])\r\n\r\n    return(\r\n        <Fragment>\r\n            { children }\r\n            { \r\n                allowSave && <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"middle\"\r\n                    type=\"submit\"\r\n                    startIcon={<SaveIcon />}\r\n                    style={{\r\n                        marginRight: \"15px\"\r\n                    }}\r\n                >\r\n                    Save\r\n                </Button>\r\n            }\r\n            { \r\n                onCancel !== undefined && <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    size=\"middle\"\r\n                    startIcon={<ArrowBackIcon />}\r\n                    onClick={ onCancel }\r\n                >\r\n                    Back\r\n                </Button>\r\n            }\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default FormButtonGroup;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, TableSortLabel } from '@material-ui/core';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport _ from 'lodash';\r\nimport { Trans } from 'react-i18next'\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n      minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n    },\r\n    container: {\r\n    },\r\n}));\r\nconst DataTableHead = props => {\r\n    const { columns, dataId, order, orderBy, onSort, onSelectAll, numSelected, rowCount, rowAction } = props;\r\n    const classes = useStyles();\r\n    const createSortHandler = (property, sort) => event => {\r\n        onSort(event, property, sort);\r\n      };\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAll}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {\r\n                    columns.map((col)=>{\r\n                        var columnOrder = orderBy === col.key ? order : \"asc\";\r\n                        const { allowSort = true } = col;\r\n                        if (allowSort) {\r\n                            return(<TableCell\r\n                                key={col.key}\r\n                                align={col.align ? col.align: 'left'}\r\n                                sortDirection={orderBy === col.key ? order : false}\r\n                            >\r\n                                <TableSortLabel\r\n                                    active={orderBy === col.key}\r\n                                    direction={columnOrder}\r\n                                    onClick={createSortHandler(col.key, columnOrder ===\"desc\" ? \"asc\":\"desc\")}\r\n                                    >\r\n                                    {col.label}\r\n                                    {orderBy === col.key ? (\r\n                                        <span className={classes.visuallyHidden}>\r\n                                            {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                        </span>\r\n                                    ) : null}\r\n                                </TableSortLabel>\r\n                            </TableCell>)\r\n                        } else {\r\n                            return(<TableCell\r\n                                key={col.key}\r\n                                align={col.align ? col.align: 'left'}\r\n                                sortDirection={orderBy === col.key ? order : false}\r\n                            >\r\n                                {col.label}\r\n                            </TableCell>)\r\n                        }\r\n                        \r\n                    })\r\n                }\r\n                {\r\n                    rowAction !== undefined && <TableCell align=\"right\"><Trans i18nKey=\"lb_action\">Action</Trans></TableCell>\r\n                }\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nconst DataTable = props => {\r\n    const { columns, className, dataId, data, paging, rowAction, onChangePage, onChangeRowsPerPage, onChangeSort } = props;\r\n    const [selected, setSelected] = useState([]);\r\n    const classes = useStyles();\r\n    const isSelected = name => selected.indexOf(name) !== -1;\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n    \r\n        if (selectedIndex === -1) {\r\n          newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n          newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n          newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n          newSelected = newSelected.concat(\r\n            selected.slice(0, selectedIndex),\r\n            selected.slice(selectedIndex + 1),\r\n          );\r\n        }\r\n    \r\n        setSelected(newSelected);\r\n      };\r\n    const handleChangePage = (event, newPage) => {\r\n        // setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = event => {\r\n        // setRowsPerPage(parseInt(event.target.value, 10));\r\n        // setPage(0);\r\n    };\r\n    \r\n    return(<Fragment>\r\n        <TableContainer className={classes.container}>\r\n            <Table \r\n                className={`dataTable ${className === undefined ? '' : className}`}\r\n                aria-labelledby=\"tableTitle\"\r\n                stickyHeader \r\n            >\r\n                <DataTableHead\r\n                    {...props}\r\n                    order={ paging.order }\r\n                    orderBy={ paging.orderBy }\r\n                    numSelected={ selected.length }\r\n                    rowCount={ data.length }\r\n                    onSelectAll={(e)=>{\r\n\r\n                    }}\r\n                    onSort={onChangeSort}\r\n                />\r\n                <TableBody>\r\n                {\r\n                    data.map((row, index)=>{\r\n                        const isItemSelected = isSelected(_.get(row,dataId,''));\r\n                        const labelId = `enhanced-table-checkbox-${index}`;\r\n                        return(\r\n                            <TableRow\r\n                                hover\r\n                                onClick={event => handleClick(event, _.get(row,dataId,''))}\r\n                                role=\"checkbox\"\r\n                                tabIndex={-1}\r\n                                aria-checked={isItemSelected}\r\n                                key={row.name}\r\n                                selected={isItemSelected}\r\n                            >\r\n                                <TableCell padding=\"checkbox\">\r\n                                    <Checkbox\r\n                                    checked={isItemSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                    />\r\n                                </TableCell>\r\n                                {\r\n                                    columns.map((col)=>{\r\n                                        if (\r\n                                            col.render === undefined\r\n                                            || typeof col.render != \"function\"\r\n                                        ) {\r\n                                            return (\r\n                                                <TableCell>{ _.get(row,col.key,'') }</TableCell>\r\n                                            )\r\n                                        } else {\r\n                                            return(<TableCell>\r\n                                                { col.render(row, _.get(row,col.key,null))}\r\n                                            </TableCell>)\r\n                                        }\r\n                                        \r\n                                    })\r\n                                }\r\n                                {\r\n                                    rowAction !== undefined && <TableCell align=\"right\">{ rowAction(row) }</TableCell>\r\n                                }\r\n                            </TableRow>\r\n                        )\r\n                    })\r\n                }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={paging.total}\r\n          rowsPerPage={paging.pageSize}\r\n        //   SelectProps={paging.pageSize}\r\n          page={paging.current-1}\r\n          onChangePage={onChangePage}\r\n          onChangeRowsPerPage={onChangeRowsPerPage}\r\n        />\r\n    </Fragment>)\r\n}\r\nDataTable.prototype = {\r\n    rowAction: PropTypes.func,\r\n    columns: PropTypes.array.isRequired,\r\n    paging: PropTypes.object.isRequired,\r\n    dataId: PropTypes.string.isRequired,\r\n    onChangePage: PropTypes.func.isRequired,\r\n    onChangeRowsPerPage: PropTypes.func.isRequired,\r\n    onChangeSort: PropTypes.func.isRequired,\r\n    data: PropTypes.array\r\n}\r\nexport default DataTable;","import React, { useState, Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nconst SearchBox = props => {\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    const { onSearch, placeholder = \"Search...\" } = props;\r\n\r\n    const onSearchClick = (e) => {\r\n        onSearch(search);\r\n    }\r\n    return(<TextField\r\n        type='text'\r\n        onChange={(e)=>{ setSearch(e.target.value) }}\r\n        value={search}\r\n        variant=\"outlined\"\r\n        className=\"search-box\"\r\n        onKeyPress={(e)=>{\r\n          if (e.key === 'Enter') {\r\n            e.preventDefault();\r\n            onSearch(search);\r\n          }\r\n        }}\r\n        InputProps={{\r\n            className: \"form-input\",\r\n            startAdornment: (\r\n              <InputAdornment\r\n                onClick={onSearchClick}\r\n                position=\"start\">\r\n                    <SearchIcon/>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        placeholder={placeholder}\r\n    />);\r\n}\r\nSearchBox.propTypes = {\r\n    onSearch: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchBox;","import React, { Component, useState, useEffect, Fragment } from 'react';\r\nimport { Grid, FormLabel } from '@material-ui/core';\r\n\r\n\r\nconst FormItemContainer = (props) => {\r\n    const { children, label=\"\", required = false, large=false, fullWidth=false } = props;\r\n\r\n    return(<Grid container className={`form-item-container`}>\r\n        {\r\n            !fullWidth && <Grid item xs={large ? 3: 6}>\r\n                <FormLabel className={`form-label ${required ? 'required' : \"\"}`}>{ label }</FormLabel>\r\n            </Grid>\r\n        }\r\n        <Grid item xs={large ? 9 : 6}>\r\n            { children }\r\n        </Grid>\r\n    </Grid>);\r\n}\r\n\r\nexport default FormItemContainer;","import React, { useState, Fragment, useEffect, Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Modal , Paper, Backdrop, Fade } from '@material-ui/core'\r\nimport moment from 'moment';\r\nimport { FormHelperText } from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles({\r\n    hidden: {\r\n        display: \"none\"\r\n    },\r\n    preview: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    uploadContainer: {\r\n        height: \"150px\",\r\n        width: \"200px\",\r\n        position: \"relative\"\r\n    },\r\n    uploadButton: {\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        marginRight: \"-50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    },\r\n    uploadPreviewContainer: {\r\n        height: \"150px\",\r\n        width: \"200px\",\r\n        zIndex: 1,\r\n        overflow: \"hidden\",\r\n        backgroundSize: \"cover\",\r\n        backgroundRepeat: \"no-repeat\"\r\n    },\r\n    modalPreview: {\r\n        maxHeight: \"80vh\",\r\n        maxWidth: \"80vw\"\r\n    },\r\n    uploadRemove: {\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        right: \"0\",\r\n        transform: \"translate(50%, -50%)\"\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n})\r\nconst FileUpload = props => {\r\n\r\n    const [file, setFiles] = useState(null);\r\n    const { name, onChange, icon, deletedField, value, disabled= false } = props;\r\n\r\n    const [preview, setPreview] = useState(null);\r\n    const [fileKey, setFileKey] = useState(moment().format(\"YYYYMMDDHHmmss\"));\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyle();\r\n    useEffect(()=>{\r\n        setPreview(value);\r\n    },[value])\r\n    const handleChange = (e) => {\r\n        let value = e.target.files[0];\r\n        var reader = new FileReader();\r\n        var url = reader.readAsDataURL(value);\r\n        reader.onloadend = function (e) {\r\n            setPreview(reader.result)\r\n        }.bind(this);\r\n        console.log(\"on add\")\r\n        if (onChange !== undefined && typeof onChange == \"function\") \r\n        {\r\n            onChange(name,value);\r\n            if (deletedField !== undefined) setTimeout(()=>{onChange(deletedField,false);},100);\r\n        }\r\n    }\r\n\r\n    const handleRemove = (e) => {\r\n        setFiles(null);\r\n        setFileKey(moment().format(\"YYYYMMDDHHmmss\"));\r\n        setPreview(null);\r\n        console.log(\"on remove\")\r\n        if (onChange !== undefined && typeof onChange == \"function\") \r\n        {\r\n            onChange(name, null);\r\n            if (deletedField !== undefined) setTimeout(()=>{onChange(deletedField,true);},100);\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    \r\n    return(<Fragment>\r\n        <input\r\n            accept=\"image/*\"\r\n            id=\"icon-button-photo\"\r\n            onChange={handleChange}\r\n            type=\"file\"\r\n            key={fileKey}\r\n            className={classes.hidden}\r\n        />\r\n        <Paper className={classes.uploadContainer}>\r\n            {\r\n                preview ? <IconButton color=\"secondary\" className={classes.uploadRemove} disabled={disabled} component=\"span\" onClick={handleRemove}>\r\n                    <CancelIcon />\r\n                </IconButton> : <label htmlFor=\"icon-button-photo\" className={classes.uploadButton}>\r\n                    <IconButton color=\"primary\" component=\"span\" disabled={disabled}>\r\n                        {icon === undefined ? <AddAPhotoIcon /> : <Component component={icon}/>}\r\n                    </IconButton>\r\n                </label>\r\n            }\r\n            {\r\n                preview && <Paper className={classes.uploadPreviewContainer}\r\n                    style={preview ? {\r\n                        backgroundImage: `url(${preview})`\r\n                    } : {}}\r\n                    onClick={(e)=>{\r\n                        setOpen(true);\r\n                    }}\r\n                >\r\n                    \r\n                </Paper>\r\n            }\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                onBackdropClick={handleClose}\r\n                closeAfterTransition\r\n                className={classes.modal}\r\n                BackdropComponent={Backdrop}\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n            >\r\n                <Fade in={open}>\r\n                    <img src={preview} className={classes.modalPreview}/>\r\n                </Fade>\r\n            </Modal>\r\n        </Paper>\r\n    </Fragment>);\r\n}\r\n\r\nexport default FileUpload;"],"sourceRoot":""}